
bin/v1.gateway.elf:     file format elf32-littlearm


Disassembly of section .text:

00000150 <__aeabi_drsub>:
     150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     154:	e002      	b.n	15c <__adddf3>
     156:	bf00      	nop

00000158 <__aeabi_dsub>:
     158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000015c <__adddf3>:
     15c:	b530      	push	{r4, r5, lr}
     15e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     162:	ea4f 0543 	mov.w	r5, r3, lsl #1
     166:	ea94 0f05 	teq	r4, r5
     16a:	bf08      	it	eq
     16c:	ea90 0f02 	teqeq	r0, r2
     170:	bf1f      	itttt	ne
     172:	ea54 0c00 	orrsne.w	ip, r4, r0
     176:	ea55 0c02 	orrsne.w	ip, r5, r2
     17a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     17e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     182:	f000 80e2 	beq.w	34a <__adddf3+0x1ee>
     186:	ea4f 5454 	mov.w	r4, r4, lsr #21
     18a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     18e:	bfb8      	it	lt
     190:	426d      	neglt	r5, r5
     192:	dd0c      	ble.n	1ae <__adddf3+0x52>
     194:	442c      	add	r4, r5
     196:	ea80 0202 	eor.w	r2, r0, r2
     19a:	ea81 0303 	eor.w	r3, r1, r3
     19e:	ea82 0000 	eor.w	r0, r2, r0
     1a2:	ea83 0101 	eor.w	r1, r3, r1
     1a6:	ea80 0202 	eor.w	r2, r0, r2
     1aa:	ea81 0303 	eor.w	r3, r1, r3
     1ae:	2d36      	cmp	r5, #54	; 0x36
     1b0:	bf88      	it	hi
     1b2:	bd30      	pophi	{r4, r5, pc}
     1b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1c4:	d002      	beq.n	1cc <__adddf3+0x70>
     1c6:	4240      	negs	r0, r0
     1c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1d8:	d002      	beq.n	1e0 <__adddf3+0x84>
     1da:	4252      	negs	r2, r2
     1dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e0:	ea94 0f05 	teq	r4, r5
     1e4:	f000 80a7 	beq.w	336 <__adddf3+0x1da>
     1e8:	f1a4 0401 	sub.w	r4, r4, #1
     1ec:	f1d5 0e20 	rsbs	lr, r5, #32
     1f0:	db0d      	blt.n	20e <__adddf3+0xb2>
     1f2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1f6:	fa22 f205 	lsr.w	r2, r2, r5
     1fa:	1880      	adds	r0, r0, r2
     1fc:	f141 0100 	adc.w	r1, r1, #0
     200:	fa03 f20e 	lsl.w	r2, r3, lr
     204:	1880      	adds	r0, r0, r2
     206:	fa43 f305 	asr.w	r3, r3, r5
     20a:	4159      	adcs	r1, r3
     20c:	e00e      	b.n	22c <__adddf3+0xd0>
     20e:	f1a5 0520 	sub.w	r5, r5, #32
     212:	f10e 0e20 	add.w	lr, lr, #32
     216:	2a01      	cmp	r2, #1
     218:	fa03 fc0e 	lsl.w	ip, r3, lr
     21c:	bf28      	it	cs
     21e:	f04c 0c02 	orrcs.w	ip, ip, #2
     222:	fa43 f305 	asr.w	r3, r3, r5
     226:	18c0      	adds	r0, r0, r3
     228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     22c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     230:	d507      	bpl.n	242 <__adddf3+0xe6>
     232:	f04f 0e00 	mov.w	lr, #0
     236:	f1dc 0c00 	rsbs	ip, ip, #0
     23a:	eb7e 0000 	sbcs.w	r0, lr, r0
     23e:	eb6e 0101 	sbc.w	r1, lr, r1
     242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     246:	d31b      	bcc.n	280 <__adddf3+0x124>
     248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     24c:	d30c      	bcc.n	268 <__adddf3+0x10c>
     24e:	0849      	lsrs	r1, r1, #1
     250:	ea5f 0030 	movs.w	r0, r0, rrx
     254:	ea4f 0c3c 	mov.w	ip, ip, rrx
     258:	f104 0401 	add.w	r4, r4, #1
     25c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     264:	f080 809a 	bcs.w	39c <__adddf3+0x240>
     268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     26c:	bf08      	it	eq
     26e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     272:	f150 0000 	adcs.w	r0, r0, #0
     276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     27a:	ea41 0105 	orr.w	r1, r1, r5
     27e:	bd30      	pop	{r4, r5, pc}
     280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     284:	4140      	adcs	r0, r0
     286:	eb41 0101 	adc.w	r1, r1, r1
     28a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     28e:	f1a4 0401 	sub.w	r4, r4, #1
     292:	d1e9      	bne.n	268 <__adddf3+0x10c>
     294:	f091 0f00 	teq	r1, #0
     298:	bf04      	itt	eq
     29a:	4601      	moveq	r1, r0
     29c:	2000      	moveq	r0, #0
     29e:	fab1 f381 	clz	r3, r1
     2a2:	bf08      	it	eq
     2a4:	3320      	addeq	r3, #32
     2a6:	f1a3 030b 	sub.w	r3, r3, #11
     2aa:	f1b3 0220 	subs.w	r2, r3, #32
     2ae:	da0c      	bge.n	2ca <__adddf3+0x16e>
     2b0:	320c      	adds	r2, #12
     2b2:	dd08      	ble.n	2c6 <__adddf3+0x16a>
     2b4:	f102 0c14 	add.w	ip, r2, #20
     2b8:	f1c2 020c 	rsb	r2, r2, #12
     2bc:	fa01 f00c 	lsl.w	r0, r1, ip
     2c0:	fa21 f102 	lsr.w	r1, r1, r2
     2c4:	e00c      	b.n	2e0 <__adddf3+0x184>
     2c6:	f102 0214 	add.w	r2, r2, #20
     2ca:	bfd8      	it	le
     2cc:	f1c2 0c20 	rsble	ip, r2, #32
     2d0:	fa01 f102 	lsl.w	r1, r1, r2
     2d4:	fa20 fc0c 	lsr.w	ip, r0, ip
     2d8:	bfdc      	itt	le
     2da:	ea41 010c 	orrle.w	r1, r1, ip
     2de:	4090      	lslle	r0, r2
     2e0:	1ae4      	subs	r4, r4, r3
     2e2:	bfa2      	ittt	ge
     2e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2e8:	4329      	orrge	r1, r5
     2ea:	bd30      	popge	{r4, r5, pc}
     2ec:	ea6f 0404 	mvn.w	r4, r4
     2f0:	3c1f      	subs	r4, #31
     2f2:	da1c      	bge.n	32e <__adddf3+0x1d2>
     2f4:	340c      	adds	r4, #12
     2f6:	dc0e      	bgt.n	316 <__adddf3+0x1ba>
     2f8:	f104 0414 	add.w	r4, r4, #20
     2fc:	f1c4 0220 	rsb	r2, r4, #32
     300:	fa20 f004 	lsr.w	r0, r0, r4
     304:	fa01 f302 	lsl.w	r3, r1, r2
     308:	ea40 0003 	orr.w	r0, r0, r3
     30c:	fa21 f304 	lsr.w	r3, r1, r4
     310:	ea45 0103 	orr.w	r1, r5, r3
     314:	bd30      	pop	{r4, r5, pc}
     316:	f1c4 040c 	rsb	r4, r4, #12
     31a:	f1c4 0220 	rsb	r2, r4, #32
     31e:	fa20 f002 	lsr.w	r0, r0, r2
     322:	fa01 f304 	lsl.w	r3, r1, r4
     326:	ea40 0003 	orr.w	r0, r0, r3
     32a:	4629      	mov	r1, r5
     32c:	bd30      	pop	{r4, r5, pc}
     32e:	fa21 f004 	lsr.w	r0, r1, r4
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	f094 0f00 	teq	r4, #0
     33a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     33e:	bf06      	itte	eq
     340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     344:	3401      	addeq	r4, #1
     346:	3d01      	subne	r5, #1
     348:	e74e      	b.n	1e8 <__adddf3+0x8c>
     34a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     34e:	bf18      	it	ne
     350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     354:	d029      	beq.n	3aa <__adddf3+0x24e>
     356:	ea94 0f05 	teq	r4, r5
     35a:	bf08      	it	eq
     35c:	ea90 0f02 	teqeq	r0, r2
     360:	d005      	beq.n	36e <__adddf3+0x212>
     362:	ea54 0c00 	orrs.w	ip, r4, r0
     366:	bf04      	itt	eq
     368:	4619      	moveq	r1, r3
     36a:	4610      	moveq	r0, r2
     36c:	bd30      	pop	{r4, r5, pc}
     36e:	ea91 0f03 	teq	r1, r3
     372:	bf1e      	ittt	ne
     374:	2100      	movne	r1, #0
     376:	2000      	movne	r0, #0
     378:	bd30      	popne	{r4, r5, pc}
     37a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     37e:	d105      	bne.n	38c <__adddf3+0x230>
     380:	0040      	lsls	r0, r0, #1
     382:	4149      	adcs	r1, r1
     384:	bf28      	it	cs
     386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     38a:	bd30      	pop	{r4, r5, pc}
     38c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     390:	bf3c      	itt	cc
     392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     396:	bd30      	popcc	{r4, r5, pc}
     398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     39c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3a4:	f04f 0000 	mov.w	r0, #0
     3a8:	bd30      	pop	{r4, r5, pc}
     3aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3ae:	bf1a      	itte	ne
     3b0:	4619      	movne	r1, r3
     3b2:	4610      	movne	r0, r2
     3b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3b8:	bf1c      	itt	ne
     3ba:	460b      	movne	r3, r1
     3bc:	4602      	movne	r2, r0
     3be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3c2:	bf06      	itte	eq
     3c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3c8:	ea91 0f03 	teqeq	r1, r3
     3cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d0:	bd30      	pop	{r4, r5, pc}
     3d2:	bf00      	nop

000003d4 <__aeabi_ui2d>:
     3d4:	f090 0f00 	teq	r0, #0
     3d8:	bf04      	itt	eq
     3da:	2100      	moveq	r1, #0
     3dc:	4770      	bxeq	lr
     3de:	b530      	push	{r4, r5, lr}
     3e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3e8:	f04f 0500 	mov.w	r5, #0
     3ec:	f04f 0100 	mov.w	r1, #0
     3f0:	e750      	b.n	294 <__adddf3+0x138>
     3f2:	bf00      	nop

000003f4 <__aeabi_i2d>:
     3f4:	f090 0f00 	teq	r0, #0
     3f8:	bf04      	itt	eq
     3fa:	2100      	moveq	r1, #0
     3fc:	4770      	bxeq	lr
     3fe:	b530      	push	{r4, r5, lr}
     400:	f44f 6480 	mov.w	r4, #1024	; 0x400
     404:	f104 0432 	add.w	r4, r4, #50	; 0x32
     408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     40c:	bf48      	it	mi
     40e:	4240      	negmi	r0, r0
     410:	f04f 0100 	mov.w	r1, #0
     414:	e73e      	b.n	294 <__adddf3+0x138>
     416:	bf00      	nop

00000418 <__aeabi_f2d>:
     418:	0042      	lsls	r2, r0, #1
     41a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     41e:	ea4f 0131 	mov.w	r1, r1, rrx
     422:	ea4f 7002 	mov.w	r0, r2, lsl #28
     426:	bf1f      	itttt	ne
     428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     42c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     434:	4770      	bxne	lr
     436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     43a:	bf08      	it	eq
     43c:	4770      	bxeq	lr
     43e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     442:	bf04      	itt	eq
     444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     448:	4770      	bxeq	lr
     44a:	b530      	push	{r4, r5, lr}
     44c:	f44f 7460 	mov.w	r4, #896	; 0x380
     450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     458:	e71c      	b.n	294 <__adddf3+0x138>
     45a:	bf00      	nop

0000045c <__aeabi_ul2d>:
     45c:	ea50 0201 	orrs.w	r2, r0, r1
     460:	bf08      	it	eq
     462:	4770      	bxeq	lr
     464:	b530      	push	{r4, r5, lr}
     466:	f04f 0500 	mov.w	r5, #0
     46a:	e00a      	b.n	482 <__aeabi_l2d+0x16>

0000046c <__aeabi_l2d>:
     46c:	ea50 0201 	orrs.w	r2, r0, r1
     470:	bf08      	it	eq
     472:	4770      	bxeq	lr
     474:	b530      	push	{r4, r5, lr}
     476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     47a:	d502      	bpl.n	482 <__aeabi_l2d+0x16>
     47c:	4240      	negs	r0, r0
     47e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     482:	f44f 6480 	mov.w	r4, #1024	; 0x400
     486:	f104 0432 	add.w	r4, r4, #50	; 0x32
     48a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     48e:	f43f aed8 	beq.w	242 <__adddf3+0xe6>
     492:	f04f 0203 	mov.w	r2, #3
     496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     49a:	bf18      	it	ne
     49c:	3203      	addne	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4aa:	f1c2 0320 	rsb	r3, r2, #32
     4ae:	fa00 fc03 	lsl.w	ip, r0, r3
     4b2:	fa20 f002 	lsr.w	r0, r0, r2
     4b6:	fa01 fe03 	lsl.w	lr, r1, r3
     4ba:	ea40 000e 	orr.w	r0, r0, lr
     4be:	fa21 f102 	lsr.w	r1, r1, r2
     4c2:	4414      	add	r4, r2
     4c4:	e6bd      	b.n	242 <__adddf3+0xe6>
     4c6:	bf00      	nop

000004c8 <__aeabi_dmul>:
     4c8:	b570      	push	{r4, r5, r6, lr}
     4ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4d6:	bf1d      	ittte	ne
     4d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4dc:	ea94 0f0c 	teqne	r4, ip
     4e0:	ea95 0f0c 	teqne	r5, ip
     4e4:	f000 f8de 	bleq	6a4 <__aeabi_dmul+0x1dc>
     4e8:	442c      	add	r4, r5
     4ea:	ea81 0603 	eor.w	r6, r1, r3
     4ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4fa:	bf18      	it	ne
     4fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     508:	d038      	beq.n	57c <__aeabi_dmul+0xb4>
     50a:	fba0 ce02 	umull	ip, lr, r0, r2
     50e:	f04f 0500 	mov.w	r5, #0
     512:	fbe1 e502 	umlal	lr, r5, r1, r2
     516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     51a:	fbe0 e503 	umlal	lr, r5, r0, r3
     51e:	f04f 0600 	mov.w	r6, #0
     522:	fbe1 5603 	umlal	r5, r6, r1, r3
     526:	f09c 0f00 	teq	ip, #0
     52a:	bf18      	it	ne
     52c:	f04e 0e01 	orrne.w	lr, lr, #1
     530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     53c:	d204      	bcs.n	548 <__aeabi_dmul+0x80>
     53e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     542:	416d      	adcs	r5, r5
     544:	eb46 0606 	adc.w	r6, r6, r6
     548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     54c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     55c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     560:	bf88      	it	hi
     562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     566:	d81e      	bhi.n	5a6 <__aeabi_dmul+0xde>
     568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     56c:	bf08      	it	eq
     56e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     572:	f150 0000 	adcs.w	r0, r0, #0
     576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     57a:	bd70      	pop	{r4, r5, r6, pc}
     57c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     580:	ea46 0101 	orr.w	r1, r6, r1
     584:	ea40 0002 	orr.w	r0, r0, r2
     588:	ea81 0103 	eor.w	r1, r1, r3
     58c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     590:	bfc2      	ittt	gt
     592:	ebd4 050c 	rsbsgt	r5, r4, ip
     596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     59a:	bd70      	popgt	{r4, r5, r6, pc}
     59c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a0:	f04f 0e00 	mov.w	lr, #0
     5a4:	3c01      	subs	r4, #1
     5a6:	f300 80ab 	bgt.w	700 <__aeabi_dmul+0x238>
     5aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5ae:	bfde      	ittt	le
     5b0:	2000      	movle	r0, #0
     5b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5b6:	bd70      	pople	{r4, r5, r6, pc}
     5b8:	f1c4 0400 	rsb	r4, r4, #0
     5bc:	3c20      	subs	r4, #32
     5be:	da35      	bge.n	62c <__aeabi_dmul+0x164>
     5c0:	340c      	adds	r4, #12
     5c2:	dc1b      	bgt.n	5fc <__aeabi_dmul+0x134>
     5c4:	f104 0414 	add.w	r4, r4, #20
     5c8:	f1c4 0520 	rsb	r5, r4, #32
     5cc:	fa00 f305 	lsl.w	r3, r0, r5
     5d0:	fa20 f004 	lsr.w	r0, r0, r4
     5d4:	fa01 f205 	lsl.w	r2, r1, r5
     5d8:	ea40 0002 	orr.w	r0, r0, r2
     5dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5e8:	fa21 f604 	lsr.w	r6, r1, r4
     5ec:	eb42 0106 	adc.w	r1, r2, r6
     5f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5f4:	bf08      	it	eq
     5f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5fa:	bd70      	pop	{r4, r5, r6, pc}
     5fc:	f1c4 040c 	rsb	r4, r4, #12
     600:	f1c4 0520 	rsb	r5, r4, #32
     604:	fa00 f304 	lsl.w	r3, r0, r4
     608:	fa20 f005 	lsr.w	r0, r0, r5
     60c:	fa01 f204 	lsl.w	r2, r1, r4
     610:	ea40 0002 	orr.w	r0, r0, r2
     614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     61c:	f141 0100 	adc.w	r1, r1, #0
     620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     624:	bf08      	it	eq
     626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	f1c4 0520 	rsb	r5, r4, #32
     630:	fa00 f205 	lsl.w	r2, r0, r5
     634:	ea4e 0e02 	orr.w	lr, lr, r2
     638:	fa20 f304 	lsr.w	r3, r0, r4
     63c:	fa01 f205 	lsl.w	r2, r1, r5
     640:	ea43 0302 	orr.w	r3, r3, r2
     644:	fa21 f004 	lsr.w	r0, r1, r4
     648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     64c:	fa21 f204 	lsr.w	r2, r1, r4
     650:	ea20 0002 	bic.w	r0, r0, r2
     654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     65c:	bf08      	it	eq
     65e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     662:	bd70      	pop	{r4, r5, r6, pc}
     664:	f094 0f00 	teq	r4, #0
     668:	d10f      	bne.n	68a <__aeabi_dmul+0x1c2>
     66a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     66e:	0040      	lsls	r0, r0, #1
     670:	eb41 0101 	adc.w	r1, r1, r1
     674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     678:	bf08      	it	eq
     67a:	3c01      	subeq	r4, #1
     67c:	d0f7      	beq.n	66e <__aeabi_dmul+0x1a6>
     67e:	ea41 0106 	orr.w	r1, r1, r6
     682:	f095 0f00 	teq	r5, #0
     686:	bf18      	it	ne
     688:	4770      	bxne	lr
     68a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     68e:	0052      	lsls	r2, r2, #1
     690:	eb43 0303 	adc.w	r3, r3, r3
     694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     698:	bf08      	it	eq
     69a:	3d01      	subeq	r5, #1
     69c:	d0f7      	beq.n	68e <__aeabi_dmul+0x1c6>
     69e:	ea43 0306 	orr.w	r3, r3, r6
     6a2:	4770      	bx	lr
     6a4:	ea94 0f0c 	teq	r4, ip
     6a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6ac:	bf18      	it	ne
     6ae:	ea95 0f0c 	teqne	r5, ip
     6b2:	d00c      	beq.n	6ce <__aeabi_dmul+0x206>
     6b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6b8:	bf18      	it	ne
     6ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6be:	d1d1      	bne.n	664 <__aeabi_dmul+0x19c>
     6c0:	ea81 0103 	eor.w	r1, r1, r3
     6c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6c8:	f04f 0000 	mov.w	r0, #0
     6cc:	bd70      	pop	{r4, r5, r6, pc}
     6ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6d2:	bf06      	itte	eq
     6d4:	4610      	moveq	r0, r2
     6d6:	4619      	moveq	r1, r3
     6d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6dc:	d019      	beq.n	712 <__aeabi_dmul+0x24a>
     6de:	ea94 0f0c 	teq	r4, ip
     6e2:	d102      	bne.n	6ea <__aeabi_dmul+0x222>
     6e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6e8:	d113      	bne.n	712 <__aeabi_dmul+0x24a>
     6ea:	ea95 0f0c 	teq	r5, ip
     6ee:	d105      	bne.n	6fc <__aeabi_dmul+0x234>
     6f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6f4:	bf1c      	itt	ne
     6f6:	4610      	movne	r0, r2
     6f8:	4619      	movne	r1, r3
     6fa:	d10a      	bne.n	712 <__aeabi_dmul+0x24a>
     6fc:	ea81 0103 	eor.w	r1, r1, r3
     700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     70c:	f04f 0000 	mov.w	r0, #0
     710:	bd70      	pop	{r4, r5, r6, pc}
     712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     71a:	bd70      	pop	{r4, r5, r6, pc}

0000071c <__aeabi_ddiv>:
     71c:	b570      	push	{r4, r5, r6, lr}
     71e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     72a:	bf1d      	ittte	ne
     72c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     730:	ea94 0f0c 	teqne	r4, ip
     734:	ea95 0f0c 	teqne	r5, ip
     738:	f000 f8a7 	bleq	88a <_min_heap_size+0x8a>
     73c:	eba4 0405 	sub.w	r4, r4, r5
     740:	ea81 0e03 	eor.w	lr, r1, r3
     744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     748:	ea4f 3101 	mov.w	r1, r1, lsl #12
     74c:	f000 8088 	beq.w	860 <_min_heap_size+0x60>
     750:	ea4f 3303 	mov.w	r3, r3, lsl #12
     754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     75c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     760:	ea4f 2202 	mov.w	r2, r2, lsl #8
     764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     76c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     774:	429d      	cmp	r5, r3
     776:	bf08      	it	eq
     778:	4296      	cmpeq	r6, r2
     77a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     77e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     782:	d202      	bcs.n	78a <__aeabi_ddiv+0x6e>
     784:	085b      	lsrs	r3, r3, #1
     786:	ea4f 0232 	mov.w	r2, r2, rrx
     78a:	1ab6      	subs	r6, r6, r2
     78c:	eb65 0503 	sbc.w	r5, r5, r3
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     79a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     79e:	ebb6 0e02 	subs.w	lr, r6, r2
     7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7a6:	bf22      	ittt	cs
     7a8:	1ab6      	subcs	r6, r6, r2
     7aa:	4675      	movcs	r5, lr
     7ac:	ea40 000c 	orrcs.w	r0, r0, ip
     7b0:	085b      	lsrs	r3, r3, #1
     7b2:	ea4f 0232 	mov.w	r2, r2, rrx
     7b6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
     7be:	bf22      	ittt	cs
     7c0:	1ab6      	subcs	r6, r6, r2
     7c2:	4675      	movcs	r5, lr
     7c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7c8:	085b      	lsrs	r3, r3, #1
     7ca:	ea4f 0232 	mov.w	r2, r2, rrx
     7ce:	ebb6 0e02 	subs.w	lr, r6, r2
     7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7d6:	bf22      	ittt	cs
     7d8:	1ab6      	subcs	r6, r6, r2
     7da:	4675      	movcs	r5, lr
     7dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ee:	bf22      	ittt	cs
     7f0:	1ab6      	subcs	r6, r6, r2
     7f2:	4675      	movcs	r5, lr
     7f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7f8:	ea55 0e06 	orrs.w	lr, r5, r6
     7fc:	d018      	beq.n	830 <_min_heap_size+0x30>
     7fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
     802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     806:	ea4f 1606 	mov.w	r6, r6, lsl #4
     80a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     80e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     81a:	d1c0      	bne.n	79e <__aeabi_ddiv+0x82>
     81c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     820:	d10b      	bne.n	83a <_min_heap_size+0x3a>
     822:	ea41 0100 	orr.w	r1, r1, r0
     826:	f04f 0000 	mov.w	r0, #0
     82a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     82e:	e7b6      	b.n	79e <__aeabi_ddiv+0x82>
     830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     834:	bf04      	itt	eq
     836:	4301      	orreq	r1, r0
     838:	2000      	moveq	r0, #0
     83a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     83e:	bf88      	it	hi
     840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     844:	f63f aeaf 	bhi.w	5a6 <__aeabi_dmul+0xde>
     848:	ebb5 0c03 	subs.w	ip, r5, r3
     84c:	bf04      	itt	eq
     84e:	ebb6 0c02 	subseq.w	ip, r6, r2
     852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     856:	f150 0000 	adcs.w	r0, r0, #0
     85a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     85e:	bd70      	pop	{r4, r5, r6, pc}
     860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     86c:	bfc2      	ittt	gt
     86e:	ebd4 050c 	rsbsgt	r5, r4, ip
     872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     876:	bd70      	popgt	{r4, r5, r6, pc}
     878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     87c:	f04f 0e00 	mov.w	lr, #0
     880:	3c01      	subs	r4, #1
     882:	e690      	b.n	5a6 <__aeabi_dmul+0xde>
     884:	ea45 0e06 	orr.w	lr, r5, r6
     888:	e68d      	b.n	5a6 <__aeabi_dmul+0xde>
     88a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     88e:	ea94 0f0c 	teq	r4, ip
     892:	bf08      	it	eq
     894:	ea95 0f0c 	teqeq	r5, ip
     898:	f43f af3b 	beq.w	712 <__aeabi_dmul+0x24a>
     89c:	ea94 0f0c 	teq	r4, ip
     8a0:	d10a      	bne.n	8b8 <_min_heap_size+0xb8>
     8a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8a6:	f47f af34 	bne.w	712 <__aeabi_dmul+0x24a>
     8aa:	ea95 0f0c 	teq	r5, ip
     8ae:	f47f af25 	bne.w	6fc <__aeabi_dmul+0x234>
     8b2:	4610      	mov	r0, r2
     8b4:	4619      	mov	r1, r3
     8b6:	e72c      	b.n	712 <__aeabi_dmul+0x24a>
     8b8:	ea95 0f0c 	teq	r5, ip
     8bc:	d106      	bne.n	8cc <_min_heap_size+0xcc>
     8be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8c2:	f43f aefd 	beq.w	6c0 <__aeabi_dmul+0x1f8>
     8c6:	4610      	mov	r0, r2
     8c8:	4619      	mov	r1, r3
     8ca:	e722      	b.n	712 <__aeabi_dmul+0x24a>
     8cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d0:	bf18      	it	ne
     8d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8d6:	f47f aec5 	bne.w	664 <__aeabi_dmul+0x19c>
     8da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8de:	f47f af0d 	bne.w	6fc <__aeabi_dmul+0x234>
     8e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8e6:	f47f aeeb 	bne.w	6c0 <__aeabi_dmul+0x1f8>
     8ea:	e712      	b.n	712 <__aeabi_dmul+0x24a>

000008ec <__gedf2>:
     8ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8f0:	e006      	b.n	900 <__cmpdf2+0x4>
     8f2:	bf00      	nop

000008f4 <__ledf2>:
     8f4:	f04f 0c01 	mov.w	ip, #1
     8f8:	e002      	b.n	900 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__cmpdf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	f84d cd04 	str.w	ip, [sp, #-4]!
     904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     90c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     910:	bf18      	it	ne
     912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     916:	d01b      	beq.n	950 <__cmpdf2+0x54>
     918:	b001      	add	sp, #4
     91a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     91e:	bf0c      	ite	eq
     920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     924:	ea91 0f03 	teqne	r1, r3
     928:	bf02      	ittt	eq
     92a:	ea90 0f02 	teqeq	r0, r2
     92e:	2000      	moveq	r0, #0
     930:	4770      	bxeq	lr
     932:	f110 0f00 	cmn.w	r0, #0
     936:	ea91 0f03 	teq	r1, r3
     93a:	bf58      	it	pl
     93c:	4299      	cmppl	r1, r3
     93e:	bf08      	it	eq
     940:	4290      	cmpeq	r0, r2
     942:	bf2c      	ite	cs
     944:	17d8      	asrcs	r0, r3, #31
     946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     94a:	f040 0001 	orr.w	r0, r0, #1
     94e:	4770      	bx	lr
     950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     958:	d102      	bne.n	960 <__cmpdf2+0x64>
     95a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     95e:	d107      	bne.n	970 <__cmpdf2+0x74>
     960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     968:	d1d6      	bne.n	918 <__cmpdf2+0x1c>
     96a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     96e:	d0d3      	beq.n	918 <__cmpdf2+0x1c>
     970:	f85d 0b04 	ldr.w	r0, [sp], #4
     974:	4770      	bx	lr
     976:	bf00      	nop

00000978 <__aeabi_cdrcmple>:
     978:	4684      	mov	ip, r0
     97a:	4610      	mov	r0, r2
     97c:	4662      	mov	r2, ip
     97e:	468c      	mov	ip, r1
     980:	4619      	mov	r1, r3
     982:	4663      	mov	r3, ip
     984:	e000      	b.n	988 <__aeabi_cdcmpeq>
     986:	bf00      	nop

00000988 <__aeabi_cdcmpeq>:
     988:	b501      	push	{r0, lr}
     98a:	f7ff ffb7 	bl	8fc <__cmpdf2>
     98e:	2800      	cmp	r0, #0
     990:	bf48      	it	mi
     992:	f110 0f00 	cmnmi.w	r0, #0
     996:	bd01      	pop	{r0, pc}

00000998 <__aeabi_dcmpeq>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff fff4 	bl	988 <__aeabi_cdcmpeq>
     9a0:	bf0c      	ite	eq
     9a2:	2001      	moveq	r0, #1
     9a4:	2000      	movne	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_dcmplt>:
     9ac:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b0:	f7ff ffea 	bl	988 <__aeabi_cdcmpeq>
     9b4:	bf34      	ite	cc
     9b6:	2001      	movcc	r0, #1
     9b8:	2000      	movcs	r0, #0
     9ba:	f85d fb08 	ldr.w	pc, [sp], #8
     9be:	bf00      	nop

000009c0 <__aeabi_dcmple>:
     9c0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9c4:	f7ff ffe0 	bl	988 <__aeabi_cdcmpeq>
     9c8:	bf94      	ite	ls
     9ca:	2001      	movls	r0, #1
     9cc:	2000      	movhi	r0, #0
     9ce:	f85d fb08 	ldr.w	pc, [sp], #8
     9d2:	bf00      	nop

000009d4 <__aeabi_dcmpge>:
     9d4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9d8:	f7ff ffce 	bl	978 <__aeabi_cdrcmple>
     9dc:	bf94      	ite	ls
     9de:	2001      	movls	r0, #1
     9e0:	2000      	movhi	r0, #0
     9e2:	f85d fb08 	ldr.w	pc, [sp], #8
     9e6:	bf00      	nop

000009e8 <__aeabi_dcmpgt>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff ffc4 	bl	978 <__aeabi_cdrcmple>
     9f0:	bf34      	ite	cc
     9f2:	2001      	movcc	r0, #1
     9f4:	2000      	movcs	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_d2iz>:
     9fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d215      	bcs.n	a32 <__aeabi_d2iz+0x36>
     a06:	d511      	bpl.n	a2c <__aeabi_d2iz+0x30>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d912      	bls.n	a38 <__aeabi_d2iz+0x3c>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a22:	fa23 f002 	lsr.w	r0, r3, r2
     a26:	bf18      	it	ne
     a28:	4240      	negne	r0, r0
     a2a:	4770      	bx	lr
     a2c:	f04f 0000 	mov.w	r0, #0
     a30:	4770      	bx	lr
     a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a36:	d105      	bne.n	a44 <__aeabi_d2iz+0x48>
     a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a3c:	bf08      	it	eq
     a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a42:	4770      	bx	lr
     a44:	f04f 0000 	mov.w	r0, #0
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <__aeabi_d2uiz>:
     a4c:	004a      	lsls	r2, r1, #1
     a4e:	d211      	bcs.n	a74 <__aeabi_d2uiz+0x28>
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d211      	bcs.n	a7a <__aeabi_d2uiz+0x2e>
     a56:	d50d      	bpl.n	a74 <__aeabi_d2uiz+0x28>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d40e      	bmi.n	a80 <__aeabi_d2uiz+0x34>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	fa23 f002 	lsr.w	r0, r3, r2
     a72:	4770      	bx	lr
     a74:	f04f 0000 	mov.w	r0, #0
     a78:	4770      	bx	lr
     a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a7e:	d102      	bne.n	a86 <__aeabi_d2uiz+0x3a>
     a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a84:	4770      	bx	lr
     a86:	f04f 0000 	mov.w	r0, #0
     a8a:	4770      	bx	lr

00000a8c <__aeabi_uldivmod>:
     a8c:	b953      	cbnz	r3, aa4 <__aeabi_uldivmod+0x18>
     a8e:	b94a      	cbnz	r2, aa4 <__aeabi_uldivmod+0x18>
     a90:	2900      	cmp	r1, #0
     a92:	bf08      	it	eq
     a94:	2800      	cmpeq	r0, #0
     a96:	bf1c      	itt	ne
     a98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     aa0:	f000 b974 	b.w	d8c <__aeabi_idiv0>
     aa4:	f1ad 0c08 	sub.w	ip, sp, #8
     aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     aac:	f000 f806 	bl	abc <__udivmoddi4>
     ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
     ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ab8:	b004      	add	sp, #16
     aba:	4770      	bx	lr

00000abc <__udivmoddi4>:
     abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ac0:	9e08      	ldr	r6, [sp, #32]
     ac2:	4604      	mov	r4, r0
     ac4:	4688      	mov	r8, r1
     ac6:	2b00      	cmp	r3, #0
     ac8:	f040 8085 	bne.w	bd6 <__udivmoddi4+0x11a>
     acc:	428a      	cmp	r2, r1
     ace:	4615      	mov	r5, r2
     ad0:	d948      	bls.n	b64 <__udivmoddi4+0xa8>
     ad2:	fab2 f282 	clz	r2, r2
     ad6:	b14a      	cbz	r2, aec <__udivmoddi4+0x30>
     ad8:	f1c2 0720 	rsb	r7, r2, #32
     adc:	fa01 f302 	lsl.w	r3, r1, r2
     ae0:	fa20 f707 	lsr.w	r7, r0, r7
     ae4:	4095      	lsls	r5, r2
     ae6:	ea47 0803 	orr.w	r8, r7, r3
     aea:	4094      	lsls	r4, r2
     aec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     af0:	0c23      	lsrs	r3, r4, #16
     af2:	fbb8 f7fe 	udiv	r7, r8, lr
     af6:	fa1f fc85 	uxth.w	ip, r5
     afa:	fb0e 8817 	mls	r8, lr, r7, r8
     afe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     b02:	fb07 f10c 	mul.w	r1, r7, ip
     b06:	4299      	cmp	r1, r3
     b08:	d909      	bls.n	b1e <__udivmoddi4+0x62>
     b0a:	18eb      	adds	r3, r5, r3
     b0c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     b10:	f080 80e3 	bcs.w	cda <__udivmoddi4+0x21e>
     b14:	4299      	cmp	r1, r3
     b16:	f240 80e0 	bls.w	cda <__udivmoddi4+0x21e>
     b1a:	3f02      	subs	r7, #2
     b1c:	442b      	add	r3, r5
     b1e:	1a5b      	subs	r3, r3, r1
     b20:	b2a4      	uxth	r4, r4
     b22:	fbb3 f0fe 	udiv	r0, r3, lr
     b26:	fb0e 3310 	mls	r3, lr, r0, r3
     b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b2e:	fb00 fc0c 	mul.w	ip, r0, ip
     b32:	45a4      	cmp	ip, r4
     b34:	d909      	bls.n	b4a <__udivmoddi4+0x8e>
     b36:	192c      	adds	r4, r5, r4
     b38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b3c:	f080 80cb 	bcs.w	cd6 <__udivmoddi4+0x21a>
     b40:	45a4      	cmp	ip, r4
     b42:	f240 80c8 	bls.w	cd6 <__udivmoddi4+0x21a>
     b46:	3802      	subs	r0, #2
     b48:	442c      	add	r4, r5
     b4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     b4e:	eba4 040c 	sub.w	r4, r4, ip
     b52:	2700      	movs	r7, #0
     b54:	b11e      	cbz	r6, b5e <__udivmoddi4+0xa2>
     b56:	40d4      	lsrs	r4, r2
     b58:	2300      	movs	r3, #0
     b5a:	e9c6 4300 	strd	r4, r3, [r6]
     b5e:	4639      	mov	r1, r7
     b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b64:	2a00      	cmp	r2, #0
     b66:	d053      	beq.n	c10 <__udivmoddi4+0x154>
     b68:	fab2 f282 	clz	r2, r2
     b6c:	2a00      	cmp	r2, #0
     b6e:	f040 80b6 	bne.w	cde <__udivmoddi4+0x222>
     b72:	1b49      	subs	r1, r1, r5
     b74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b78:	fa1f f885 	uxth.w	r8, r5
     b7c:	2701      	movs	r7, #1
     b7e:	fbb1 fcfe 	udiv	ip, r1, lr
     b82:	0c23      	lsrs	r3, r4, #16
     b84:	fb0e 111c 	mls	r1, lr, ip, r1
     b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     b8c:	fb08 f10c 	mul.w	r1, r8, ip
     b90:	4299      	cmp	r1, r3
     b92:	d907      	bls.n	ba4 <__udivmoddi4+0xe8>
     b94:	18eb      	adds	r3, r5, r3
     b96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b9a:	d202      	bcs.n	ba2 <__udivmoddi4+0xe6>
     b9c:	4299      	cmp	r1, r3
     b9e:	f200 80ec 	bhi.w	d7a <__udivmoddi4+0x2be>
     ba2:	4684      	mov	ip, r0
     ba4:	1a59      	subs	r1, r3, r1
     ba6:	b2a3      	uxth	r3, r4
     ba8:	fbb1 f0fe 	udiv	r0, r1, lr
     bac:	fb0e 1410 	mls	r4, lr, r0, r1
     bb0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     bb4:	fb08 f800 	mul.w	r8, r8, r0
     bb8:	45a0      	cmp	r8, r4
     bba:	d907      	bls.n	bcc <__udivmoddi4+0x110>
     bbc:	192c      	adds	r4, r5, r4
     bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     bc2:	d202      	bcs.n	bca <__udivmoddi4+0x10e>
     bc4:	45a0      	cmp	r8, r4
     bc6:	f200 80dc 	bhi.w	d82 <__udivmoddi4+0x2c6>
     bca:	4618      	mov	r0, r3
     bcc:	eba4 0408 	sub.w	r4, r4, r8
     bd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     bd4:	e7be      	b.n	b54 <__udivmoddi4+0x98>
     bd6:	428b      	cmp	r3, r1
     bd8:	d908      	bls.n	bec <__udivmoddi4+0x130>
     bda:	2e00      	cmp	r6, #0
     bdc:	d078      	beq.n	cd0 <__udivmoddi4+0x214>
     bde:	2700      	movs	r7, #0
     be0:	e9c6 0100 	strd	r0, r1, [r6]
     be4:	4638      	mov	r0, r7
     be6:	4639      	mov	r1, r7
     be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bec:	fab3 f783 	clz	r7, r3
     bf0:	b97f      	cbnz	r7, c12 <__udivmoddi4+0x156>
     bf2:	428b      	cmp	r3, r1
     bf4:	d302      	bcc.n	bfc <__udivmoddi4+0x140>
     bf6:	4282      	cmp	r2, r0
     bf8:	f200 80bd 	bhi.w	d76 <__udivmoddi4+0x2ba>
     bfc:	1a84      	subs	r4, r0, r2
     bfe:	eb61 0303 	sbc.w	r3, r1, r3
     c02:	2001      	movs	r0, #1
     c04:	4698      	mov	r8, r3
     c06:	2e00      	cmp	r6, #0
     c08:	d0a9      	beq.n	b5e <__udivmoddi4+0xa2>
     c0a:	e9c6 4800 	strd	r4, r8, [r6]
     c0e:	e7a6      	b.n	b5e <__udivmoddi4+0xa2>
     c10:	deff      	udf	#255	; 0xff
     c12:	f1c7 0520 	rsb	r5, r7, #32
     c16:	40bb      	lsls	r3, r7
     c18:	fa22 fc05 	lsr.w	ip, r2, r5
     c1c:	ea4c 0c03 	orr.w	ip, ip, r3
     c20:	fa01 f407 	lsl.w	r4, r1, r7
     c24:	fa20 f805 	lsr.w	r8, r0, r5
     c28:	fa21 f305 	lsr.w	r3, r1, r5
     c2c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     c30:	ea48 0404 	orr.w	r4, r8, r4
     c34:	fbb3 f9fe 	udiv	r9, r3, lr
     c38:	0c21      	lsrs	r1, r4, #16
     c3a:	fb0e 3319 	mls	r3, lr, r9, r3
     c3e:	fa1f f88c 	uxth.w	r8, ip
     c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     c46:	fb09 fa08 	mul.w	sl, r9, r8
     c4a:	459a      	cmp	sl, r3
     c4c:	fa02 f207 	lsl.w	r2, r2, r7
     c50:	fa00 f107 	lsl.w	r1, r0, r7
     c54:	d90b      	bls.n	c6e <__udivmoddi4+0x1b2>
     c56:	eb1c 0303 	adds.w	r3, ip, r3
     c5a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     c5e:	f080 8088 	bcs.w	d72 <__udivmoddi4+0x2b6>
     c62:	459a      	cmp	sl, r3
     c64:	f240 8085 	bls.w	d72 <__udivmoddi4+0x2b6>
     c68:	f1a9 0902 	sub.w	r9, r9, #2
     c6c:	4463      	add	r3, ip
     c6e:	eba3 030a 	sub.w	r3, r3, sl
     c72:	b2a4      	uxth	r4, r4
     c74:	fbb3 f0fe 	udiv	r0, r3, lr
     c78:	fb0e 3310 	mls	r3, lr, r0, r3
     c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c80:	fb00 f808 	mul.w	r8, r0, r8
     c84:	45a0      	cmp	r8, r4
     c86:	d908      	bls.n	c9a <__udivmoddi4+0x1de>
     c88:	eb1c 0404 	adds.w	r4, ip, r4
     c8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     c90:	d26b      	bcs.n	d6a <__udivmoddi4+0x2ae>
     c92:	45a0      	cmp	r8, r4
     c94:	d969      	bls.n	d6a <__udivmoddi4+0x2ae>
     c96:	3802      	subs	r0, #2
     c98:	4464      	add	r4, ip
     c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     c9e:	eba4 0408 	sub.w	r4, r4, r8
     ca2:	fba0 8902 	umull	r8, r9, r0, r2
     ca6:	454c      	cmp	r4, r9
     ca8:	46c6      	mov	lr, r8
     caa:	464b      	mov	r3, r9
     cac:	d354      	bcc.n	d58 <__udivmoddi4+0x29c>
     cae:	d051      	beq.n	d54 <__udivmoddi4+0x298>
     cb0:	2e00      	cmp	r6, #0
     cb2:	d069      	beq.n	d88 <__udivmoddi4+0x2cc>
     cb4:	ebb1 020e 	subs.w	r2, r1, lr
     cb8:	eb64 0403 	sbc.w	r4, r4, r3
     cbc:	fa04 f505 	lsl.w	r5, r4, r5
     cc0:	fa22 f307 	lsr.w	r3, r2, r7
     cc4:	40fc      	lsrs	r4, r7
     cc6:	431d      	orrs	r5, r3
     cc8:	e9c6 5400 	strd	r5, r4, [r6]
     ccc:	2700      	movs	r7, #0
     cce:	e746      	b.n	b5e <__udivmoddi4+0xa2>
     cd0:	4637      	mov	r7, r6
     cd2:	4630      	mov	r0, r6
     cd4:	e743      	b.n	b5e <__udivmoddi4+0xa2>
     cd6:	4618      	mov	r0, r3
     cd8:	e737      	b.n	b4a <__udivmoddi4+0x8e>
     cda:	4607      	mov	r7, r0
     cdc:	e71f      	b.n	b1e <__udivmoddi4+0x62>
     cde:	f1c2 0320 	rsb	r3, r2, #32
     ce2:	fa20 f703 	lsr.w	r7, r0, r3
     ce6:	4095      	lsls	r5, r2
     ce8:	fa01 f002 	lsl.w	r0, r1, r2
     cec:	fa21 f303 	lsr.w	r3, r1, r3
     cf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     cf4:	4338      	orrs	r0, r7
     cf6:	0c01      	lsrs	r1, r0, #16
     cf8:	fbb3 f7fe 	udiv	r7, r3, lr
     cfc:	fa1f f885 	uxth.w	r8, r5
     d00:	fb0e 3317 	mls	r3, lr, r7, r3
     d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d08:	fb07 f308 	mul.w	r3, r7, r8
     d0c:	428b      	cmp	r3, r1
     d0e:	fa04 f402 	lsl.w	r4, r4, r2
     d12:	d907      	bls.n	d24 <__udivmoddi4+0x268>
     d14:	1869      	adds	r1, r5, r1
     d16:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     d1a:	d228      	bcs.n	d6e <__udivmoddi4+0x2b2>
     d1c:	428b      	cmp	r3, r1
     d1e:	d926      	bls.n	d6e <__udivmoddi4+0x2b2>
     d20:	3f02      	subs	r7, #2
     d22:	4429      	add	r1, r5
     d24:	1acb      	subs	r3, r1, r3
     d26:	b281      	uxth	r1, r0
     d28:	fbb3 f0fe 	udiv	r0, r3, lr
     d2c:	fb0e 3310 	mls	r3, lr, r0, r3
     d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d34:	fb00 f308 	mul.w	r3, r0, r8
     d38:	428b      	cmp	r3, r1
     d3a:	d907      	bls.n	d4c <__udivmoddi4+0x290>
     d3c:	1869      	adds	r1, r5, r1
     d3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     d42:	d210      	bcs.n	d66 <__udivmoddi4+0x2aa>
     d44:	428b      	cmp	r3, r1
     d46:	d90e      	bls.n	d66 <__udivmoddi4+0x2aa>
     d48:	3802      	subs	r0, #2
     d4a:	4429      	add	r1, r5
     d4c:	1ac9      	subs	r1, r1, r3
     d4e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     d52:	e714      	b.n	b7e <__udivmoddi4+0xc2>
     d54:	4541      	cmp	r1, r8
     d56:	d2ab      	bcs.n	cb0 <__udivmoddi4+0x1f4>
     d58:	ebb8 0e02 	subs.w	lr, r8, r2
     d5c:	eb69 020c 	sbc.w	r2, r9, ip
     d60:	3801      	subs	r0, #1
     d62:	4613      	mov	r3, r2
     d64:	e7a4      	b.n	cb0 <__udivmoddi4+0x1f4>
     d66:	4660      	mov	r0, ip
     d68:	e7f0      	b.n	d4c <__udivmoddi4+0x290>
     d6a:	4618      	mov	r0, r3
     d6c:	e795      	b.n	c9a <__udivmoddi4+0x1de>
     d6e:	4667      	mov	r7, ip
     d70:	e7d8      	b.n	d24 <__udivmoddi4+0x268>
     d72:	4681      	mov	r9, r0
     d74:	e77b      	b.n	c6e <__udivmoddi4+0x1b2>
     d76:	4638      	mov	r0, r7
     d78:	e745      	b.n	c06 <__udivmoddi4+0x14a>
     d7a:	f1ac 0c02 	sub.w	ip, ip, #2
     d7e:	442b      	add	r3, r5
     d80:	e710      	b.n	ba4 <__udivmoddi4+0xe8>
     d82:	3802      	subs	r0, #2
     d84:	442c      	add	r4, r5
     d86:	e721      	b.n	bcc <__udivmoddi4+0x110>
     d88:	4637      	mov	r7, r6
     d8a:	e6e8      	b.n	b5e <__udivmoddi4+0xa2>

00000d8c <__aeabi_idiv0>:
     d8c:	4770      	bx	lr
     d8e:	bf00      	nop

00000d90 <emu_vmon_thresh_get>:
}
static float emu_vmon_thresh_get(uint8_t ubThresh1V86, uint8_t ubThresh2V98, uint8_t ubCurrentThresh)
{
    // Convert from BCD
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
     d90:	230a      	movs	r3, #10
{
     d92:	b510      	push	{r4, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
     d94:	0904      	lsrs	r4, r0, #4
     d96:	f000 000f 	and.w	r0, r0, #15
     d9a:	fb13 0404 	smlabb	r4, r3, r4, r0
     d9e:	ee07 4a90 	vmov	s15, r4
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
     da2:	0908      	lsrs	r0, r1, #4
     da4:	f001 010f 	and.w	r1, r1, #15
     da8:	fb13 1100 	smlabb	r1, r3, r0, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
     dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
     db0:	ee07 1a90 	vmov	s15, r1
     db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Interpolate between the two calibration thresholds
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
     db8:	ed9f 6a0a 	vldr	s12, [pc, #40]	; de4 <emu_vmon_thresh_get+0x54>
    float fOffset = 1.86f - (fSlope * fThresh1V86);
     dbc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; de8 <emu_vmon_thresh_get+0x58>
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
     dc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
     dc4:	0911      	lsrs	r1, r2, #4
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
     dc6:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
     dca:	f002 020f 	and.w	r2, r2, #15
     dce:	fb13 2301 	smlabb	r3, r3, r1, r2
     dd2:	ee07 3a90 	vmov	s15, r3
    float fOffset = 1.86f - (fSlope * fThresh1V86);
     dd6:	eea7 0a66 	vfms.f32	s0, s14, s13
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
     dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Find the Code for the target voltage
    float fCurrentVoltage = (fCurrentThresh * fSlope) + fOffset;

    return fCurrentVoltage;
}
     dde:	eea7 0aa6 	vfma.f32	s0, s15, s13
     de2:	bd10      	pop	{r4, pc}
     de4:	3f8f5c29 	.word	0x3f8f5c29
     de8:	3fee147b 	.word	0x3fee147b

00000dec <emu_vmon_thresh_calc>:
{
     dec:	b507      	push	{r0, r1, r2, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
     dee:	230a      	movs	r3, #10
     df0:	0902      	lsrs	r2, r0, #4
     df2:	f000 000f 	and.w	r0, r0, #15
     df6:	fb13 0202 	smlabb	r2, r3, r2, r0
     dfa:	ee07 2a90 	vmov	s15, r2
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
     dfe:	090a      	lsrs	r2, r1, #4
     e00:	f001 010f 	and.w	r1, r1, #15
     e04:	fb13 1302 	smlabb	r3, r3, r2, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
     e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
     e0c:	ee07 3a90 	vmov	s15, r3
     e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
     e14:	ed9f 6a17 	vldr	s12, [pc, #92]	; e74 <emu_vmon_thresh_calc+0x88>
     e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
     e1c:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fOffset = 1.86f - (fSlope * fThresh1V86);
     e20:	eddf 7a15 	vldr	s15, [pc, #84]	; e78 <emu_vmon_thresh_calc+0x8c>
     e24:	eee7 7a66 	vfms.f32	s15, s14, s13
    float fTargetThresh = roundf((fTargetVoltage - fOffset) / fSlope);
     e28:	ee30 0a67 	vsub.f32	s0, s0, s15
     e2c:	ee80 0a26 	vdiv.f32	s0, s0, s13
     e30:	f003 f8e4 	bl	3ffc <roundf>
    uint8_t ubDecThresh = fTargetThresh / 10.f;
     e34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
     e38:	eec0 7a07 	vdiv.f32	s15, s0, s14
     e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     e40:	edcd 7a01 	vstr	s15, [sp, #4]
     e44:	f89d 3004 	ldrb.w	r3, [sp, #4]
    uint8_t ubUniThresh = fTargetThresh - (ubDecThresh * 10);
     e48:	eb03 0283 	add.w	r2, r3, r3, lsl #2
     e4c:	0052      	lsls	r2, r2, #1
     e4e:	ee07 2a90 	vmov	s15, r2
     e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     e56:	ee30 0a67 	vsub.f32	s0, s0, s15
     e5a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    uint8_t ubTargetThresh = ((ubDecThresh & 0xF) << 4) | (ubUniThresh & 0xF);
     e5e:	ee10 2a10 	vmov	r2, s0
     e62:	f002 000f 	and.w	r0, r2, #15
     e66:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
     e6a:	b2c0      	uxtb	r0, r0
     e6c:	b003      	add	sp, #12
     e6e:	f85d fb04 	ldr.w	pc, [sp], #4
     e72:	bf00      	nop
     e74:	3f8f5c29 	.word	0x3f8f5c29
     e78:	3fee147b 	.word	0x3fee147b

00000e7c <_emu_isr>:

void _emu_isr()
{
    uint32_t ulFlags = EMU->IFC;
     e7c:	4b15      	ldr	r3, [pc, #84]	; (ed4 <_emu_isr+0x58>)
     e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    if(ulFlags & EMU_IFC_VMONAVDDFALL)
     e80:	f013 0101 	ands.w	r1, r3, #1
     e84:	d015      	beq.n	eb2 <_emu_isr+0x36>
        g_ubAVDDLow = 1;
     e86:	4a14      	ldr	r2, [pc, #80]	; (ed8 <_emu_isr+0x5c>)
     e88:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
        g_ubAVDDLow = 0;
     e8a:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONALTAVDDFALL)
     e8c:	f013 0104 	ands.w	r1, r3, #4
     e90:	d013      	beq.n	eba <_emu_isr+0x3e>
        g_ubAltAVDDLow = 1;
     e92:	4a12      	ldr	r2, [pc, #72]	; (edc <_emu_isr+0x60>)
     e94:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
        g_ubAltAVDDLow = 0;
     e96:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONDVDDFALL)
     e98:	f013 0110 	ands.w	r1, r3, #16
     e9c:	d011      	beq.n	ec2 <_emu_isr+0x46>
        g_ubDVDDLow = 1;
     e9e:	4a10      	ldr	r2, [pc, #64]	; (ee0 <_emu_isr+0x64>)
     ea0:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
        g_ubDVDDLow = 0;
     ea2:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONIO0FALL)
     ea4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
     ea8:	d00f      	beq.n	eca <_emu_isr+0x4e>
        g_ubIOVDDLow = 1;
     eaa:	4b0e      	ldr	r3, [pc, #56]	; (ee4 <_emu_isr+0x68>)
     eac:	2201      	movs	r2, #1
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
        g_ubIOVDDLow = 0;
     eae:	701a      	strb	r2, [r3, #0]
}
     eb0:	4770      	bx	lr
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
     eb2:	079a      	lsls	r2, r3, #30
     eb4:	d5ea      	bpl.n	e8c <_emu_isr+0x10>
        g_ubAVDDLow = 0;
     eb6:	4a08      	ldr	r2, [pc, #32]	; (ed8 <_emu_isr+0x5c>)
     eb8:	e7e7      	b.n	e8a <_emu_isr+0xe>
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
     eba:	0718      	lsls	r0, r3, #28
     ebc:	d5ec      	bpl.n	e98 <_emu_isr+0x1c>
        g_ubAltAVDDLow = 0;
     ebe:	4a07      	ldr	r2, [pc, #28]	; (edc <_emu_isr+0x60>)
     ec0:	e7e9      	b.n	e96 <_emu_isr+0x1a>
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
     ec2:	069a      	lsls	r2, r3, #26
     ec4:	d5ee      	bpl.n	ea4 <_emu_isr+0x28>
        g_ubDVDDLow = 0;
     ec6:	4a06      	ldr	r2, [pc, #24]	; (ee0 <_emu_isr+0x64>)
     ec8:	e7eb      	b.n	ea2 <_emu_isr+0x26>
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
     eca:	061b      	lsls	r3, r3, #24
     ecc:	d5f0      	bpl.n	eb0 <_emu_isr+0x34>
        g_ubIOVDDLow = 0;
     ece:	4b05      	ldr	r3, [pc, #20]	; (ee4 <_emu_isr+0x68>)
     ed0:	e7ed      	b.n	eae <_emu_isr+0x32>
     ed2:	bf00      	nop
     ed4:	400e3000 	.word	0x400e3000
     ed8:	20000080 	.word	0x20000080
     edc:	20000081 	.word	0x20000081
     ee0:	20000082 	.word	0x20000082
     ee4:	20000083 	.word	0x20000083

00000ee8 <emu_init>:

void emu_init(uint8_t ubImmediateSwitch)
{
    EMU->PWRCTRL = (ubImmediateSwitch ? EMU_PWRCTRL_IMMEDIATEPWRSWITCH : 0) | EMU_PWRCTRL_REGPWRSEL_DVDD | EMU_PWRCTRL_ANASW_AVDD;
     ee8:	4b09      	ldr	r3, [pc, #36]	; (f10 <emu_init+0x28>)
     eea:	2800      	cmp	r0, #0
     eec:	bf14      	ite	ne
     eee:	f44f 5210 	movne.w	r2, #9216	; 0x2400
     ef2:	f44f 6280 	moveq.w	r2, #1024	; 0x400
     ef6:	63da      	str	r2, [r3, #60]	; 0x3c

    EMU->IFC = _EMU_IFC_MASK; // Clear pending IRQs
     ef8:	4a06      	ldr	r2, [pc, #24]	; (f14 <emu_init+0x2c>)
     efa:	62da      	str	r2, [r3, #44]	; 0x2c
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
     efc:	4b06      	ldr	r3, [pc, #24]	; (f18 <emu_init+0x30>)
     efe:	2201      	movs	r2, #1
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
     f00:	21e0      	movs	r1, #224	; 0xe0
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
     f02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
     f06:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    IRQ_ENABLE(EMU_IRQn); // Enable vector
     f0a:	601a      	str	r2, [r3, #0]
}
     f0c:	4770      	bx	lr
     f0e:	bf00      	nop
     f10:	400e3000 	.word	0x400e3000
     f14:	e3df37ff 	.word	0xe3df37ff
     f18:	e000e100 	.word	0xe000e100

00000f1c <emu_vmon_avdd_config>:

    return fEMUTemp;
}

void emu_vmon_avdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh, float fHighThresh, float *pfHighThresh)
{
     f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f20:	4689      	mov	r9, r1
     f22:	ed2d 8b02 	vpush	{d8}
     f26:	4690      	mov	r8, r2
     f28:	eeb0 8a60 	vmov.f32	s16, s1
    if(!ubEnable)
     f2c:	b970      	cbnz	r0, f4c <emu_vmon_avdd_config+0x30>
    {
        EMU->VMONAVDDCTRL &= ~EMU_VMONAVDDCTRL_EN;
     f2e:	4b23      	ldr	r3, [pc, #140]	; (fbc <emu_vmon_avdd_config+0xa0>)
     f30:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
     f34:	f022 0201 	bic.w	r2, r2, #1
     f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        EMU->IEN &= ~(EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL);
     f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     f3e:	f022 0203 	bic.w	r2, r2, #3
     f42:	631a      	str	r2, [r3, #48]	; 0x30
        *pfHighThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubHighThresh);

    EMU->IFC = EMU_IFC_VMONAVDDRISE | EMU_IFC_VMONAVDDFALL;
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
}
     f44:	ecbd 8b02 	vpop	{d8}
     f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
     f4c:	4b1c      	ldr	r3, [pc, #112]	; (fc0 <emu_vmon_avdd_config+0xa4>)
     f4e:	f8d3 5140 	ldr.w	r5, [r3, #320]	; 0x140
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
     f52:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
     f56:	b2ed      	uxtb	r5, r5
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
     f58:	f3c6 2607 	ubfx	r6, r6, #8, #8
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
     f5c:	4631      	mov	r1, r6
     f5e:	4628      	mov	r0, r5
     f60:	f7ff ff44 	bl	dec <emu_vmon_thresh_calc>
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
     f64:	eeb0 0a48 	vmov.f32	s0, s16
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
     f68:	4607      	mov	r7, r0
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
     f6a:	4631      	mov	r1, r6
     f6c:	4628      	mov	r0, r5
     f6e:	f7ff ff3d 	bl	dec <emu_vmon_thresh_calc>
     f72:	4604      	mov	r4, r0
    if(pfLowThresh)
     f74:	f1b9 0f00 	cmp.w	r9, #0
     f78:	d006      	beq.n	f88 <emu_vmon_avdd_config+0x6c>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
     f7a:	463a      	mov	r2, r7
     f7c:	4631      	mov	r1, r6
     f7e:	4628      	mov	r0, r5
     f80:	f7ff ff06 	bl	d90 <emu_vmon_thresh_get>
     f84:	ed89 0a00 	vstr	s0, [r9]
    if(pfHighThresh)
     f88:	f1b8 0f00 	cmp.w	r8, #0
     f8c:	d006      	beq.n	f9c <emu_vmon_avdd_config+0x80>
        *pfHighThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubHighThresh);
     f8e:	4622      	mov	r2, r4
     f90:	4631      	mov	r1, r6
     f92:	4628      	mov	r0, r5
     f94:	f7ff fefc 	bl	d90 <emu_vmon_thresh_get>
     f98:	ed88 0a00 	vstr	s0, [r8]
    EMU->IFC = EMU_IFC_VMONAVDDRISE | EMU_IFC_VMONAVDDFALL;
     f9c:	4b07      	ldr	r3, [pc, #28]	; (fbc <emu_vmon_avdd_config+0xa0>)
     f9e:	2203      	movs	r2, #3
     fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
     fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
     fa4:	0424      	lsls	r4, r4, #16
     fa6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
     faa:	f042 0203 	orr.w	r2, r2, #3
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
     fae:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
     fb2:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
     fb4:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
     fb8:	e7c4      	b.n	f44 <emu_vmon_avdd_config+0x28>
     fba:	bf00      	nop
     fbc:	400e3000 	.word	0x400e3000
     fc0:	0fe081b0 	.word	0x0fe081b0

00000fc4 <emu_vmon_dvdd_config>:
    EMU->IFC = EMU_IFC_VMONALTAVDDRISE | EMU_IFC_VMONALTAVDDFALL;
    EMU->IEN |= EMU_IEN_VMONALTAVDDRISE | EMU_IEN_VMONALTAVDDFALL;
    EMU->VMONALTAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONALTAVDDCTRL_THRESFINE_SHIFT) | EMU_VMONALTAVDDCTRL_EN;
}
void emu_vmon_dvdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
     fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fc6:	460f      	mov	r7, r1
    if(!ubEnable)
     fc8:	b958      	cbnz	r0, fe2 <emu_vmon_dvdd_config+0x1e>
    {
        EMU->VMONDVDDCTRL &= ~EMU_VMONDVDDCTRL_EN;
     fca:	4b17      	ldr	r3, [pc, #92]	; (1028 <emu_vmon_dvdd_config+0x64>)
     fcc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
     fd0:	f022 0201 	bic.w	r2, r2, #1
     fd4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        EMU->IEN &= ~(EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL);
     fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     fda:	f022 0230 	bic.w	r2, r2, #48	; 0x30
     fde:	631a      	str	r2, [r3, #48]	; 0x30
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);

    EMU->IFC = EMU_IFC_VMONDVDDRISE | EMU_IFC_VMONDVDDFALL;
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
}
     fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
     fe2:	4b12      	ldr	r3, [pc, #72]	; (102c <emu_vmon_dvdd_config+0x68>)
     fe4:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
     fe8:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
     fec:	b2ed      	uxtb	r5, r5
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
     fee:	f3c6 2607 	ubfx	r6, r6, #8, #8
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
     ff2:	4631      	mov	r1, r6
     ff4:	4628      	mov	r0, r5
     ff6:	f7ff fef9 	bl	dec <emu_vmon_thresh_calc>
     ffa:	4604      	mov	r4, r0
    if(pfLowThresh)
     ffc:	b137      	cbz	r7, 100c <emu_vmon_dvdd_config+0x48>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
     ffe:	4602      	mov	r2, r0
    1000:	4631      	mov	r1, r6
    1002:	4628      	mov	r0, r5
    1004:	f7ff fec4 	bl	d90 <emu_vmon_thresh_get>
    1008:	ed87 0a00 	vstr	s0, [r7]
    EMU->IFC = EMU_IFC_VMONDVDDRISE | EMU_IFC_VMONDVDDFALL;
    100c:	4b06      	ldr	r3, [pc, #24]	; (1028 <emu_vmon_dvdd_config+0x64>)
    100e:	2230      	movs	r2, #48	; 0x30
    1010:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    1012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    1014:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    1016:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    101a:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    101e:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    1020:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    1024:	e7dc      	b.n	fe0 <emu_vmon_dvdd_config+0x1c>
    1026:	bf00      	nop
    1028:	400e3000 	.word	0x400e3000
    102c:	0fe081b0 	.word	0x0fe081b0

00001030 <emu_vmon_iovdd_config>:
void emu_vmon_iovdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
    1030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1032:	460f      	mov	r7, r1
    if(!ubEnable)
    1034:	b958      	cbnz	r0, 104e <emu_vmon_iovdd_config+0x1e>
    {
        EMU->VMONIO0CTRL &= ~EMU_VMONIO0CTRL_EN;
    1036:	4b17      	ldr	r3, [pc, #92]	; (1094 <emu_vmon_iovdd_config+0x64>)
    1038:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    103c:	f022 0201 	bic.w	r2, r2, #1
    1040:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        EMU->IEN &= ~(EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL);
    1044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1046:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
    104a:	631a      	str	r2, [r3, #48]	; 0x30
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);

    EMU->IFC = EMU_IFC_VMONIO0RISE | EMU_IFC_VMONIO0FALL;
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    104c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
    104e:	4b12      	ldr	r3, [pc, #72]	; (1098 <emu_vmon_iovdd_config+0x68>)
    1050:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
    1054:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
    1058:	f3c5 4507 	ubfx	r5, r5, #16, #8
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
    105c:	0e36      	lsrs	r6, r6, #24
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    105e:	4631      	mov	r1, r6
    1060:	4628      	mov	r0, r5
    1062:	f7ff fec3 	bl	dec <emu_vmon_thresh_calc>
    1066:	4604      	mov	r4, r0
    if(pfLowThresh)
    1068:	b137      	cbz	r7, 1078 <emu_vmon_iovdd_config+0x48>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    106a:	4602      	mov	r2, r0
    106c:	4631      	mov	r1, r6
    106e:	4628      	mov	r0, r5
    1070:	f7ff fe8e 	bl	d90 <emu_vmon_thresh_get>
    1074:	ed87 0a00 	vstr	s0, [r7]
    EMU->IFC = EMU_IFC_VMONIO0RISE | EMU_IFC_VMONIO0FALL;
    1078:	4b06      	ldr	r3, [pc, #24]	; (1094 <emu_vmon_iovdd_config+0x64>)
    107a:	22c0      	movs	r2, #192	; 0xc0
    107c:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    107e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    1080:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    1082:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    1086:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    108a:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    108c:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    1090:	e7dc      	b.n	104c <emu_vmon_iovdd_config+0x1c>
    1092:	bf00      	nop
    1094:	400e3000 	.word	0x400e3000
    1098:	0fe081b0 	.word	0x0fe081b0

0000109c <crc_init>:

#else

void crc_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPCRC;
    109c:	4a07      	ldr	r2, [pc, #28]	; (10bc <crc_init+0x20>)
    109e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    10a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    10a6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    GPCRC->CTRL = GPCRC_CTRL_BYTEREVERSE | GPCRC_CTRL_BITREVERSE | GPCRC_CTRL_POLYSEL_CRC32 | GPCRC_CTRL_EN_ENABLE;
    10aa:	4b05      	ldr	r3, [pc, #20]	; (10c0 <crc_init+0x24>)
    10ac:	f240 6201 	movw	r2, #1537	; 0x601
    10b0:	601a      	str	r2, [r3, #0]
    GPCRC->INIT = 0xFFFFFFFF;
    10b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    10b6:	609a      	str	r2, [r3, #8]
}
    10b8:	4770      	bx	lr
    10ba:	bf00      	nop
    10bc:	400e4000 	.word	0x400e4000
    10c0:	4001c000 	.word	0x4001c000

000010c4 <_ldma_isr>:
#include "ldma.h"

static ldma_ch_isr_t ppfChannelISR[DMA_CHAN_COUNT];

void _ldma_isr()
{
    10c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ulFlags = LDMA->IFC;
    10c6:	4b0d      	ldr	r3, [pc, #52]	; (10fc <_ldma_isr+0x38>)
    10c8:	6e9d      	ldr	r5, [r3, #104]	; 0x68

    if(ulFlags & LDMA_IFC_ERROR)
    10ca:	2d00      	cmp	r5, #0
    10cc:	da05      	bge.n	10da <_ldma_isr+0x16>
    {
        uint8_t ubErrorChannel = (LDMA->STATUS & _LDMA_STATUS_CHERROR_MASK) << _LDMA_STATUS_CHERROR_SHIFT;
    10ce:	685b      	ldr	r3, [r3, #4]

        if(ppfChannelISR[ubErrorChannel])
    10d0:	4b0b      	ldr	r3, [pc, #44]	; (1100 <_ldma_isr+0x3c>)
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	b10b      	cbz	r3, 10da <_ldma_isr+0x16>
            ppfChannelISR[ubErrorChannel](1);
    10d6:	2001      	movs	r0, #1
    10d8:	4798      	blx	r3
    for(uint8_t ubChannel = 0; ubChannel < DMA_CHAN_COUNT; ubChannel++)
    {
        if(!(ulFlags & BIT(ubChannel)))
            continue;

        if(ppfChannelISR[ubChannel])
    10da:	4f09      	ldr	r7, [pc, #36]	; (1100 <_ldma_isr+0x3c>)
{
    10dc:	2400      	movs	r4, #0
        if(!(ulFlags & BIT(ubChannel)))
    10de:	2601      	movs	r6, #1
    10e0:	fa06 f304 	lsl.w	r3, r6, r4
    10e4:	422b      	tst	r3, r5
    10e6:	d004      	beq.n	10f2 <_ldma_isr+0x2e>
        if(ppfChannelISR[ubChannel])
    10e8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    10ec:	b10b      	cbz	r3, 10f2 <_ldma_isr+0x2e>
            ppfChannelISR[ubChannel](0);
    10ee:	2000      	movs	r0, #0
    10f0:	4798      	blx	r3
    10f2:	3401      	adds	r4, #1
    for(uint8_t ubChannel = 0; ubChannel < DMA_CHAN_COUNT; ubChannel++)
    10f4:	2c18      	cmp	r4, #24
    10f6:	d1f3      	bne.n	10e0 <_ldma_isr+0x1c>
    }
}
    10f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10fa:	bf00      	nop
    10fc:	40002000 	.word	0x40002000
    1100:	20000084 	.word	0x20000084

00001104 <dbg_init>:
    dbg_swo_putc(ch, 0);
}

void dbg_init()
{
    CMU->DBGCLKSEL = CMU_DBGCLKSEL_DBG_HFRCODIV2;
    1104:	4b02      	ldr	r3, [pc, #8]	; (1110 <dbg_init+0xc>)
    1106:	2202      	movs	r2, #2
    1108:	671a      	str	r2, [r3, #112]	; 0x70

    cmu_update_clocks();
    110a:	f001 bd03 	b.w	2b14 <cmu_update_clocks>
    110e:	bf00      	nop
    1110:	400e4000 	.word	0x400e4000

00001114 <dbg_swo_config>:
}
void dbg_swo_config(uint32_t ulChannelMask, uint32_t ulFrequency)
{
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    1114:	4a11      	ldr	r2, [pc, #68]	; (115c <dbg_swo_config+0x48>)
    1116:	68d3      	ldr	r3, [r2, #12]
    1118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    111c:	60d3      	str	r3, [r2, #12]
    TPI->SPPR = 2 << TPI_SPPR_TXMODE_Pos;
    111e:	4a10      	ldr	r2, [pc, #64]	; (1160 <dbg_swo_config+0x4c>)
    1120:	2302      	movs	r3, #2
    1122:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
    1126:	4b0f      	ldr	r3, [pc, #60]	; (1164 <dbg_swo_config+0x50>)
    1128:	681b      	ldr	r3, [r3, #0]
    112a:	fbb3 f1f1 	udiv	r1, r3, r1
    TPI->FFCR = 0x00000100;
    112e:	f44f 7380 	mov.w	r3, #256	; 0x100
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
    1132:	3901      	subs	r1, #1
    1134:	6111      	str	r1, [r2, #16]
    TPI->FFCR = 0x00000100;
    1136:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    DWT->CTRL = 0x400003FE;
    113a:	4b0b      	ldr	r3, [pc, #44]	; (1168 <dbg_swo_config+0x54>)
    113c:	4a0b      	ldr	r2, [pc, #44]	; (116c <dbg_swo_config+0x58>)
    113e:	601a      	str	r2, [r3, #0]
    ITM->LAR = 0xC5ACCE55;
    1140:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    1144:	4a0a      	ldr	r2, [pc, #40]	; (1170 <dbg_swo_config+0x5c>)
    1146:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) | ITM_TCR_ITMENA_Msk;
    114a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    114e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ITM->TPR = ulChannelMask;
    1152:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ITM->TER = ulChannelMask;
    1156:	f8c3 0e00 	str.w	r0, [r3, #3584]	; 0xe00
}
    115a:	4770      	bx	lr
    115c:	e000edf0 	.word	0xe000edf0
    1160:	e0040000 	.word	0xe0040000
    1164:	20000178 	.word	0x20000178
    1168:	e0001000 	.word	0xe0001000
    116c:	400003fe 	.word	0x400003fe
    1170:	c5acce55 	.word	0xc5acce55

00001174 <dbg_swo_send_uint8>:
{
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
}
void dbg_swo_send_uint8(uint8_t ubData, uint8_t ubChannel)
{
    if (!(ITM->TCR & ITM_TCR_ITMENA_Msk))
    1174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
{
    1178:	b510      	push	{r4, lr}
    if (!(ITM->TCR & ITM_TCR_ITMENA_Msk))
    117a:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
    117e:	07d2      	lsls	r2, r2, #31
    1180:	d50a      	bpl.n	1198 <dbg_swo_send_uint8+0x24>
        return;

    if (!(ITM->TER & (1 << ubChannel)))
    1182:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
    1186:	2201      	movs	r2, #1
    1188:	408a      	lsls	r2, r1
    118a:	4222      	tst	r2, r4
    118c:	d004      	beq.n	1198 <dbg_swo_send_uint8+0x24>
        return;

    while(!ITM->PORT[0].u8);
    118e:	781a      	ldrb	r2, [r3, #0]
    1190:	2a00      	cmp	r2, #0
    1192:	d0fc      	beq.n	118e <dbg_swo_send_uint8+0x1a>

    ITM->PORT[ubChannel].u8 = ubData;
    1194:	f803 0021 	strb.w	r0, [r3, r1, lsl #2]
}
    1198:	bd10      	pop	{r4, pc}

0000119a <_putchar>:
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
    119a:	2100      	movs	r1, #0
    119c:	f7ff bfea 	b.w	1174 <dbg_swo_send_uint8>

000011a0 <crypto_init>:
#include "crypto.h"

void crypto_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_CRYPTO0;
    11a0:	4a03      	ldr	r2, [pc, #12]	; (11b0 <crypto_init+0x10>)
    11a2:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    11a6:	f043 0302 	orr.w	r3, r3, #2
    11aa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
    11ae:	4770      	bx	lr
    11b0:	400e4000 	.word	0x400e4000

000011b4 <_hardfault_isr>:

void trace_stack(uint32_t *pulFaultStackAddress);

void __attribute__ ((naked)) _hardfault_isr()
{
    __asm__ volatile
    11b4:	f01e 0f04 	tst.w	lr, #4
    11b8:	bf0c      	ite	eq
    11ba:	f3ef 8008 	mrseq	r0, MSP
    11be:	f3ef 8009 	mrsne	r0, PSP
    11c2:	6981      	ldr	r1, [r0, #24]
    11c4:	4a00      	ldr	r2, [pc, #0]	; (11c8 <hardfault_trace_stack_addr>)
    11c6:	4710      	bx	r2

000011c8 <hardfault_trace_stack_addr>:
    11c8:	00001215 	.word	0x00001215

000011cc <_memmanage_isr>:
    );
}

void __attribute__ ((naked)) _memmanage_isr()
{
    __asm__ volatile
    11cc:	f01e 0f04 	tst.w	lr, #4
    11d0:	bf0c      	ite	eq
    11d2:	f3ef 8008 	mrseq	r0, MSP
    11d6:	f3ef 8009 	mrsne	r0, PSP
    11da:	6981      	ldr	r1, [r0, #24]
    11dc:	4a00      	ldr	r2, [pc, #0]	; (11e0 <memmanage_trace_stack_addr>)
    11de:	4710      	bx	r2

000011e0 <memmanage_trace_stack_addr>:
    11e0:	000012f9 	.word	0x000012f9

000011e4 <_busfault_isr>:
    );
}

void __attribute__ ((naked)) _busfault_isr()
{
    __asm__ volatile
    11e4:	f01e 0f04 	tst.w	lr, #4
    11e8:	bf0c      	ite	eq
    11ea:	f3ef 8008 	mrseq	r0, MSP
    11ee:	f3ef 8009 	mrsne	r0, PSP
    11f2:	6981      	ldr	r1, [r0, #24]
    11f4:	4a00      	ldr	r2, [pc, #0]	; (11f8 <busfault_trace_stack_addr>)
    11f6:	4710      	bx	r2

000011f8 <busfault_trace_stack_addr>:
    11f8:	000013ed 	.word	0x000013ed

000011fc <_usagefault_isr>:
    );
}

void __attribute__ ((naked)) _usagefault_isr()
{
    __asm__ volatile
    11fc:	f01e 0f04 	tst.w	lr, #4
    1200:	bf0c      	ite	eq
    1202:	f3ef 8008 	mrseq	r0, MSP
    1206:	f3ef 8009 	mrsne	r0, PSP
    120a:	6981      	ldr	r1, [r0, #24]
    120c:	4a00      	ldr	r2, [pc, #0]	; (1210 <usagefault_trace_stack_addr>)
    120e:	4710      	bx	r2

00001210 <usagefault_trace_stack_addr>:
    1210:	000014ed 	.word	0x000014ed

00001214 <hardfault_trace_stack>:
        " usagefault_trace_stack_addr: .word usagefault_trace_stack \n"
    );
}

void hardfault_trace_stack(uint32_t *pulFaultStackAddress)
{
    1214:	b500      	push	{lr}
    1216:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1218:	6803      	ldr	r3, [r0, #0]
    121a:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    121c:	6843      	ldr	r3, [r0, #4]
    121e:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1220:	6883      	ldr	r3, [r0, #8]
    1222:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1224:	68c3      	ldr	r3, [r0, #12]
    1226:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1228:	6903      	ldr	r3, [r0, #16]
    122a:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    122c:	6943      	ldr	r3, [r0, #20]
    122e:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1230:	6983      	ldr	r3, [r0, #24]
    1232:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    1234:	4921      	ldr	r1, [pc, #132]	; (12bc <hardfault_trace_stack+0xa8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1236:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    1238:	4821      	ldr	r0, [pc, #132]	; (12c0 <hardfault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    123a:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    123c:	f002 feb6 	bl	3fac <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1240:	9a00      	ldr	r2, [sp, #0]
    1242:	491e      	ldr	r1, [pc, #120]	; (12bc <hardfault_trace_stack+0xa8>)
    1244:	481f      	ldr	r0, [pc, #124]	; (12c4 <hardfault_trace_stack+0xb0>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
    1246:	4c20      	ldr	r4, [pc, #128]	; (12c8 <hardfault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1248:	f002 feb0 	bl	3fac <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    124c:	9a01      	ldr	r2, [sp, #4]
    124e:	491b      	ldr	r1, [pc, #108]	; (12bc <hardfault_trace_stack+0xa8>)
    1250:	481e      	ldr	r0, [pc, #120]	; (12cc <hardfault_trace_stack+0xb8>)
    1252:	f002 feab 	bl	3fac <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    1256:	9a02      	ldr	r2, [sp, #8]
    1258:	4918      	ldr	r1, [pc, #96]	; (12bc <hardfault_trace_stack+0xa8>)
    125a:	481d      	ldr	r0, [pc, #116]	; (12d0 <hardfault_trace_stack+0xbc>)
    125c:	f002 fea6 	bl	3fac <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    1260:	9a03      	ldr	r2, [sp, #12]
    1262:	4916      	ldr	r1, [pc, #88]	; (12bc <hardfault_trace_stack+0xa8>)
    1264:	481b      	ldr	r0, [pc, #108]	; (12d4 <hardfault_trace_stack+0xc0>)
    1266:	f002 fea1 	bl	3fac <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    126a:	9a04      	ldr	r2, [sp, #16]
    126c:	4913      	ldr	r1, [pc, #76]	; (12bc <hardfault_trace_stack+0xa8>)
    126e:	481a      	ldr	r0, [pc, #104]	; (12d8 <hardfault_trace_stack+0xc4>)
    1270:	f002 fe9c 	bl	3fac <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    1274:	9a05      	ldr	r2, [sp, #20]
    1276:	4911      	ldr	r1, [pc, #68]	; (12bc <hardfault_trace_stack+0xa8>)
    1278:	4818      	ldr	r0, [pc, #96]	; (12dc <hardfault_trace_stack+0xc8>)
    127a:	f002 fe97 	bl	3fac <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    127e:	9a06      	ldr	r2, [sp, #24]
    1280:	490e      	ldr	r1, [pc, #56]	; (12bc <hardfault_trace_stack+0xa8>)
    1282:	4817      	ldr	r0, [pc, #92]	; (12e0 <hardfault_trace_stack+0xcc>)
    1284:	f002 fe92 	bl	3fac <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    1288:	9a07      	ldr	r2, [sp, #28]
    128a:	490c      	ldr	r1, [pc, #48]	; (12bc <hardfault_trace_stack+0xa8>)
    128c:	4815      	ldr	r0, [pc, #84]	; (12e4 <hardfault_trace_stack+0xd0>)
    128e:	f002 fe8d 	bl	3fac <printf>
    DBGPRINTLN_CTX("------------------------------");
    1292:	490a      	ldr	r1, [pc, #40]	; (12bc <hardfault_trace_stack+0xa8>)
    1294:	4814      	ldr	r0, [pc, #80]	; (12e8 <hardfault_trace_stack+0xd4>)
    1296:	f002 fe89 	bl	3fac <printf>
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
    129a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    129c:	4907      	ldr	r1, [pc, #28]	; (12bc <hardfault_trace_stack+0xa8>)
    129e:	4813      	ldr	r0, [pc, #76]	; (12ec <hardfault_trace_stack+0xd8>)
    12a0:	f002 fe84 	bl	3fac <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    12a4:	6862      	ldr	r2, [r4, #4]
    12a6:	4905      	ldr	r1, [pc, #20]	; (12bc <hardfault_trace_stack+0xa8>)
    12a8:	4811      	ldr	r0, [pc, #68]	; (12f0 <hardfault_trace_stack+0xdc>)
    12aa:	f002 fe7f 	bl	3fac <printf>
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    12ae:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    12b2:	4902      	ldr	r1, [pc, #8]	; (12bc <hardfault_trace_stack+0xa8>)
    12b4:	480f      	ldr	r0, [pc, #60]	; (12f4 <hardfault_trace_stack+0xe0>)
    12b6:	f002 fe79 	bl	3fac <printf>

    while(1);
    12ba:	e7fe      	b.n	12ba <hardfault_trace_stack+0xa6>
    12bc:	00004224 	.word	0x00004224
    12c0:	000042cb 	.word	0x000042cb
    12c4:	000042ed 	.word	0x000042ed
    12c8:	e000ed00 	.word	0xe000ed00
    12cc:	00004302 	.word	0x00004302
    12d0:	00004317 	.word	0x00004317
    12d4:	0000432c 	.word	0x0000432c
    12d8:	00004341 	.word	0x00004341
    12dc:	00004357 	.word	0x00004357
    12e0:	0000437e 	.word	0x0000437e
    12e4:	000043a9 	.word	0x000043a9
    12e8:	000043d7 	.word	0x000043d7
    12ec:	000043ff 	.word	0x000043ff
    12f0:	00004416 	.word	0x00004416
    12f4:	0000442d 	.word	0x0000442d

000012f8 <memmanage_trace_stack>:
}

void memmanage_trace_stack(uint32_t *pulFaultStackAddress)
{
    12f8:	b500      	push	{lr}
    12fa:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    12fc:	6803      	ldr	r3, [r0, #0]
    12fe:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1300:	6843      	ldr	r3, [r0, #4]
    1302:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1304:	6883      	ldr	r3, [r0, #8]
    1306:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1308:	68c3      	ldr	r3, [r0, #12]
    130a:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    130c:	6903      	ldr	r3, [r0, #16]
    130e:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1310:	6943      	ldr	r3, [r0, #20]
    1312:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1314:	6983      	ldr	r3, [r0, #24]
    1316:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    1318:	4924      	ldr	r1, [pc, #144]	; (13ac <memmanage_trace_stack+0xb4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    131a:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    131c:	4824      	ldr	r0, [pc, #144]	; (13b0 <memmanage_trace_stack+0xb8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    131e:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    1320:	f002 fe44 	bl	3fac <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1324:	9a00      	ldr	r2, [sp, #0]
    1326:	4921      	ldr	r1, [pc, #132]	; (13ac <memmanage_trace_stack+0xb4>)
    1328:	4822      	ldr	r0, [pc, #136]	; (13b4 <memmanage_trace_stack+0xbc>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    132a:	4c23      	ldr	r4, [pc, #140]	; (13b8 <memmanage_trace_stack+0xc0>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    132c:	f002 fe3e 	bl	3fac <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1330:	9a01      	ldr	r2, [sp, #4]
    1332:	491e      	ldr	r1, [pc, #120]	; (13ac <memmanage_trace_stack+0xb4>)
    1334:	4821      	ldr	r0, [pc, #132]	; (13bc <memmanage_trace_stack+0xc4>)
    1336:	f002 fe39 	bl	3fac <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    133a:	9a02      	ldr	r2, [sp, #8]
    133c:	491b      	ldr	r1, [pc, #108]	; (13ac <memmanage_trace_stack+0xb4>)
    133e:	4820      	ldr	r0, [pc, #128]	; (13c0 <memmanage_trace_stack+0xc8>)
    1340:	f002 fe34 	bl	3fac <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    1344:	9a03      	ldr	r2, [sp, #12]
    1346:	4919      	ldr	r1, [pc, #100]	; (13ac <memmanage_trace_stack+0xb4>)
    1348:	481e      	ldr	r0, [pc, #120]	; (13c4 <memmanage_trace_stack+0xcc>)
    134a:	f002 fe2f 	bl	3fac <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    134e:	9a04      	ldr	r2, [sp, #16]
    1350:	4916      	ldr	r1, [pc, #88]	; (13ac <memmanage_trace_stack+0xb4>)
    1352:	481d      	ldr	r0, [pc, #116]	; (13c8 <memmanage_trace_stack+0xd0>)
    1354:	f002 fe2a 	bl	3fac <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    1358:	9a05      	ldr	r2, [sp, #20]
    135a:	4914      	ldr	r1, [pc, #80]	; (13ac <memmanage_trace_stack+0xb4>)
    135c:	481b      	ldr	r0, [pc, #108]	; (13cc <memmanage_trace_stack+0xd4>)
    135e:	f002 fe25 	bl	3fac <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    1362:	9a06      	ldr	r2, [sp, #24]
    1364:	4911      	ldr	r1, [pc, #68]	; (13ac <memmanage_trace_stack+0xb4>)
    1366:	481a      	ldr	r0, [pc, #104]	; (13d0 <memmanage_trace_stack+0xd8>)
    1368:	f002 fe20 	bl	3fac <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    136c:	9a07      	ldr	r2, [sp, #28]
    136e:	490f      	ldr	r1, [pc, #60]	; (13ac <memmanage_trace_stack+0xb4>)
    1370:	4818      	ldr	r0, [pc, #96]	; (13d4 <memmanage_trace_stack+0xdc>)
    1372:	f002 fe1b 	bl	3fac <printf>
    DBGPRINTLN_CTX("------------------------------");
    1376:	490d      	ldr	r1, [pc, #52]	; (13ac <memmanage_trace_stack+0xb4>)
    1378:	4817      	ldr	r0, [pc, #92]	; (13d8 <memmanage_trace_stack+0xe0>)
    137a:	f002 fe17 	bl	3fac <printf>
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    137e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1380:	490a      	ldr	r1, [pc, #40]	; (13ac <memmanage_trace_stack+0xb4>)
    1382:	4816      	ldr	r0, [pc, #88]	; (13dc <memmanage_trace_stack+0xe4>)
    1384:	b2d2      	uxtb	r2, r2
    1386:	f002 fe11 	bl	3fac <printf>
    DBGPRINTLN_CTX("MMFAR [0x%08X]", SCB->MMFAR);
    138a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    138c:	4907      	ldr	r1, [pc, #28]	; (13ac <memmanage_trace_stack+0xb4>)
    138e:	4814      	ldr	r0, [pc, #80]	; (13e0 <memmanage_trace_stack+0xe8>)
    1390:	f002 fe0c 	bl	3fac <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1394:	6862      	ldr	r2, [r4, #4]
    1396:	4905      	ldr	r1, [pc, #20]	; (13ac <memmanage_trace_stack+0xb4>)
    1398:	4812      	ldr	r0, [pc, #72]	; (13e4 <memmanage_trace_stack+0xec>)
    139a:	f002 fe07 	bl	3fac <printf>
    139e:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    13a2:	4902      	ldr	r1, [pc, #8]	; (13ac <memmanage_trace_stack+0xb4>)
    13a4:	4810      	ldr	r0, [pc, #64]	; (13e8 <memmanage_trace_stack+0xf0>)
    13a6:	f002 fe01 	bl	3fac <printf>

    while(1);
    13aa:	e7fe      	b.n	13aa <memmanage_trace_stack+0xb2>
    13ac:	0000423a 	.word	0x0000423a
    13b0:	00004443 	.word	0x00004443
    13b4:	000042ed 	.word	0x000042ed
    13b8:	e000ed00 	.word	0xe000ed00
    13bc:	00004302 	.word	0x00004302
    13c0:	00004317 	.word	0x00004317
    13c4:	0000432c 	.word	0x0000432c
    13c8:	00004341 	.word	0x00004341
    13cc:	00004357 	.word	0x00004357
    13d0:	0000437e 	.word	0x0000437e
    13d4:	000043a9 	.word	0x000043a9
    13d8:	000043d7 	.word	0x000043d7
    13dc:	00004472 	.word	0x00004472
    13e0:	0000448a 	.word	0x0000448a
    13e4:	00004416 	.word	0x00004416
    13e8:	0000442d 	.word	0x0000442d

000013ec <busfault_trace_stack>:
}

void busfault_trace_stack(uint32_t *pulFaultStackAddress)
{
    13ec:	b500      	push	{lr}
    13ee:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    13f0:	6803      	ldr	r3, [r0, #0]
    13f2:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    13f4:	6843      	ldr	r3, [r0, #4]
    13f6:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    13f8:	6883      	ldr	r3, [r0, #8]
    13fa:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    13fc:	68c3      	ldr	r3, [r0, #12]
    13fe:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1400:	6903      	ldr	r3, [r0, #16]
    1402:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1404:	6943      	ldr	r3, [r0, #20]
    1406:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1408:	6983      	ldr	r3, [r0, #24]
    140a:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    140c:	4927      	ldr	r1, [pc, #156]	; (14ac <busfault_trace_stack+0xc0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    140e:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1410:	4827      	ldr	r0, [pc, #156]	; (14b0 <busfault_trace_stack+0xc4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1412:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1414:	f002 fdca 	bl	3fac <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1418:	9a00      	ldr	r2, [sp, #0]
    141a:	4924      	ldr	r1, [pc, #144]	; (14ac <busfault_trace_stack+0xc0>)
    141c:	4825      	ldr	r0, [pc, #148]	; (14b4 <busfault_trace_stack+0xc8>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    141e:	4c26      	ldr	r4, [pc, #152]	; (14b8 <busfault_trace_stack+0xcc>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1420:	f002 fdc4 	bl	3fac <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1424:	9a01      	ldr	r2, [sp, #4]
    1426:	4921      	ldr	r1, [pc, #132]	; (14ac <busfault_trace_stack+0xc0>)
    1428:	4824      	ldr	r0, [pc, #144]	; (14bc <busfault_trace_stack+0xd0>)
    142a:	f002 fdbf 	bl	3fac <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    142e:	9a02      	ldr	r2, [sp, #8]
    1430:	491e      	ldr	r1, [pc, #120]	; (14ac <busfault_trace_stack+0xc0>)
    1432:	4823      	ldr	r0, [pc, #140]	; (14c0 <busfault_trace_stack+0xd4>)
    1434:	f002 fdba 	bl	3fac <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    1438:	9a03      	ldr	r2, [sp, #12]
    143a:	491c      	ldr	r1, [pc, #112]	; (14ac <busfault_trace_stack+0xc0>)
    143c:	4821      	ldr	r0, [pc, #132]	; (14c4 <busfault_trace_stack+0xd8>)
    143e:	f002 fdb5 	bl	3fac <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    1442:	9a04      	ldr	r2, [sp, #16]
    1444:	4919      	ldr	r1, [pc, #100]	; (14ac <busfault_trace_stack+0xc0>)
    1446:	4820      	ldr	r0, [pc, #128]	; (14c8 <busfault_trace_stack+0xdc>)
    1448:	f002 fdb0 	bl	3fac <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    144c:	9a05      	ldr	r2, [sp, #20]
    144e:	4917      	ldr	r1, [pc, #92]	; (14ac <busfault_trace_stack+0xc0>)
    1450:	481e      	ldr	r0, [pc, #120]	; (14cc <busfault_trace_stack+0xe0>)
    1452:	f002 fdab 	bl	3fac <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    1456:	9a06      	ldr	r2, [sp, #24]
    1458:	4914      	ldr	r1, [pc, #80]	; (14ac <busfault_trace_stack+0xc0>)
    145a:	481d      	ldr	r0, [pc, #116]	; (14d0 <busfault_trace_stack+0xe4>)
    145c:	f002 fda6 	bl	3fac <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    1460:	9a07      	ldr	r2, [sp, #28]
    1462:	4912      	ldr	r1, [pc, #72]	; (14ac <busfault_trace_stack+0xc0>)
    1464:	481b      	ldr	r0, [pc, #108]	; (14d4 <busfault_trace_stack+0xe8>)
    1466:	f002 fda1 	bl	3fac <printf>
    DBGPRINTLN_CTX("------------------------------");
    146a:	4910      	ldr	r1, [pc, #64]	; (14ac <busfault_trace_stack+0xc0>)
    146c:	481a      	ldr	r0, [pc, #104]	; (14d8 <busfault_trace_stack+0xec>)
    146e:	f002 fd9d 	bl	3fac <printf>
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    1472:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1474:	490d      	ldr	r1, [pc, #52]	; (14ac <busfault_trace_stack+0xc0>)
    1476:	4819      	ldr	r0, [pc, #100]	; (14dc <busfault_trace_stack+0xf0>)
    1478:	f3c2 2207 	ubfx	r2, r2, #8, #8
    147c:	f002 fd96 	bl	3fac <printf>
    DBGPRINTLN_CTX("BFAR [0x%08X]", SCB->BFAR);
    1480:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1482:	490a      	ldr	r1, [pc, #40]	; (14ac <busfault_trace_stack+0xc0>)
    1484:	4816      	ldr	r0, [pc, #88]	; (14e0 <busfault_trace_stack+0xf4>)
    1486:	f002 fd91 	bl	3fac <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    148a:	6862      	ldr	r2, [r4, #4]
    148c:	4907      	ldr	r1, [pc, #28]	; (14ac <busfault_trace_stack+0xc0>)
    148e:	4815      	ldr	r0, [pc, #84]	; (14e4 <busfault_trace_stack+0xf8>)
    1490:	f002 fd8c 	bl	3fac <printf>
    1494:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1498:	4904      	ldr	r1, [pc, #16]	; (14ac <busfault_trace_stack+0xc0>)
    149a:	4813      	ldr	r0, [pc, #76]	; (14e8 <busfault_trace_stack+0xfc>)
    149c:	f002 fd86 	bl	3fac <printf>

    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
    14a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14a4:	2201      	movs	r2, #1
    14a6:	645a      	str	r2, [r3, #68]	; 0x44

    while(1);
    14a8:	e7fe      	b.n	14a8 <busfault_trace_stack+0xbc>
    14aa:	bf00      	nop
    14ac:	00004250 	.word	0x00004250
    14b0:	0000427c 	.word	0x0000427c
    14b4:	000042ed 	.word	0x000042ed
    14b8:	e000ed00 	.word	0xe000ed00
    14bc:	00004302 	.word	0x00004302
    14c0:	00004317 	.word	0x00004317
    14c4:	0000432c 	.word	0x0000432c
    14c8:	00004341 	.word	0x00004341
    14cc:	00004357 	.word	0x00004357
    14d0:	0000437e 	.word	0x0000437e
    14d4:	000043a9 	.word	0x000043a9
    14d8:	000043d7 	.word	0x000043d7
    14dc:	0000429d 	.word	0x0000429d
    14e0:	000042b4 	.word	0x000042b4
    14e4:	00004416 	.word	0x00004416
    14e8:	0000442d 	.word	0x0000442d

000014ec <usagefault_trace_stack>:
}

void usagefault_trace_stack(uint32_t *pulFaultStackAddress)
{
    14ec:	b500      	push	{lr}
    14ee:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    14f0:	6803      	ldr	r3, [r0, #0]
    14f2:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    14f4:	6843      	ldr	r3, [r0, #4]
    14f6:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    14f8:	6883      	ldr	r3, [r0, #8]
    14fa:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    14fc:	68c3      	ldr	r3, [r0, #12]
    14fe:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1500:	6903      	ldr	r3, [r0, #16]
    1502:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1504:	6943      	ldr	r3, [r0, #20]
    1506:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1508:	6983      	ldr	r3, [r0, #24]
    150a:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    150c:	4922      	ldr	r1, [pc, #136]	; (1598 <usagefault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    150e:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1510:	4822      	ldr	r0, [pc, #136]	; (159c <usagefault_trace_stack+0xb0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1512:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1514:	f002 fd4a 	bl	3fac <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1518:	9a00      	ldr	r2, [sp, #0]
    151a:	491f      	ldr	r1, [pc, #124]	; (1598 <usagefault_trace_stack+0xac>)
    151c:	4820      	ldr	r0, [pc, #128]	; (15a0 <usagefault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    151e:	4c21      	ldr	r4, [pc, #132]	; (15a4 <usagefault_trace_stack+0xb8>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1520:	f002 fd44 	bl	3fac <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1524:	9a01      	ldr	r2, [sp, #4]
    1526:	491c      	ldr	r1, [pc, #112]	; (1598 <usagefault_trace_stack+0xac>)
    1528:	481f      	ldr	r0, [pc, #124]	; (15a8 <usagefault_trace_stack+0xbc>)
    152a:	f002 fd3f 	bl	3fac <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    152e:	9a02      	ldr	r2, [sp, #8]
    1530:	4919      	ldr	r1, [pc, #100]	; (1598 <usagefault_trace_stack+0xac>)
    1532:	481e      	ldr	r0, [pc, #120]	; (15ac <usagefault_trace_stack+0xc0>)
    1534:	f002 fd3a 	bl	3fac <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    1538:	9a03      	ldr	r2, [sp, #12]
    153a:	4917      	ldr	r1, [pc, #92]	; (1598 <usagefault_trace_stack+0xac>)
    153c:	481c      	ldr	r0, [pc, #112]	; (15b0 <usagefault_trace_stack+0xc4>)
    153e:	f002 fd35 	bl	3fac <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    1542:	9a04      	ldr	r2, [sp, #16]
    1544:	4914      	ldr	r1, [pc, #80]	; (1598 <usagefault_trace_stack+0xac>)
    1546:	481b      	ldr	r0, [pc, #108]	; (15b4 <usagefault_trace_stack+0xc8>)
    1548:	f002 fd30 	bl	3fac <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    154c:	9a05      	ldr	r2, [sp, #20]
    154e:	4912      	ldr	r1, [pc, #72]	; (1598 <usagefault_trace_stack+0xac>)
    1550:	4819      	ldr	r0, [pc, #100]	; (15b8 <usagefault_trace_stack+0xcc>)
    1552:	f002 fd2b 	bl	3fac <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    1556:	9a06      	ldr	r2, [sp, #24]
    1558:	490f      	ldr	r1, [pc, #60]	; (1598 <usagefault_trace_stack+0xac>)
    155a:	4818      	ldr	r0, [pc, #96]	; (15bc <usagefault_trace_stack+0xd0>)
    155c:	f002 fd26 	bl	3fac <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    1560:	9a07      	ldr	r2, [sp, #28]
    1562:	490d      	ldr	r1, [pc, #52]	; (1598 <usagefault_trace_stack+0xac>)
    1564:	4816      	ldr	r0, [pc, #88]	; (15c0 <usagefault_trace_stack+0xd4>)
    1566:	f002 fd21 	bl	3fac <printf>
    DBGPRINTLN_CTX("------------------------------");
    156a:	490b      	ldr	r1, [pc, #44]	; (1598 <usagefault_trace_stack+0xac>)
    156c:	4815      	ldr	r0, [pc, #84]	; (15c4 <usagefault_trace_stack+0xd8>)
    156e:	f002 fd1d 	bl	3fac <printf>
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    1572:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1574:	4908      	ldr	r1, [pc, #32]	; (1598 <usagefault_trace_stack+0xac>)
    1576:	4814      	ldr	r0, [pc, #80]	; (15c8 <usagefault_trace_stack+0xdc>)
    1578:	f3c2 32cf 	ubfx	r2, r2, #15, #16
    157c:	f002 fd16 	bl	3fac <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1580:	6862      	ldr	r2, [r4, #4]
    1582:	4905      	ldr	r1, [pc, #20]	; (1598 <usagefault_trace_stack+0xac>)
    1584:	4811      	ldr	r0, [pc, #68]	; (15cc <usagefault_trace_stack+0xe0>)
    1586:	f002 fd11 	bl	3fac <printf>
    158a:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    158e:	4902      	ldr	r1, [pc, #8]	; (1598 <usagefault_trace_stack+0xac>)
    1590:	480f      	ldr	r0, [pc, #60]	; (15d0 <usagefault_trace_stack+0xe4>)
    1592:	f002 fd0b 	bl	3fac <printf>

    while(1);
    1596:	e7fe      	b.n	1596 <usagefault_trace_stack+0xaa>
    1598:	00004265 	.word	0x00004265
    159c:	000044a2 	.word	0x000044a2
    15a0:	000042ed 	.word	0x000042ed
    15a4:	e000ed00 	.word	0xe000ed00
    15a8:	00004302 	.word	0x00004302
    15ac:	00004317 	.word	0x00004317
    15b0:	0000432c 	.word	0x0000432c
    15b4:	00004341 	.word	0x00004341
    15b8:	00004357 	.word	0x00004357
    15bc:	0000437e 	.word	0x0000437e
    15c0:	000043a9 	.word	0x000043a9
    15c4:	000043d7 	.word	0x000043d7
    15c8:	000044c5 	.word	0x000044c5
    15cc:	00004416 	.word	0x00004416
    15d0:	0000442d 	.word	0x0000442d

000015d4 <msc_flash_lock>:

    msc_flash_lock();
}
void msc_flash_lock()
{
    MSC->LOCK = MSC_LOCK_LOCKKEY_LOCK;
    15d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15d8:	2200      	movs	r2, #0
    15da:	641a      	str	r2, [r3, #64]	; 0x40
    MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_LOCK;
    15dc:	655a      	str	r2, [r3, #84]	; 0x54
    MSC->BANKSWITCHLOCK = MSC_BANKSWITCHLOCK_BANKSWITCHLOCKKEY_LOCK;
    15de:	671a      	str	r2, [r3, #112]	; 0x70

    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
    15e0:	689a      	ldr	r2, [r3, #8]
    15e2:	f022 0201 	bic.w	r2, r2, #1
    15e6:	609a      	str	r2, [r3, #8]
}
    15e8:	4770      	bx	lr

000015ea <msc_flash_unlock>:
void msc_flash_unlock()
{
    MSC->LOCK = MSC_LOCK_LOCKKEY_UNLOCK;
    15ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15ee:	f641 3271 	movw	r2, #7025	; 0x1b71
    15f2:	641a      	str	r2, [r3, #64]	; 0x40
    MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_UNLOCK;
    15f4:	f246 321a 	movw	r2, #25370	; 0x631a
    15f8:	655a      	str	r2, [r3, #84]	; 0x54
    MSC->BANKSWITCHLOCK = MSC_BANKSWITCHLOCK_BANKSWITCHLOCKKEY_UNLOCK;
    15fa:	f647 422b 	movw	r2, #31787	; 0x7c2b
    15fe:	671a      	str	r2, [r3, #112]	; 0x70

    MSC->WRITECTRL |= MSC_WRITECTRL_WREN;
    1600:	689a      	ldr	r2, [r3, #8]
    1602:	f042 0201 	orr.w	r2, r2, #1
    1606:	609a      	str	r2, [r3, #8]
}
    1608:	4770      	bx	lr

0000160a <msc_init>:
{
    160a:	b508      	push	{r3, lr}
    msc_flash_unlock();
    160c:	f7ff ffed 	bl	15ea <msc_flash_unlock>
    MSC->CTRL |= MSC_CTRL_IFCREADCLEAR | MSC_CTRL_CLKDISFAULTEN | MSC_CTRL_ADDRFAULTEN;
    1610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1614:	681a      	ldr	r2, [r3, #0]
    1616:	f042 020b 	orr.w	r2, r2, #11
    161a:	601a      	str	r2, [r3, #0]
    MSC->READCTRL |= MSC_READCTRL_SCBTP;
    161c:	685a      	ldr	r2, [r3, #4]
    161e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1622:	605a      	str	r2, [r3, #4]
    MSC->WRITECTRL = MSC_WRITECTRL_RWWEN;
    1624:	2220      	movs	r2, #32
    1626:	609a      	str	r2, [r3, #8]
    MSC->BOOTLOADERCTRL = MSC_BOOTLOADERCTRL_BLWDIS;
    1628:	2202      	movs	r2, #2
    162a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    MSC->CACHECONFIG0 = MSC_CACHECONFIG0_CACHELPLEVEL_MINACTIVITY;
    162e:	2203      	movs	r2, #3
    1630:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
    1634:	2201      	movs	r2, #1
    1636:	645a      	str	r2, [r3, #68]	; 0x44
}
    1638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    msc_flash_lock();
    163c:	f7ff bfca 	b.w	15d4 <msc_flash_lock>

00001640 <msc_config_waitstates>:
{
    1640:	b508      	push	{r3, lr}
    msc_flash_unlock();
    1642:	f7ff ffd2 	bl	15ea <msc_flash_unlock>
    if(ulFrequency <= 18000000)
    1646:	4b23      	ldr	r3, [pc, #140]	; (16d4 <msc_config_waitstates+0x94>)
    1648:	4298      	cmp	r0, r3
    164a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    164e:	d815      	bhi.n	167c <msc_config_waitstates+0x3c>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS0;
    1650:	685a      	ldr	r2, [r3, #4]
    1652:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
    1656:	605a      	str	r2, [r3, #4]
        MSC->CTRL &= ~MSC_CTRL_WAITMODE_WS1;
    1658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    165c:	6813      	ldr	r3, [r2, #0]
    165e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1662:	6013      	str	r3, [r2, #0]
    if(ulFrequency <= 38000000)
    1664:	4b1c      	ldr	r3, [pc, #112]	; (16d8 <msc_config_waitstates+0x98>)
    1666:	4298      	cmp	r0, r3
    1668:	d928      	bls.n	16bc <msc_config_waitstates+0x7c>
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN;
    166a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    166e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    1672:	f043 1306 	orr.w	r3, r3, #393222	; 0x60006
    1676:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    167a:	e025      	b.n	16c8 <msc_config_waitstates+0x88>
    else if(ulFrequency <= 36000000)
    167c:	4a17      	ldr	r2, [pc, #92]	; (16dc <msc_config_waitstates+0x9c>)
    167e:	4290      	cmp	r0, r2
    1680:	d805      	bhi.n	168e <msc_config_waitstates+0x4e>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
    1682:	685a      	ldr	r2, [r3, #4]
    1684:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    1688:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    168c:	e7e3      	b.n	1656 <msc_config_waitstates+0x16>
    else if(ulFrequency <= 54000000)
    168e:	4a14      	ldr	r2, [pc, #80]	; (16e0 <msc_config_waitstates+0xa0>)
    1690:	4290      	cmp	r0, r2
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
    1692:	685a      	ldr	r2, [r3, #4]
    else if(ulFrequency <= 54000000)
    1694:	d80e      	bhi.n	16b4 <msc_config_waitstates+0x74>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
    1696:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    169a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    169e:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
    16a0:	4b10      	ldr	r3, [pc, #64]	; (16e4 <msc_config_waitstates+0xa4>)
    16a2:	4298      	cmp	r0, r3
    16a4:	d9d8      	bls.n	1658 <msc_config_waitstates+0x18>
        MSC->CTRL |= MSC_CTRL_WAITMODE_WS1;
    16a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    16aa:	6813      	ldr	r3, [r2, #0]
    16ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    16b0:	6013      	str	r3, [r2, #0]
    if(ulFrequency <= 38000000)
    16b2:	e7da      	b.n	166a <msc_config_waitstates+0x2a>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS3;
    16b4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
    16b8:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
    16ba:	e7f4      	b.n	16a6 <msc_config_waitstates+0x66>
        MSC->RAMCTRL &= ~(MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN);
    16bc:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    16c0:	f023 1306 	bic.w	r3, r3, #393222	; 0x60006
    16c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN;
    16c8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    16cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    msc_flash_lock();
    16d0:	f7ff bf80 	b.w	15d4 <msc_flash_lock>
    16d4:	0112a880 	.word	0x0112a880
    16d8:	0243d580 	.word	0x0243d580
    16dc:	02255100 	.word	0x02255100
    16e0:	0337f980 	.word	0x0337f980
    16e4:	02faf080 	.word	0x02faf080

000016e8 <qspi_flash_cmd.part.1>:
    
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
}


void qspi_flash_cmd(uint8_t ubOpCode, uint32_t ulAddress, uint8_t ubAddressSize, uint8_t ubModeBits, uint8_t ubDummyCycles, uint8_t *pubSrc, uint8_t ubSrcSize, uint8_t *pubDst, uint8_t ubDstSize)
    16e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return;
        
    if(ubDstSize && !pubDst)
        return;

    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    16ea:	4d59      	ldr	r5, [pc, #356]	; (1850 <qspi_flash_cmd.part.1+0x168>)
void qspi_flash_cmd(uint8_t ubOpCode, uint32_t ulAddress, uint8_t ubAddressSize, uint8_t ubModeBits, uint8_t ubDummyCycles, uint8_t *pubSrc, uint8_t ubSrcSize, uint8_t *pubDst, uint8_t ubDstSize)
    16ec:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
    16f0:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    16f4:	682f      	ldr	r7, [r5, #0]
    16f6:	2f00      	cmp	r7, #0
    16f8:	dafc      	bge.n	16f4 <qspi_flash_cmd.part.1+0xc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    16fa:	f3ef 8710 	mrs	r7, PRIMASK

    return 1;
}
static inline uint32_t __iDisableIRQRetVal()
{
    __asm__ volatile ("cpsid i" ::: "memory");
    16fe:	b672      	cpsid	i
    
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    {
        QSPI0->CONFIG &= ~(QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_ENBSPI);
    1700:	f8d5 e000 	ldr.w	lr, [r5]
    1704:	f02e 0e81 	bic.w	lr, lr, #129	; 0x81
    1708:	f8c5 e000 	str.w	lr, [r5]
        QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
    170c:	f8d5 e000 	ldr.w	lr, [r5]
    1710:	f04e 0e01 	orr.w	lr, lr, #1
    1714:	f8c5 e000 	str.w	lr, [r5]
        
        QSPI0->FLASHCMDCTRL = ((uint32_t)ubOpCode << _QSPI_FLASHCMDCTRL_CMDOPCODE_SHIFT) | ((uint32_t)ubDummyCycles << _QSPI_FLASHCMDCTRL_NUMDUMMYCYCLES_SHIFT) | (!!ubModeBits << _QSPI_FLASHCMDCTRL_ENBMODEBIT_SHIFT);
    1718:	f89d 5020 	ldrb.w	r5, [sp, #32]
    171c:	2b00      	cmp	r3, #0
    171e:	ea4f 15c5 	mov.w	r5, r5, lsl #7
    1722:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
    1726:	bf14      	ite	ne
    1728:	f44f 2080 	movne.w	r0, #262144	; 0x40000
    172c:	2000      	moveq	r0, #0
    172e:	4305      	orrs	r5, r0
    1730:	4847      	ldr	r0, [pc, #284]	; (1850 <qspi_flash_cmd.part.1+0x168>)
    1732:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90

        if(ubAddressSize)
    1736:	b152      	cbz	r2, 174e <qspi_flash_cmd.part.1+0x66>
        {
            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBCOMDADDR | ((uint32_t)(ubAddressSize - 1) << _QSPI_FLASHCMDCTRL_NUMADDRBYTES_SHIFT);
    1738:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    173c:	3a01      	subs	r2, #1
    173e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    1742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1746:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
            QSPI0->FLASHCMDADDR = ulAddress;
    174a:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
        }

        if (ubSrcSize)
    174e:	b1b6      	cbz	r6, 177e <qspi_flash_cmd.part.1+0x96>
        {
            uint32_t pulBuf[2] = { 0, 0 };
    1750:	2300      	movs	r3, #0
    1752:	e9cd 3300 	strd	r3, r3, [sp]
            uint8_t *pubBuf = (uint8_t *)pulBuf;

            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBWRITEDATA | ((uint32_t)(ubSrcSize - 1) << _QSPI_FLASHCMDCTRL_NUMWRDATABYTES_SHIFT);
    1756:	493e      	ldr	r1, [pc, #248]	; (1850 <qspi_flash_cmd.part.1+0x168>)
    1758:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
    175c:	1e70      	subs	r0, r6, #1
    175e:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
    1762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1766:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

            for (uint8_t i = 0; i < ubSrcSize; i++)
    176a:	b2da      	uxtb	r2, r3
    176c:	4296      	cmp	r6, r2
    176e:	d83c      	bhi.n	17ea <qspi_flash_cmd.part.1+0x102>
                pubBuf[i] = pubSrc[i];

            QSPI0->FLASHWRDATALOWER = pulBuf[0];
    1770:	4b37      	ldr	r3, [pc, #220]	; (1850 <qspi_flash_cmd.part.1+0x168>)
    1772:	9a00      	ldr	r2, [sp, #0]
    1774:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            QSPI0->FLASHWRDATAUPPER = pulBuf[1];
    1778:	9a01      	ldr	r2, [sp, #4]
    177a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }
        
        if (ubDstSize)
    177e:	b1bc      	cbz	r4, 17b0 <qspi_flash_cmd.part.1+0xc8>
        {
            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBREADDATA;
    1780:	4b33      	ldr	r3, [pc, #204]	; (1850 <qspi_flash_cmd.part.1+0x168>)
    1782:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1786:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    178a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

            if(ubDstSize > 8)
    178e:	2c08      	cmp	r4, #8
                QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_STIGMEMBANKEN | ((uint32_t)(ubDstSize - 9) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    1790:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1794:	bf85      	ittet	hi
    1796:	f1a4 0109 	subhi.w	r1, r4, #9
    179a:	ea42 5201 	orrhi.w	r2, r2, r1, lsl #20
            else
                QSPI0->FLASHCMDCTRL |= ((uint32_t)(ubDstSize - 1) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    179e:	f104 31ff 	addls.w	r1, r4, #4294967295	; 0xffffffff
                QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_STIGMEMBANKEN | ((uint32_t)(ubDstSize - 9) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    17a2:	f042 0204 	orrhi.w	r2, r2, #4
                QSPI0->FLASHCMDCTRL |= ((uint32_t)(ubDstSize - 1) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    17a6:	bf98      	it	ls
    17a8:	ea42 5201 	orrls.w	r2, r2, r1, lsl #20
    17ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_CMDEXEC;
    17b0:	4b27      	ldr	r3, [pc, #156]	; (1850 <qspi_flash_cmd.part.1+0x168>)
    17b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    17b6:	f042 0201 	orr.w	r2, r2, #1
    17ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        while(QSPI0->FLASHCMDCTRL & QSPI_FLASHCMDCTRL_CMDEXECSTATUS);
    17be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    17c2:	0790      	lsls	r0, r2, #30
    17c4:	d4fb      	bmi.n	17be <qspi_flash_cmd.part.1+0xd6>

        if (ubDstSize)
    17c6:	2c00      	cmp	r4, #0
    17c8:	d13d      	bne.n	1846 <qspi_flash_cmd.part.1+0x15e>

            for (uint8_t i = 0; i < ubDataLeft; i++)
                pubDstTemp[i] = pubBuf[i];
        }

        while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    17ca:	4b21      	ldr	r3, [pc, #132]	; (1850 <qspi_flash_cmd.part.1+0x168>)
    17cc:	681a      	ldr	r2, [r3, #0]
    17ce:	2a00      	cmp	r2, #0
    17d0:	dafc      	bge.n	17cc <qspi_flash_cmd.part.1+0xe4>

        QSPI0->CONFIG &= ~QSPI_CONFIG_ENBSPI;
    17d2:	681a      	ldr	r2, [r3, #0]
    17d4:	f022 0201 	bic.w	r2, r2, #1
    17d8:	601a      	str	r2, [r3, #0]
        QSPI0->CONFIG |= QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_ENBSPI;
    17da:	681a      	ldr	r2, [r3, #0]
    17dc:	f042 0281 	orr.w	r2, r2, #129	; 0x81
    17e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("cpsid i" ::: "memory");
    (void)__s;
}
static inline void __iRestore(const uint32_t *__s)
{
    if(!*__s)
    17e2:	b907      	cbnz	r7, 17e6 <qspi_flash_cmd.part.1+0xfe>
        __asm__ volatile ("cpsie i" ::: "memory");
    17e4:	b662      	cpsie	i
    }
}
    17e6:	b003      	add	sp, #12
    17e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                pubBuf[i] = pubSrc[i];
    17ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    17ec:	5cd2      	ldrb	r2, [r2, r3]
    17ee:	f80d 2003 	strb.w	r2, [sp, r3]
    17f2:	3301      	adds	r3, #1
    17f4:	e7b9      	b.n	176a <qspi_flash_cmd.part.1+0x82>
                QSPI0->FLASHCOMMANDCTRLMEM = (uint32_t)(ubDstSize - ubDataLeft) << _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKADDR_SHIFT;
    17f6:	0500      	lsls	r0, r0, #20
    17f8:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
                QSPI0->FLASHCOMMANDCTRLMEM |= QSPI_FLASHCOMMANDCTRLMEM_TRIGGERMEMBANKREQ;
    17fc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    1800:	f041 0101 	orr.w	r1, r1, #1
    1804:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
                while(QSPI0->FLASHCOMMANDCTRLMEM & QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREQINPROGRESS);
    1808:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    180c:	0789      	lsls	r1, r1, #30
    180e:	d4fb      	bmi.n	1808 <qspi_flash_cmd.part.1+0x120>
                *pubDstTemp = (QSPI0->FLASHCOMMANDCTRLMEM & _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREADDATA_MASK) >> _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREADDATA_SHIFT;
    1810:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    1814:	0a09      	lsrs	r1, r1, #8
    1816:	f802 1b01 	strb.w	r1, [r2], #1
                pubDstTemp++;
    181a:	1aa9      	subs	r1, r5, r2
            while(ubDstSize > 8 && ubDstSize - ubDataLeft < 8)
    181c:	2c08      	cmp	r4, #8
    181e:	b2c9      	uxtb	r1, r1
    1820:	d902      	bls.n	1828 <qspi_flash_cmd.part.1+0x140>
    1822:	1a60      	subs	r0, r4, r1
    1824:	2807      	cmp	r0, #7
    1826:	dde6      	ble.n	17f6 <qspi_flash_cmd.part.1+0x10e>
            pulBuf[0] = QSPI0->FLASHRDDATALOWER;
    1828:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
    182c:	9000      	str	r0, [sp, #0]
            pulBuf[1] = QSPI0->FLASHRDDATAUPPER;
    182e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1832:	9301      	str	r3, [sp, #4]
    1834:	2300      	movs	r3, #0
            for (uint8_t i = 0; i < ubDataLeft; i++)
    1836:	b2d8      	uxtb	r0, r3
    1838:	4281      	cmp	r1, r0
    183a:	d9c6      	bls.n	17ca <qspi_flash_cmd.part.1+0xe2>
                pubDstTemp[i] = pubBuf[i];
    183c:	f81d 0003 	ldrb.w	r0, [sp, r3]
    1840:	54d0      	strb	r0, [r2, r3]
    1842:	3301      	adds	r3, #1
    1844:	e7f7      	b.n	1836 <qspi_flash_cmd.part.1+0x14e>
            uint8_t *pubDstTemp = pubDst;
    1846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1848:	4b01      	ldr	r3, [pc, #4]	; (1850 <qspi_flash_cmd.part.1+0x168>)
    184a:	1915      	adds	r5, r2, r4
    184c:	e7e5      	b.n	181a <qspi_flash_cmd.part.1+0x132>
    184e:	bf00      	nop
    1850:	4001c400 	.word	0x4001c400

00001854 <qspi_flash_cmd>:
{
    1854:	b4f0      	push	{r4, r5, r6, r7}
    if(ubAddressSize > 4)
    1856:	2a04      	cmp	r2, #4
{
    1858:	f89d 6010 	ldrb.w	r6, [sp, #16]
    185c:	9f05      	ldr	r7, [sp, #20]
    185e:	f89d 4018 	ldrb.w	r4, [sp, #24]
    1862:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1866:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if(ubAddressSize > 4)
    186a:	d813      	bhi.n	1894 <qspi_flash_cmd+0x40>
    if(ubDummyCycles > 31)
    186c:	2e1f      	cmp	r6, #31
    186e:	d811      	bhi.n	1894 <qspi_flash_cmd+0x40>
    if(ubSrcSize > 8)
    1870:	2c08      	cmp	r4, #8
    1872:	d80f      	bhi.n	1894 <qspi_flash_cmd+0x40>
    if(ubSrcSize && !pubSrc)
    1874:	b104      	cbz	r4, 1878 <qspi_flash_cmd+0x24>
    1876:	b16f      	cbz	r7, 1894 <qspi_flash_cmd+0x40>
    if(ubDstSize > 16)
    1878:	2d10      	cmp	r5, #16
    187a:	d80b      	bhi.n	1894 <qspi_flash_cmd+0x40>
    if(ubDstSize && !pubDst)
    187c:	b115      	cbz	r5, 1884 <qspi_flash_cmd+0x30>
    187e:	f1bc 0f00 	cmp.w	ip, #0
    1882:	d007      	beq.n	1894 <qspi_flash_cmd+0x40>
    1884:	e9cd c507 	strd	ip, r5, [sp, #28]
    1888:	e9cd 7405 	strd	r7, r4, [sp, #20]
    188c:	9604      	str	r6, [sp, #16]
}
    188e:	bcf0      	pop	{r4, r5, r6, r7}
    1890:	f7ff bf2a 	b.w	16e8 <qspi_flash_cmd.part.1>
    1894:	bcf0      	pop	{r4, r5, r6, r7}
    1896:	4770      	bx	lr

00001898 <qspi_flash_reset>:
    
    qspi_flash_unprotect_all_blocks(); // Unprotect all blocks to be able to read/write
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | BIT(1)); // Enable SIO2 and SIO3
}
void qspi_flash_reset()
{
    1898:	b510      	push	{r4, lr}
    189a:	b086      	sub	sp, #24
    189c:	2400      	movs	r4, #0
    189e:	4623      	mov	r3, r4
    18a0:	4622      	mov	r2, r4
    18a2:	4621      	mov	r1, r4
    18a4:	e9cd 4403 	strd	r4, r4, [sp, #12]
    18a8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    18ac:	9400      	str	r4, [sp, #0]
    18ae:	2066      	movs	r0, #102	; 0x66
    18b0:	f7ff ff1a 	bl	16e8 <qspi_flash_cmd.part.1>
    if(ubDstSize && !pubDst)
    18b4:	e9cd 4403 	strd	r4, r4, [sp, #12]
    18b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    18bc:	9400      	str	r4, [sp, #0]
    18be:	4623      	mov	r3, r4
    18c0:	4622      	mov	r2, r4
    18c2:	4621      	mov	r1, r4
    18c4:	2099      	movs	r0, #153	; 0x99
    18c6:	f7ff ff0f 	bl	16e8 <qspi_flash_cmd.part.1>
    qspi_flash_cmd(QSPI_FLASH_CMD_RESET_ENABLE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
    qspi_flash_cmd(QSPI_FLASH_CMD_RESET, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
}
    18ca:	b006      	add	sp, #24
    18cc:	bd10      	pop	{r4, pc}

000018ce <qspi_flash_read_status>:
uint8_t qspi_flash_read_status()
{
    18ce:	b500      	push	{lr}
    18d0:	b089      	sub	sp, #36	; 0x24
    if(ubDstSize && !pubDst)
    18d2:	2301      	movs	r3, #1
    18d4:	9304      	str	r3, [sp, #16]
    18d6:	f10d 031f 	add.w	r3, sp, #31
    18da:	9303      	str	r3, [sp, #12]
    18dc:	2300      	movs	r3, #0
    18de:	e9cd 3301 	strd	r3, r3, [sp, #4]
    18e2:	9300      	str	r3, [sp, #0]
    18e4:	461a      	mov	r2, r3
    18e6:	4619      	mov	r1, r3
    18e8:	2005      	movs	r0, #5
    18ea:	f7ff fefd 	bl	16e8 <qspi_flash_cmd.part.1>
    uint8_t ubStatus;

    qspi_flash_cmd(QSPI_FLASH_CMD_READ_STATUS, 0x00000000, 0, 0, 0, NULL, 0, &ubStatus, 1);

    return ubStatus;
}
    18ee:	f89d 001f 	ldrb.w	r0, [sp, #31]
    18f2:	b009      	add	sp, #36	; 0x24
    18f4:	f85d fb04 	ldr.w	pc, [sp], #4

000018f8 <qspi_flash_read_config>:
uint8_t qspi_flash_read_config()
{
    18f8:	b500      	push	{lr}
    18fa:	b089      	sub	sp, #36	; 0x24
    if(ubDstSize && !pubDst)
    18fc:	2301      	movs	r3, #1
    18fe:	9304      	str	r3, [sp, #16]
    1900:	f10d 031f 	add.w	r3, sp, #31
    1904:	9303      	str	r3, [sp, #12]
    1906:	2300      	movs	r3, #0
    1908:	e9cd 3301 	strd	r3, r3, [sp, #4]
    190c:	9300      	str	r3, [sp, #0]
    190e:	461a      	mov	r2, r3
    1910:	4619      	mov	r1, r3
    1912:	2035      	movs	r0, #53	; 0x35
    1914:	f7ff fee8 	bl	16e8 <qspi_flash_cmd.part.1>
    uint8_t ubConfig;

    qspi_flash_cmd(QSPI_FLASH_CMD_READ_CFG, 0x00000000, 0, 0, 0, NULL, 0, &ubConfig, 1);

    return ubConfig;
}
    1918:	f89d 001f 	ldrb.w	r0, [sp, #31]
    191c:	b009      	add	sp, #36	; 0x24
    191e:	f85d fb04 	ldr.w	pc, [sp], #4

00001922 <qspi_flash_write_enable>:
{
	while(qspi_flash_read_status() & BIT(0))
		delay_ms(1);
}
void qspi_flash_write_enable()
{
    1922:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1924:	2300      	movs	r3, #0
    1926:	e9cd 3303 	strd	r3, r3, [sp, #12]
    192a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    192e:	9300      	str	r3, [sp, #0]
    1930:	461a      	mov	r2, r3
    1932:	4619      	mov	r1, r3
    1934:	2006      	movs	r0, #6
    1936:	f7ff fed7 	bl	16e8 <qspi_flash_cmd.part.1>
    qspi_flash_cmd(QSPI_FLASH_CMD_WRITE_ENABLE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);

	while(!(qspi_flash_read_status() & BIT(1)))
    193a:	f7ff ffc8 	bl	18ce <qspi_flash_read_status>
    193e:	0783      	lsls	r3, r0, #30
    1940:	d502      	bpl.n	1948 <qspi_flash_write_enable+0x26>
		delay_ms(1);
}
    1942:	b007      	add	sp, #28
    1944:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_ms(1);
    1948:	2001      	movs	r0, #1
    194a:	2100      	movs	r1, #0
    194c:	f000 ff60 	bl	2810 <delay_ms>
    1950:	e7f3      	b.n	193a <qspi_flash_write_enable+0x18>

00001952 <qspi_flash_write_status_config>:
{
    1952:	b500      	push	{lr}
    1954:	b089      	sub	sp, #36	; 0x24
    uint8_t ubBuf[] = { ubStatus, ubConfig };
    1956:	f88d 001c 	strb.w	r0, [sp, #28]
    195a:	f88d 101d 	strb.w	r1, [sp, #29]
    qspi_flash_write_enable();
    195e:	f7ff ffe0 	bl	1922 <qspi_flash_write_enable>
    if(ubDstSize && !pubDst)
    1962:	2202      	movs	r2, #2
    1964:	2300      	movs	r3, #0
    1966:	9202      	str	r2, [sp, #8]
    1968:	aa07      	add	r2, sp, #28
    196a:	e9cd 3200 	strd	r3, r2, [sp]
    196e:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1972:	461a      	mov	r2, r3
    1974:	4619      	mov	r1, r3
    1976:	2001      	movs	r0, #1
    1978:	f7ff feb6 	bl	16e8 <qspi_flash_cmd.part.1>
}
    197c:	b009      	add	sp, #36	; 0x24
    197e:	f85d fb04 	ldr.w	pc, [sp], #4

00001982 <qspi_flash_read_jedec_id>:
    qspi_flash_cmd(QSPI_FLASH_CMD_CHIP_ERASE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);

    qspi_flash_busy_wait();
}
uint32_t qspi_flash_read_jedec_id()
{
    1982:	b500      	push	{lr}
    1984:	b089      	sub	sp, #36	; 0x24
    1986:	2203      	movs	r2, #3
	uint8_t ubBuf[] = { 0x00, 0x00, 0x00 };
    1988:	2300      	movs	r3, #0
    198a:	9204      	str	r2, [sp, #16]
    198c:	aa07      	add	r2, sp, #28
    198e:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1992:	e9cd 3300 	strd	r3, r3, [sp]
    1996:	461a      	mov	r2, r3
    1998:	4619      	mov	r1, r3
    199a:	209f      	movs	r0, #159	; 0x9f
    199c:	f8ad 301c 	strh.w	r3, [sp, #28]
    19a0:	f88d 301e 	strb.w	r3, [sp, #30]
    if(ubDstSize && !pubDst)
    19a4:	f7ff fea0 	bl	16e8 <qspi_flash_cmd.part.1>

    qspi_flash_cmd(QSPI_FLASH_CMD_JEDEC_READ_ID, 0x00000000, 0, 0, 0, NULL, 0, ubBuf, 3);

	return ((uint32_t)ubBuf[0] << 16) | ((uint32_t)ubBuf[1] << 8) | (uint32_t)ubBuf[2];
    19a8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    19ac:	f89d 001c 	ldrb.w	r0, [sp, #28]
    19b0:	021b      	lsls	r3, r3, #8
    19b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    19b6:	f89d 001e 	ldrb.w	r0, [sp, #30]
}
    19ba:	4318      	orrs	r0, r3
    19bc:	b009      	add	sp, #36	; 0x24
    19be:	f85d fb04 	ldr.w	pc, [sp], #4

000019c2 <qspi_flash_read_security>:
void qspi_flash_read_security(uint16_t usAddress, uint8_t *pubDst, uint8_t ubCount)
{
    19c2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    qspi_flash_cmd(QSPI_FLASH_CMD_READ_SECURITY, usAddress, 2, 0, 8, NULL, 0, pubDst, ubCount);
    19c4:	2300      	movs	r3, #0
    19c6:	e9cd 1203 	strd	r1, r2, [sp, #12]
    19ca:	2208      	movs	r2, #8
    19cc:	9200      	str	r2, [sp, #0]
    19ce:	4601      	mov	r1, r0
    19d0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    19d4:	2202      	movs	r2, #2
    19d6:	2088      	movs	r0, #136	; 0x88
    19d8:	f7ff ff3c 	bl	1854 <qspi_flash_cmd>
}
    19dc:	b007      	add	sp, #28
    19de:	f85d fb04 	ldr.w	pc, [sp], #4

000019e2 <qspi_flash_unprotect_all_blocks>:
{
    qspi_flash_write_enable();
    qspi_flash_cmd(QSPI_FLASH_CMD_WRITE_SECURITY, usAddress, 2, 0, 0, pubSrc, ubCount, NULL, 0);
}
void qspi_flash_unprotect_all_blocks()
{
    19e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	qspi_flash_write_enable();
    19e4:	f7ff ff9d 	bl	1922 <qspi_flash_write_enable>
    if(ubDstSize && !pubDst)
    19e8:	2300      	movs	r3, #0
    19ea:	e9cd 3303 	strd	r3, r3, [sp, #12]
    19ee:	e9cd 3301 	strd	r3, r3, [sp, #4]
    19f2:	9300      	str	r3, [sp, #0]
    19f4:	461a      	mov	r2, r3
    19f6:	4619      	mov	r1, r3
    19f8:	2098      	movs	r0, #152	; 0x98
    19fa:	f7ff fe75 	bl	16e8 <qspi_flash_cmd.part.1>
    qspi_flash_cmd(QSPI_FLASH_CMD_UNLOCK_PROTECTION, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
    19fe:	b007      	add	sp, #28
    1a00:	f85d fb04 	ldr.w	pc, [sp], #4

00001a04 <qspi_flash_init>:
{
    1a04:	b510      	push	{r4, lr}
    qspi_flash_reset();
    1a06:	f7ff ff47 	bl	1898 <qspi_flash_reset>
    if(qspi_flash_read_jedec_id() != 0xBF2643)
    1a0a:	f7ff ffba 	bl	1982 <qspi_flash_read_jedec_id>
    1a0e:	4b09      	ldr	r3, [pc, #36]	; (1a34 <qspi_flash_init+0x30>)
    1a10:	4298      	cmp	r0, r3
    1a12:	d10e      	bne.n	1a32 <qspi_flash_init+0x2e>
    qspi_flash_unprotect_all_blocks(); // Unprotect all blocks to be able to read/write
    1a14:	f7ff ffe5 	bl	19e2 <qspi_flash_unprotect_all_blocks>
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | BIT(1)); // Enable SIO2 and SIO3
    1a18:	f7ff ff59 	bl	18ce <qspi_flash_read_status>
    1a1c:	4604      	mov	r4, r0
    1a1e:	f7ff ff6b 	bl	18f8 <qspi_flash_read_config>
    1a22:	f040 0102 	orr.w	r1, r0, #2
    1a26:	b2c9      	uxtb	r1, r1
    1a28:	4620      	mov	r0, r4
}
    1a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | BIT(1)); // Enable SIO2 and SIO3
    1a2e:	f7ff bf90 	b.w	1952 <qspi_flash_write_status_config>
}
    1a32:	bd10      	pop	{r4, pc}
    1a34:	00bf2643 	.word	0x00bf2643

00001a38 <qspi_init>:
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
    1a38:	4a1d      	ldr	r2, [pc, #116]	; (1ab0 <qspi_init+0x78>)
    1a3a:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
{
    1a3e:	b510      	push	{r4, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
    1a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1a44:	4c1b      	ldr	r4, [pc, #108]	; (1ab4 <qspi_init+0x7c>)
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
    1a46:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1a4a:	6823      	ldr	r3, [r4, #0]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	dafc      	bge.n	1a4a <qspi_init+0x12>
    QSPI0->CONFIG = QSPI_CONFIG_ENBAHBADDRREMAP | (0 << _QSPI_CONFIG_PERIPHCSLINES_SHIFT) | QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_PHYMODEENABLE;
    1a50:	4b19      	ldr	r3, [pc, #100]	; (1ab8 <qspi_init+0x80>)
    1a52:	6023      	str	r3, [r4, #0]
    QSPI0->DEVINSTRRDCONFIG = (0 << _QSPI_DEVINSTRRDCONFIG_DUMMYRDCLKCYCLES_SHIFT) | QSPI_DEVINSTRRDCONFIG_MODEBITENABLE | (1 << _QSPI_DEVINSTRRDCONFIG_DATAXFERTYPEEXTMODE_SHIFT) | (1 << _QSPI_DEVINSTRRDCONFIG_ADDRXFERTYPESTDMODE_SHIFT) | (0 << _QSPI_DEVINSTRRDCONFIG_INSTRTYPE_SHIFT) | ((uint32_t)QSPI_FLASH_CMD_READ_FAST_DIO << _QSPI_DEVINSTRRDCONFIG_RDOPCODENONXIP_SHIFT);
    1a54:	4b19      	ldr	r3, [pc, #100]	; (1abc <qspi_init+0x84>)
    1a56:	6063      	str	r3, [r4, #4]
    QSPI0->DEVINSTRWRCONFIG = (0 << _QSPI_DEVINSTRWRCONFIG_DUMMYWRCLKCYCLES_SHIFT) | (0 << _QSPI_DEVINSTRWRCONFIG_DATAXFERTYPEEXTMODE_SHIFT) | (0 << _QSPI_DEVINSTRWRCONFIG_ADDRXFERTYPESTDMODE_SHIFT) | ((uint32_t)QSPI_FLASH_CMD_WRITE << _QSPI_DEVINSTRWRCONFIG_WROPCODE_SHIFT);
    1a58:	2302      	movs	r3, #2
    1a5a:	60a3      	str	r3, [r4, #8]
    QSPI0->DEVDELAY = (2 << _QSPI_DEVDELAY_DNSS_SHIFT) | (2 << _QSPI_DEVDELAY_DBTWN_SHIFT) | (0 << _QSPI_DEVDELAY_DAFTER_SHIFT) | (0 << _QSPI_DEVDELAY_DINIT_SHIFT);
    1a5c:	4b18      	ldr	r3, [pc, #96]	; (1ac0 <qspi_init+0x88>)
    1a5e:	60e3      	str	r3, [r4, #12]
    QSPI0->DEVSIZECONFIG = (0 << _QSPI_DEVSIZECONFIG_MEMSIZEONCS0_SHIFT) | (12 << _QSPI_DEVSIZECONFIG_BYTESPERSUBSECTOR_SHIFT) | (256 << _QSPI_DEVSIZECONFIG_BYTESPERDEVICEPAGE_SHIFT) | (2 << _QSPI_DEVSIZECONFIG_NUMADDRBYTES_SHIFT);
    1a60:	4b18      	ldr	r3, [pc, #96]	; (1ac4 <qspi_init+0x8c>)
    1a62:	6163      	str	r3, [r4, #20]
    QSPI0->WRITECOMPLETIONCTRL = (5 << _QSPI_WRITECOMPLETIONCTRL_POLLREPDELAY_SHIFT) | (1 << _QSPI_WRITECOMPLETIONCTRL_POLLCOUNT_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGPOLARITY_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGBITINDEX_SHIFT) | (QSPI_FLASH_CMD_READ_STATUS << _QSPI_WRITECOMPLETIONCTRL_OPCODE_SHIFT);
    1a64:	4a18      	ldr	r2, [pc, #96]	; (1ac8 <qspi_init+0x90>)
    QSPI0->REMAPADDR = 0x00000000;
    1a66:	2300      	movs	r3, #0
    1a68:	6263      	str	r3, [r4, #36]	; 0x24
    QSPI0->MODEBITCONFIG = (0x00 << _QSPI_MODEBITCONFIG_MODE_SHIFT);
    1a6a:	62a3      	str	r3, [r4, #40]	; 0x28
    QSPI0->WRITECOMPLETIONCTRL = (5 << _QSPI_WRITECOMPLETIONCTRL_POLLREPDELAY_SHIFT) | (1 << _QSPI_WRITECOMPLETIONCTRL_POLLCOUNT_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGPOLARITY_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGBITINDEX_SHIFT) | (QSPI_FLASH_CMD_READ_STATUS << _QSPI_WRITECOMPLETIONCTRL_OPCODE_SHIFT);
    1a6c:	63a2      	str	r2, [r4, #56]	; 0x38
    QSPI0->PHYCONFIGURATION = QSPI_PHYCONFIGURATION_PHYCONFIGRESYNC | (25 << _QSPI_PHYCONFIGURATION_PHYCONFIGTXDLLDELAY_SHIFT) | (43 << _QSPI_PHYCONFIGURATION_PHYCONFIGRXDLLDELAY_SHIFT);
    1a6e:	4a17      	ldr	r2, [pc, #92]	; (1acc <qspi_init+0x94>)
    QSPI0->POLLINGFLASHSTATUS = (0 << _QSPI_POLLINGFLASHSTATUS_DEVICESTATUSNBDUMMY_SHIFT);
    1a70:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    QSPI0->PHYCONFIGURATION = QSPI_PHYCONFIGURATION_PHYCONFIGRESYNC | (25 << _QSPI_PHYCONFIGURATION_PHYCONFIGTXDLLDELAY_SHIFT) | (43 << _QSPI_PHYCONFIGURATION_PHYCONFIGRXDLLDELAY_SHIFT);
    1a74:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
    QSPI0->OPCODEEXTUPPER = (QSPI_FLASH_CMD_WRITE_ENABLE << _QSPI_OPCODEEXTUPPER_WELOPCODE_SHIFT);
    1a78:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    1a7c:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    QSPI0->ROUTELOC0 = QSPI_ROUTELOC0_QSPILOC_LOC0;
    1a80:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    QSPI0->ROUTEPEN = QSPI_ROUTEPEN_DQ0PEN | QSPI_ROUTEPEN_DQ1PEN | QSPI_ROUTEPEN_DQ2PEN | QSPI_ROUTEPEN_DQ3PEN | QSPI_ROUTEPEN_CS0PEN | QSPI_ROUTEPEN_SCLKPEN;
    1a84:	f240 13e3 	movw	r3, #483	; 0x1e3
    1a88:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    CMU->QSPICTRL = CMU_QSPICTRL_QSPI0CLKSEL_USHFRCO;
    1a8c:	4b08      	ldr	r3, [pc, #32]	; (1ab0 <qspi_init+0x78>)
    1a8e:	2203      	movs	r2, #3
    1a90:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    cmu_update_clocks();
    1a94:	f001 f83e 	bl	2b14 <cmu_update_clocks>
    QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
    1a98:	6823      	ldr	r3, [r4, #0]
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1a9a:	4a06      	ldr	r2, [pc, #24]	; (1ab4 <qspi_init+0x7c>)
    QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
    1a9c:	f043 0301 	orr.w	r3, r3, #1
    1aa0:	6023      	str	r3, [r4, #0]
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1aa2:	6813      	ldr	r3, [r2, #0]
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	dafc      	bge.n	1aa2 <qspi_init+0x6a>
}
    1aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    qspi_flash_init();
    1aac:	f7ff bfaa 	b.w	1a04 <qspi_flash_init>
    1ab0:	400e4000 	.word	0x400e4000
    1ab4:	4001c400 	.word	0x4001c400
    1ab8:	00010088 	.word	0x00010088
    1abc:	001110bb 	.word	0x001110bb
    1ac0:	02020000 	.word	0x02020000
    1ac4:	000c1002 	.word	0x000c1002
    1ac8:	05010005 	.word	0x05010005
    1acc:	8019002b 	.word	0x8019002b

00001ad0 <gpio_init>:
#include "gpio.h"

void gpio_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPIO;
    1ad0:	4a2f      	ldr	r2, [pc, #188]	; (1b90 <gpio_init+0xc0>)
    1ad2:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    1ad6:	f043 0320 	orr.w	r3, r3, #32
{
    1ada:	b510      	push	{r4, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPIO;
    1adc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    // NC - Not Connected (not available in mcu package)
    // NR - Not routed (no routing to pin on pcb, floating)

    // Port A
    GPIO->P[0].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1ae0:	4b2c      	ldr	r3, [pc, #176]	; (1b94 <gpio_init+0xc4>)
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[0].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL         // US3_MOSI_RFM - Location 0
    1ae2:	4a2d      	ldr	r2, [pc, #180]	; (1b98 <gpio_init+0xc8>)
    GPIO->P[0].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1ae4:	f04f 1150 	mov.w	r1, #5242960	; 0x500050
    1ae8:	6019      	str	r1, [r3, #0]
    GPIO->P[0].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL         // US3_MOSI_RFM - Location 0
    1aea:	605a      	str	r2, [r3, #4]
                      | GPIO_P_MODEL_MODE3_PUSHPULL         // US3_CS_RFM - Location 0
                      | GPIO_P_MODEL_MODE4_PUSHPULL         // RFM_RESET
                      | GPIO_P_MODEL_MODE5_DISABLED         // NR
                      | GPIO_P_MODEL_MODE6_INPUTPULLFILTER  // RFM_IRQ
                      | GPIO_P_MODEL_MODE7_DISABLED;        // GSM_STATUS
    GPIO->P[0].MODEH  = GPIO_P_MODEH_MODE8_DISABLED         // GSM_RF_SYNC
    1aec:	4a2b      	ldr	r2, [pc, #172]	; (1b9c <gpio_init+0xcc>)
    1aee:	609a      	str	r2, [r3, #8]
                      | GPIO_P_MODEH_MODE11_DISABLED        // NR
                      | GPIO_P_MODEH_MODE12_PUSHPULL        // TFT_RESET
                      | GPIO_P_MODEH_MODE13_INPUTPULLFILTER // TFT_IRQ
                      | GPIO_P_MODEH_MODE14_PUSHPULL        // TFT_DC
                      | GPIO_P_MODEH_MODE15_PUSHPULL;       // TIM3_CC2_BUZZ - Location 0
    GPIO->P[0].DOUT   = BIT(3);
    1af0:	2008      	movs	r0, #8
    GPIO->P[0].OVTDIS = 0;
    1af2:	2200      	movs	r2, #0

    // Port B
    GPIO->P[1].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (7 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1af4:	f04f 1470 	mov.w	r4, #7340144	; 0x700070
    GPIO->P[0].DOUT   = BIT(3);
    1af8:	60d8      	str	r0, [r3, #12]
    GPIO->P[0].OVTDIS = 0;
    1afa:	629a      	str	r2, [r3, #40]	; 0x28
    GPIO->P[1].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (7 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1afc:	631c      	str	r4, [r3, #48]	; 0x30
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (7 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[1].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // LED_DI
    1afe:	f243 3434 	movw	r4, #13108	; 0x3334
    1b02:	635c      	str	r4, [r3, #52]	; 0x34
                      | GPIO_P_MODEL_MODE3_INPUTPULLFILTER  // BTN_3
                      | GPIO_P_MODEL_MODE4_DISABLED     // NR
                      | GPIO_P_MODEL_MODE5_DISABLED     // NR
                      | GPIO_P_MODEL_MODE6_DISABLED     // NR
                      | GPIO_P_MODEL_MODE7_DISABLED;    // MAIN_LFXTAL_P
    GPIO->P[1].MODEH  = GPIO_P_MODEH_MODE8_DISABLED     // MAIN_LFXTAL_N
    1b04:	4c26      	ldr	r4, [pc, #152]	; (1ba0 <gpio_init+0xd0>)
    1b06:	639c      	str	r4, [r3, #56]	; 0x38
                      | GPIO_P_MODEH_MODE11_WIREDANDPULLUPFILTER    // I2C1_SDA_TFT - Location 1
                      | GPIO_P_MODEH_MODE12_WIREDANDPULLUPFILTER    // I2C1_SCL_TFT - Location 1
                      | GPIO_P_MODEH_MODE13_DISABLED    // MAIN_HFXTAL_P
                      | GPIO_P_MODEH_MODE14_DISABLED    // MAIN_HFXTAL_N
                      | GPIO_P_MODEH_MODE15_DISABLED;   // NC
    GPIO->P[1].DOUT   = BIT(0);
    1b08:	2401      	movs	r4, #1
    1b0a:	63dc      	str	r4, [r3, #60]	; 0x3c
    GPIO->P[1].OVTDIS = 0;

    // Port C
    GPIO->P[2].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[2].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // US2_RTS_GSM - Location 0
    1b0c:	4c25      	ldr	r4, [pc, #148]	; (1ba4 <gpio_init+0xd4>)
    GPIO->P[1].OVTDIS = 0;
    1b0e:	659a      	str	r2, [r3, #88]	; 0x58
    GPIO->P[2].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1b10:	6619      	str	r1, [r3, #96]	; 0x60
    GPIO->P[2].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // US2_RTS_GSM - Location 0
    1b12:	665c      	str	r4, [r3, #100]	; 0x64
                      | GPIO_P_MODEL_MODE3_INPUT        // US2_RX_GSM - Location 0
                      | GPIO_P_MODEL_MODE4_DISABLED     // GSM_RING
                      | GPIO_P_MODEL_MODE5_DISABLED     // GSM_DTR
                      | GPIO_P_MODEL_MODE6_INPUTPULLFILTER  // BAT_STDBY
                      | GPIO_P_MODEL_MODE7_INPUTPULLFILTER; // BAT_CHRG
    GPIO->P[2].MODEH  = GPIO_P_MODEH_MODE8_PUSHPULL     // US0_CS_WIFI - Location 2
    1b14:	f244 1444 	movw	r4, #16708	; 0x4144
    1b18:	669c      	str	r4, [r3, #104]	; 0x68
                      | GPIO_P_MODEH_MODE11_PUSHPULL    // US0_MOSI_WIFI - Location 2
                      | GPIO_P_MODEH_MODE12_DISABLED    // NC
                      | GPIO_P_MODEH_MODE13_DISABLED    // NC
                      | GPIO_P_MODEH_MODE14_DISABLED    // NC
                      | GPIO_P_MODEH_MODE15_DISABLED;   // NC
    GPIO->P[2].DOUT   = BIT(8);
    1b1a:	f44f 7480 	mov.w	r4, #256	; 0x100
    1b1e:	66dc      	str	r4, [r3, #108]	; 0x6c
    GPIO->P[2].OVTDIS = 0;

    // Port D
    GPIO->P[3].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[3].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // US1_MOSI_TFT - Location 1
    1b20:	4c21      	ldr	r4, [pc, #132]	; (1ba8 <gpio_init+0xd8>)
    GPIO->P[2].OVTDIS = 0;
    1b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    GPIO->P[3].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1b26:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    GPIO->P[3].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // US1_MOSI_TFT - Location 1
    1b2a:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
                      | GPIO_P_MODEL_MODE3_PUSHPULL     // US1_CS_TFT - Location 1
                      | GPIO_P_MODEL_MODE4_INPUT        // 5V0_SENSE
                      | GPIO_P_MODEL_MODE5_INPUT        // 4V2_SENSE
                      | GPIO_P_MODEL_MODE6_INPUT        // VBAT_SENSE
                      | GPIO_P_MODEL_MODE7_INPUT;       // VIN_SENSE
    GPIO->P[3].MODEH  = GPIO_P_MODEH_MODE8_DISABLED     // NR
    1b2e:	4c1f      	ldr	r4, [pc, #124]	; (1bac <gpio_init+0xdc>)
    1b30:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
                      | GPIO_P_MODEH_MODE11_PUSHPULL    // QSPI0_DQ2 - Location 0
                      | GPIO_P_MODEH_MODE12_PUSHPULL    // QSPI0_DQ3 - Location 0
                      | GPIO_P_MODEH_MODE13_DISABLED    // NC
                      | GPIO_P_MODEH_MODE14_DISABLED    // NC
                      | GPIO_P_MODEH_MODE15_DISABLED;   // NC
    GPIO->P[3].DOUT   = BIT(3);
    1b34:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    GPIO->P[3].OVTDIS = 0;

    // Port E
    GPIO->P[4].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[4].MODEL  = GPIO_P_MODEL_MODE0_DISABLED     // NR
    1b38:	f44f 2086 	mov.w	r0, #274432	; 0x43000
    GPIO->P[3].OVTDIS = 0;
    1b3c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    GPIO->P[4].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1b40:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    GPIO->P[4].MODEL  = GPIO_P_MODEL_MODE0_DISABLED     // NR
    1b44:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
                      | GPIO_P_MODEL_MODE3_INPUTPULLFILTER  // WIFI_IRQ
                      | GPIO_P_MODEL_MODE4_PUSHPULL     // WIFI_EN
                      | GPIO_P_MODEL_MODE5_DISABLED     // NR
                      | GPIO_P_MODEL_MODE6_DISABLED     // NR
                      | GPIO_P_MODEL_MODE7_DISABLED;    // NR
    GPIO->P[4].MODEH  = GPIO_P_MODEH_MODE8_DISABLED     // NR
    1b48:	4819      	ldr	r0, [pc, #100]	; (1bb0 <gpio_init+0xe0>)
    1b4a:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
                      | GPIO_P_MODEH_MODE11_PUSHPULL    // CCS811_RESET
                      | GPIO_P_MODEH_MODE12_WIREDANDPULLUPFILTER    // I2C0_SDA_SENS - Location 6
                      | GPIO_P_MODEH_MODE13_WIREDANDPULLUPFILTER    // I2C0_SCL_SENS - Location 6
                      | GPIO_P_MODEH_MODE14_DISABLED    // NR
                      | GPIO_P_MODEH_MODE15_INPUTPULLFILTER;   // MAG_ALERT
    GPIO->P[4].DOUT   = BIT(4);
    1b4e:	2010      	movs	r0, #16
    1b50:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
    GPIO->P[4].OVTDIS = 0;
    1b54:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    // Port F
    GPIO->P[5].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    1b58:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[5].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL     // DBG_SWCLK - Location 0
    1b5c:	4915      	ldr	r1, [pc, #84]	; (1bb4 <gpio_init+0xe4>)
    1b5e:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
                      | GPIO_P_MODEL_MODE3_DISABLED     // NC
                      | GPIO_P_MODEL_MODE4_DISABLED     // NC
                      | GPIO_P_MODEL_MODE5_DISABLED     // NR
                      | GPIO_P_MODEL_MODE6_PUSHPULL     // QSPI0_SCLK - Location 0
                      | GPIO_P_MODEL_MODE7_PUSHPULL;    // QSPI0_CS0 - Location 0
    GPIO->P[5].MODEH  = GPIO_P_MODEH_MODE8_DISABLED     // NR
    1b62:	f44f 314c 	mov.w	r1, #208896	; 0x33000
    1b66:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
                      | GPIO_P_MODEH_MODE11_INPUTPULLFILTER    // VREG_ERR
                      | GPIO_P_MODEH_MODE12_INPUTPULLFILTER    // VIN_DETECT
                      | GPIO_P_MODEH_MODE13_DISABLED    // NC
                      | GPIO_P_MODEH_MODE14_DISABLED    // NC
                      | GPIO_P_MODEH_MODE15_DISABLED;   // NC
    GPIO->P[5].DOUT   = BIT(7);
    1b6a:	2180      	movs	r1, #128	; 0x80
    1b6c:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
    GPIO->P[5].OVTDIS = 0;
    1b70:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    // Debugger Route
    GPIO->ROUTEPEN &= ~(GPIO_ROUTEPEN_TDIPEN | GPIO_ROUTEPEN_TDOPEN);   // Disable JTAG
    1b74:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    1b78:	f021 010c 	bic.w	r1, r1, #12
    1b7c:	f8c3 1440 	str.w	r1, [r3, #1088]	; 0x440
    GPIO->ROUTEPEN |= GPIO_ROUTEPEN_SWVPEN;                             // Enable SWO
    1b80:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    1b84:	4301      	orrs	r1, r0
    1b86:	f8c3 1440 	str.w	r1, [r3, #1088]	; 0x440
    GPIO->ROUTELOC0 = GPIO_ROUTELOC0_SWVLOC_LOC0;                       // SWO on PF2
    1b8a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
    1b8e:	bd10      	pop	{r4, pc}
    1b90:	400e4000 	.word	0x400e4000
    1b94:	40088000 	.word	0x40088000
    1b98:	03044414 	.word	0x03044414
    1b9c:	44340000 	.word	0x44340000
    1ba0:	000bb400 	.word	0x000bb400
    1ba4:	33001414 	.word	0x33001414
    1ba8:	11114414 	.word	0x11114414
    1bac:	00044440 	.word	0x00044440
    1bb0:	30bb4430 	.word	0x30bb4430
    1bb4:	44000444 	.word	0x44000444

00001bb8 <get_device_name>:

    return ulFreeRAM;
}

void get_device_name(char *pszDeviceName, uint32_t ulDeviceNameSize)
{
    1bb8:	b570      	push	{r4, r5, r6, lr}
    uint8_t ubFamily = (DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK) >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT;
    1bba:	4c1b      	ldr	r4, [pc, #108]	; (1c28 <get_device_name+0x70>)
    1bbc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    const char* szFamily = "?";

    switch(ubFamily)
    1bbe:	f3c3 4307 	ubfx	r3, r3, #16, #8
    1bc2:	3b10      	subs	r3, #16
    1bc4:	2b6a      	cmp	r3, #106	; 0x6a
    1bc6:	bf96      	itet	ls
    1bc8:	4a18      	ldrls	r2, [pc, #96]	; (1c2c <get_device_name+0x74>)
    uint8_t ubFamily = (DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK) >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT;
    1bca:	4b19      	ldrhi	r3, [pc, #100]	; (1c30 <get_device_name+0x78>)
    1bcc:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
        case 0x78: szFamily = "EZR32LG";    break;
        case 0x79: szFamily = "EZR32WG";    break;
        case 0x7A: szFamily = "EZR32HG";    break;
    }

    uint8_t ubPackage = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PKGTYPE_MASK) >> _DEVINFO_MEMINFO_PKGTYPE_SHIFT;
    1bd0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1bd2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    char cPackage = '?';

    if(ubPackage == 74)
    1bd6:	2a4a      	cmp	r2, #74	; 0x4a
{
    1bd8:	b086      	sub	sp, #24
    if(ubPackage == 74)
    1bda:	d020      	beq.n	1c1e <get_device_name+0x66>
        cPackage = '?';
    else if(ubPackage == 76)
    1bdc:	2a4c      	cmp	r2, #76	; 0x4c
    1bde:	d005      	beq.n	1bec <get_device_name+0x34>
        cPackage = 'L';
    else if(ubPackage == 77)
    1be0:	2a4d      	cmp	r2, #77	; 0x4d
    1be2:	d003      	beq.n	1bec <get_device_name+0x34>
        cPackage = 'M';
    else if(ubPackage == 81)
        cPackage = 'Q';
    1be4:	2a51      	cmp	r2, #81	; 0x51
    1be6:	bf14      	ite	ne
    1be8:	223f      	movne	r2, #63	; 0x3f
    1bea:	2251      	moveq	r2, #81	; 0x51

    uint8_t ubTempGrade = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_TEMPGRADE_MASK) >> _DEVINFO_MEMINFO_TEMPGRADE_SHIFT;
    1bec:	6b65      	ldr	r5, [r4, #52]	; 0x34
    char cTempGrade = '?';

    if(ubTempGrade == 0)
    1bee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    1bf2:	d016      	beq.n	1c22 <get_device_name+0x6a>
        cTempGrade = 'G';
    else if(ubTempGrade == 1)
        cTempGrade = 'I';
    else if(ubTempGrade == 2)
        cTempGrade = '?';
    1bf4:	2d01      	cmp	r5, #1
    1bf6:	bf0c      	ite	eq
    1bf8:	2649      	moveq	r6, #73	; 0x49
    1bfa:	263f      	movne	r6, #63	; 0x3f
    else if(ubTempGrade == 3)
        cTempGrade = '?';

    uint16_t usPartNumber = (DEVINFO->PART & _DEVINFO_PART_DEVICE_NUMBER_MASK) >> _DEVINFO_PART_DEVICE_NUMBER_SHIFT;
    1bfc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    uint8_t ubPinCount = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PINCOUNT_MASK) >> _DEVINFO_MEMINFO_PINCOUNT_SHIFT;
    1bfe:	6b64      	ldr	r4, [r4, #52]	; 0x34

    snprintf(pszDeviceName, ulDeviceNameSize, "%s%huF%hu%c%c%hhu", szFamily, usPartNumber, FLASH_SIZE >> 10, cTempGrade, cPackage, ubPinCount);
    1c00:	9602      	str	r6, [sp, #8]
    1c02:	f3c4 4407 	ubfx	r4, r4, #16, #8
    1c06:	e9cd 2403 	strd	r2, r4, [sp, #12]
    1c0a:	b2ad      	uxth	r5, r5
    1c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1c10:	9201      	str	r2, [sp, #4]
    1c12:	9500      	str	r5, [sp, #0]
    1c14:	4a07      	ldr	r2, [pc, #28]	; (1c34 <get_device_name+0x7c>)
    1c16:	f002 f9dd 	bl	3fd4 <snprintf>
}
    1c1a:	b006      	add	sp, #24
    1c1c:	bd70      	pop	{r4, r5, r6, pc}
        cPackage = '?';
    1c1e:	223f      	movs	r2, #63	; 0x3f
    1c20:	e7e4      	b.n	1bec <get_device_name+0x34>
        cTempGrade = 'G';
    1c22:	2647      	movs	r6, #71	; 0x47
    1c24:	e7ea      	b.n	1bfc <get_device_name+0x44>
    1c26:	bf00      	nop
    1c28:	0fe081b0 	.word	0x0fe081b0
    1c2c:	000044dc 	.word	0x000044dc
    1c30:	00004692 	.word	0x00004692
    1c34:	00004694 	.word	0x00004694

00001c38 <init>:

    return usRevision;
}

int init()
{
    1c38:	b570      	push	{r4, r5, r6, lr}
    1c3a:	ed2d 8b04 	vpush	{d8-d9}
    emu_init(1); // Init EMU
    1c3e:	2001      	movs	r0, #1
{
    1c40:	b08e      	sub	sp, #56	; 0x38
    emu_init(1); // Init EMU
    1c42:	f7ff f951 	bl	ee8 <emu_init>
    cmu_hfxo_startup_calib(0x200, 0x087); // Config HFXO Startup for 1280 uA, 20.04 pF
    cmu_hfxo_steady_calib(0x006, 0x087); // Config HFXO Steady state for 12 uA, 20.04 pF

    cmu_init(); // Init Clocks

    cmu_ushfrco_calib(1, USHFRCO_CALIB_8M, 8000000); // Enable and calibrate USHFRCO for 8 MHz
    1c46:	4cd4      	ldr	r4, [pc, #848]	; (1f98 <init+0x360>)
    cmu_hfxo_startup_calib(0x200, 0x087); // Config HFXO Startup for 1280 uA, 20.04 pF
    1c48:	2187      	movs	r1, #135	; 0x87
    1c4a:	f44f 7000 	mov.w	r0, #512	; 0x200
    1c4e:	f001 faff 	bl	3250 <cmu_hfxo_startup_calib>
    cmu_hfxo_steady_calib(0x006, 0x087); // Config HFXO Steady state for 12 uA, 20.04 pF
    1c52:	2187      	movs	r1, #135	; 0x87
    1c54:	2006      	movs	r0, #6
    1c56:	f001 fb11 	bl	327c <cmu_hfxo_steady_calib>
    cmu_init(); // Init Clocks
    1c5a:	f001 f9db 	bl	3014 <cmu_init>
    cmu_ushfrco_calib(1, USHFRCO_CALIB_8M, 8000000); // Enable and calibrate USHFRCO for 8 MHz
    1c5e:	f8d4 126c 	ldr.w	r1, [r4, #620]	; 0x26c
    1c62:	4ace      	ldr	r2, [pc, #824]	; (1f9c <init+0x364>)
    1c64:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    1c68:	2001      	movs	r0, #1
    1c6a:	f001 faa1 	bl	31b0 <cmu_ushfrco_calib>
    cmu_auxhfrco_calib(1, AUXHFRCO_CALIB_32M, 32000000); // Enable and calibrate AUXHFRCO for 32 MHz
    1c6e:	4acc      	ldr	r2, [pc, #816]	; (1fa0 <init+0x368>)
    1c70:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    1c74:	2001      	movs	r0, #1
    1c76:	f001 fac7 	bl	3208 <cmu_auxhfrco_calib>

    cmu_update_clocks(); // Update Clocks
    1c7a:	f000 ff4b 	bl	2b14 <cmu_update_clocks>

    dbg_init(); // Init Debug module
    1c7e:	f7ff fa41 	bl	1104 <dbg_init>
    dbg_swo_config(BIT(0) | BIT(1), 2000000); // Init SWO channels 0 and 1 at 2 MHz
    1c82:	49c8      	ldr	r1, [pc, #800]	; (1fa4 <init+0x36c>)
    1c84:	2003      	movs	r0, #3
    1c86:	f7ff fa45 	bl	1114 <dbg_swo_config>

    msc_init(); // Init Flash, RAM and caches
    1c8a:	f7ff fcbe 	bl	160a <msc_init>

    systick_init(); // Init system tick
    1c8e:	f000 fda7 	bl	27e0 <systick_init>

    gpio_init(); // Init GPIOs
    1c92:	f7ff ff1d 	bl	1ad0 <gpio_init>
    rtcc_init(); // Init RTCC
    1c96:	f000 fd3d 	bl	2714 <rtcc_init>
    trng_init(); // Init TRNG
    1c9a:	f000 fd6d 	bl	2778 <trng_init>
    crypto_init(); // Init Crypto engine
    1c9e:	f7ff fa7f 	bl	11a0 <crypto_init>
    crc_init(); // Init CRC calculation unit
    1ca2:	f7ff f9fb 	bl	109c <crc_init>
    adc_init(); // Init ADCs
    1ca6:	f001 fba5 	bl	33f4 <adc_init>
    qspi_init(); // Init QSPI memory
    1caa:	f7ff fec5 	bl	1a38 <qspi_init>

    float fAVDDHighThresh, fAVDDLowThresh;
    float fDVDDHighThresh, fDVDDLowThresh;
    float fIOVDDHighThresh, fIOVDDLowThresh;

    emu_vmon_avdd_config(1, 3.1f, &fAVDDLowThresh, 3.22f, &fAVDDHighThresh); // Enable AVDD monitor
    1cae:	eddf 0abe 	vldr	s1, [pc, #760]	; 1fa8 <init+0x370>
    1cb2:	ed9f 0abe 	vldr	s0, [pc, #760]	; 1fac <init+0x374>
    1cb6:	aa02      	add	r2, sp, #8
    1cb8:	a903      	add	r1, sp, #12
    1cba:	2001      	movs	r0, #1
    1cbc:	f7ff f92e 	bl	f1c <emu_vmon_avdd_config>
    emu_vmon_dvdd_config(1, 2.5f, &fDVDDLowThresh); // Enable DVDD monitor
    1cc0:	a904      	add	r1, sp, #16
    1cc2:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
    1cc6:	2001      	movs	r0, #1
    1cc8:	f7ff f97c 	bl	fc4 <emu_vmon_dvdd_config>
    emu_vmon_iovdd_config(1, 3.15f, &fIOVDDLowThresh); // Enable IOVDD monitor
    1ccc:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 1fb0 <init+0x378>
    1cd0:	a905      	add	r1, sp, #20
    1cd2:	2001      	movs	r0, #1
    1cd4:	f7ff f9ac 	bl	1030 <emu_vmon_iovdd_config>

    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    1cd8:	eddf 7ab6 	vldr	s15, [pc, #728]	; 1fb4 <init+0x37c>
    1cdc:	eddd 9a04 	vldr	s19, [sp, #16]
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    1ce0:	ed9d 9a05 	vldr	s18, [sp, #20]

    usart0_init(18000000, 0, USART_SPI_MSB_FIRST, 2, 2, 2);  // SPI0 at 18MHz on Location 2 MISO:PC10 MOSI:PC11 CLK:PC9 ESP8266 WIFI-COPROCESSOR
    1ce4:	48b4      	ldr	r0, [pc, #720]	; (1fb8 <init+0x380>)
    1ce6:	2302      	movs	r3, #2
    1ce8:	e9cd 3300 	strd	r3, r3, [sp]
    1cec:	2201      	movs	r2, #1
    1cee:	2100      	movs	r1, #0
    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    1cf0:	ee79 9aa7 	vadd.f32	s19, s19, s15
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    1cf4:	ee39 9a27 	vadd.f32	s18, s18, s15
    usart0_init(18000000, 0, USART_SPI_MSB_FIRST, 2, 2, 2);  // SPI0 at 18MHz on Location 2 MISO:PC10 MOSI:PC11 CLK:PC9 ESP8266 WIFI-COPROCESSOR
    1cf8:	f001 fad6 	bl	32a8 <usart0_init>
    //usart1_init(18000000, 0, USART_SPI_MSB_FIRST, 1, 1, 1);  // SPI1 at 18MHz on Location 1 MISO:PD1 MOSI:PD0 CLK:PD2 ILI9488 Display
    //usart2_init(115200, 0, UART_FRAME_STOPBITS_ONE, 0, 0, 0); // USART2 at 115200Baud on Location 0 RTS-PC0 CTS-PC1 TX-PC2 RX-PC3 GSM
    //usart3_init(10000000, 0, USART_SPI_MSB_FIRST, 0, 0, 0); // SPI3 at 10MHz on Location 0 MISO-PA1 MOSI-PA0 CLK-PA2 RFM

    i2c0_init(I2C_NORMAL, 6, 6); // Init I2C0 at 100 kHz on location 6 SCL:SDA PE13:PE12 Sensors
    1cfc:	2206      	movs	r2, #6
    1cfe:	4611      	mov	r1, r2
    1d00:	2000      	movs	r0, #0
    1d02:	f000 fd99 	bl	2838 <i2c0_init>
    i2c1_init(I2C_NORMAL, 1, 1); // Init I2C1 at 100 kHz on location 1 SCL:SDA PB12:PB11 TFT Touch Controller
    1d06:	2201      	movs	r2, #1
    1d08:	4611      	mov	r1, r2
    1d0a:	2000      	movs	r0, #0
    1d0c:	f000 fe4e 	bl	29ac <i2c1_init>


    char szDeviceName[32];

    get_device_name(szDeviceName, 32);
    1d10:	a806      	add	r0, sp, #24
    1d12:	2120      	movs	r1, #32
    1d14:	f7ff ff50 	bl	1bb8 <get_device_name>

    DBGPRINTLN_CTX("Device: %s", szDeviceName);
    1d18:	aa06      	add	r2, sp, #24
    1d1a:	49a8      	ldr	r1, [pc, #672]	; (1fbc <init+0x384>)
    1d1c:	48a8      	ldr	r0, [pc, #672]	; (1fc0 <init+0x388>)
    1d1e:	f002 f945 	bl	3fac <printf>
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    1d22:	49a8      	ldr	r1, [pc, #672]	; (1fc4 <init+0x38c>)
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    1d24:	48a8      	ldr	r0, [pc, #672]	; (1fc8 <init+0x390>)
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    1d26:	690b      	ldr	r3, [r1, #16]
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    1d28:	698a      	ldr	r2, [r1, #24]
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    1d2a:	69c9      	ldr	r1, [r1, #28]
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    1d2c:	021b      	lsls	r3, r3, #8
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    1d2e:	f3c1 1103 	ubfx	r1, r1, #4, #4
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    1d32:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    1d36:	430b      	orrs	r3, r1
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    1d38:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    1d3c:	431a      	orrs	r2, r3
    1d3e:	499f      	ldr	r1, [pc, #636]	; (1fbc <init+0x384>)
    1d40:	f002 f934 	bl	3fac <printf>
    DBGPRINTLN_CTX("Calibration temperature: %hhu C", (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT);
    1d44:	6822      	ldr	r2, [r4, #0]
    1d46:	499d      	ldr	r1, [pc, #628]	; (1fbc <init+0x384>)
    1d48:	48a0      	ldr	r0, [pc, #640]	; (1fcc <init+0x394>)
    1d4a:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1d4e:	f002 f92d 	bl	3fac <printf>
    DBGPRINTLN_CTX("Flash Size: %hu kB", FLASH_SIZE >> 10);
    1d52:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1d56:	4999      	ldr	r1, [pc, #612]	; (1fbc <init+0x384>)
    1d58:	489d      	ldr	r0, [pc, #628]	; (1fd0 <init+0x398>)
    1d5a:	f002 f927 	bl	3fac <printf>
    DBGPRINTLN_CTX("RAM Size: %hu kB", SRAM_SIZE >> 10);
    1d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
    1d62:	4996      	ldr	r1, [pc, #600]	; (1fbc <init+0x384>)
    1d64:	489b      	ldr	r0, [pc, #620]	; (1fd4 <init+0x39c>)
    1d66:	f002 f921 	bl	3fac <printf>
    void *pCurrentHeap = malloc(1);
    1d6a:	2001      	movs	r0, #1
    1d6c:	f002 f976 	bl	405c <malloc>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    1d70:	f3ef 8508 	mrs	r5, MSP
    uint32_t ulFreeRAM = (uint32_t)__get_MSP() - (uint32_t)pCurrentHeap;
    1d74:	1a2d      	subs	r5, r5, r0
    free(pCurrentHeap);
    1d76:	f002 f979 	bl	406c <free>
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    1d7a:	462a      	mov	r2, r5
    1d7c:	498f      	ldr	r1, [pc, #572]	; (1fbc <init+0x384>)
    1d7e:	4896      	ldr	r0, [pc, #600]	; (1fd8 <init+0x3a0>)
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);

    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    1d80:	eddf 8a96 	vldr	s17, [pc, #600]	; 1fdc <init+0x3a4>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    1d84:	ed9f 8a96 	vldr	s16, [pc, #600]	; 1fe0 <init+0x3a8>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);

    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    1d88:	4d96      	ldr	r5, [pc, #600]	; (1fe4 <init+0x3ac>)
    DBGPRINTLN_CTX("Scanning I2C bus 0...");

    for(uint8_t a = 0x08; a < 0x78; a++)
    {
        if(i2c0_write(a, 0, 0, I2C_STOP))
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    1d8a:	4e97      	ldr	r6, [pc, #604]	; (1fe8 <init+0x3b0>)
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    1d8c:	f002 f90e 	bl	3fac <printf>
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    1d90:	6c62      	ldr	r2, [r4, #68]	; 0x44
    1d92:	498a      	ldr	r1, [pc, #552]	; (1fbc <init+0x384>)
    1d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1d96:	4895      	ldr	r0, [pc, #596]	; (1fec <init+0x3b4>)
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    1d98:	4c95      	ldr	r4, [pc, #596]	; (1ff0 <init+0x3b8>)
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    1d9a:	f002 f907 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    1d9e:	2200      	movs	r2, #0
    1da0:	4b94      	ldr	r3, [pc, #592]	; (1ff4 <init+0x3bc>)
    1da2:	4986      	ldr	r1, [pc, #536]	; (1fbc <init+0x384>)
    1da4:	4894      	ldr	r0, [pc, #592]	; (1ff8 <init+0x3c0>)
    1da6:	f002 f901 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    1daa:	4b94      	ldr	r3, [pc, #592]	; (1ffc <init+0x3c4>)
    1dac:	edd3 7a00 	vldr	s15, [r3]
    1db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1db4:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1db8:	ee17 0a90 	vmov	r0, s15
    1dbc:	f7fe fb2c 	bl	418 <__aeabi_f2d>
    1dc0:	4602      	mov	r2, r0
    1dc2:	460b      	mov	r3, r1
    1dc4:	488e      	ldr	r0, [pc, #568]	; (2000 <init+0x3c8>)
    1dc6:	497d      	ldr	r1, [pc, #500]	; (1fbc <init+0x384>)
    1dc8:	f002 f8f0 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    1dcc:	4b8d      	ldr	r3, [pc, #564]	; (2004 <init+0x3cc>)
    1dce:	edd3 7a00 	vldr	s15, [r3]
    1dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1dd6:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1dda:	ee17 0a90 	vmov	r0, s15
    1dde:	f7fe fb1b 	bl	418 <__aeabi_f2d>
    1de2:	4602      	mov	r2, r0
    1de4:	460b      	mov	r3, r1
    1de6:	4888      	ldr	r0, [pc, #544]	; (2008 <init+0x3d0>)
    1de8:	4974      	ldr	r1, [pc, #464]	; (1fbc <init+0x384>)
    1dea:	f002 f8df 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    1dee:	4b87      	ldr	r3, [pc, #540]	; (200c <init+0x3d4>)
    1df0:	edd3 7a00 	vldr	s15, [r3]
    1df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1df8:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1dfc:	ee17 0a90 	vmov	r0, s15
    1e00:	f7fe fb0a 	bl	418 <__aeabi_f2d>
    1e04:	4602      	mov	r2, r0
    1e06:	460b      	mov	r3, r1
    1e08:	4881      	ldr	r0, [pc, #516]	; (2010 <init+0x3d8>)
    1e0a:	496c      	ldr	r1, [pc, #432]	; (1fbc <init+0x384>)
    1e0c:	f002 f8ce 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    1e10:	a35f      	add	r3, pc, #380	; (adr r3, 1f90 <init+0x358>)
    1e12:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e16:	4969      	ldr	r1, [pc, #420]	; (1fbc <init+0x384>)
    1e18:	487e      	ldr	r0, [pc, #504]	; (2014 <init+0x3dc>)
    1e1a:	f002 f8c7 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    1e1e:	4b7e      	ldr	r3, [pc, #504]	; (2018 <init+0x3e0>)
    1e20:	edd3 7a00 	vldr	s15, [r3]
    1e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e28:	eec7 7a88 	vdiv.f32	s15, s15, s16
    1e2c:	ee17 0a90 	vmov	r0, s15
    1e30:	f7fe faf2 	bl	418 <__aeabi_f2d>
    1e34:	4602      	mov	r2, r0
    1e36:	460b      	mov	r3, r1
    1e38:	4878      	ldr	r0, [pc, #480]	; (201c <init+0x3e4>)
    1e3a:	4960      	ldr	r1, [pc, #384]	; (1fbc <init+0x384>)
    1e3c:	f002 f8b6 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - ULFRCO Clock: %.3f kHz!", (float)ULFRCO_VALUE / 1000);
    1e40:	4b77      	ldr	r3, [pc, #476]	; (2020 <init+0x3e8>)
    1e42:	edd3 7a00 	vldr	s15, [r3]
    1e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e4a:	eec7 7a88 	vdiv.f32	s15, s15, s16
    1e4e:	ee17 0a90 	vmov	r0, s15
    1e52:	f7fe fae1 	bl	418 <__aeabi_f2d>
    1e56:	4602      	mov	r2, r0
    1e58:	460b      	mov	r3, r1
    1e5a:	4872      	ldr	r0, [pc, #456]	; (2024 <init+0x3ec>)
    1e5c:	4957      	ldr	r1, [pc, #348]	; (1fbc <init+0x384>)
    1e5e:	f002 f8a5 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFSRC Clock: %.1f MHz!", (float)HFSRC_CLOCK_FREQ / 1000000);
    1e62:	4b71      	ldr	r3, [pc, #452]	; (2028 <init+0x3f0>)
    1e64:	edd3 7a00 	vldr	s15, [r3]
    1e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e6c:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1e70:	ee17 0a90 	vmov	r0, s15
    1e74:	f7fe fad0 	bl	418 <__aeabi_f2d>
    1e78:	4602      	mov	r2, r0
    1e7a:	460b      	mov	r3, r1
    1e7c:	486b      	ldr	r0, [pc, #428]	; (202c <init+0x3f4>)
    1e7e:	494f      	ldr	r1, [pc, #316]	; (1fbc <init+0x384>)
    1e80:	f002 f894 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HF Clock: %.1f MHz!", (float)HF_CLOCK_FREQ / 1000000);
    1e84:	4b6a      	ldr	r3, [pc, #424]	; (2030 <init+0x3f8>)
    1e86:	edd3 7a00 	vldr	s15, [r3]
    1e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e8e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1e92:	ee17 0a90 	vmov	r0, s15
    1e96:	f7fe fabf 	bl	418 <__aeabi_f2d>
    1e9a:	4602      	mov	r2, r0
    1e9c:	460b      	mov	r3, r1
    1e9e:	4865      	ldr	r0, [pc, #404]	; (2034 <init+0x3fc>)
    1ea0:	4946      	ldr	r1, [pc, #280]	; (1fbc <init+0x384>)
    1ea2:	f002 f883 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFBUS Clock: %.1f MHz!", (float)HFBUS_CLOCK_FREQ / 1000000);
    1ea6:	4b64      	ldr	r3, [pc, #400]	; (2038 <init+0x400>)
    1ea8:	edd3 7a00 	vldr	s15, [r3]
    1eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1eb0:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1eb4:	ee17 0a90 	vmov	r0, s15
    1eb8:	f7fe faae 	bl	418 <__aeabi_f2d>
    1ebc:	4602      	mov	r2, r0
    1ebe:	460b      	mov	r3, r1
    1ec0:	485e      	ldr	r0, [pc, #376]	; (203c <init+0x404>)
    1ec2:	493e      	ldr	r1, [pc, #248]	; (1fbc <init+0x384>)
    1ec4:	f002 f872 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFCORE Clock: %.1f MHz!", (float)HFCORE_CLOCK_FREQ / 1000000);
    1ec8:	4b5d      	ldr	r3, [pc, #372]	; (2040 <init+0x408>)
    1eca:	edd3 7a00 	vldr	s15, [r3]
    1ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1ed2:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1ed6:	ee17 0a90 	vmov	r0, s15
    1eda:	f7fe fa9d 	bl	418 <__aeabi_f2d>
    1ede:	4602      	mov	r2, r0
    1ee0:	460b      	mov	r3, r1
    1ee2:	4858      	ldr	r0, [pc, #352]	; (2044 <init+0x40c>)
    1ee4:	4935      	ldr	r1, [pc, #212]	; (1fbc <init+0x384>)
    1ee6:	f002 f861 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFEXP Clock: %.1f MHz!", (float)HFEXP_CLOCK_FREQ / 1000000);
    1eea:	4b57      	ldr	r3, [pc, #348]	; (2048 <init+0x410>)
    1eec:	edd3 7a00 	vldr	s15, [r3]
    1ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1ef4:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1ef8:	ee17 0a90 	vmov	r0, s15
    1efc:	f7fe fa8c 	bl	418 <__aeabi_f2d>
    1f00:	4602      	mov	r2, r0
    1f02:	460b      	mov	r3, r1
    1f04:	4851      	ldr	r0, [pc, #324]	; (204c <init+0x414>)
    1f06:	492d      	ldr	r1, [pc, #180]	; (1fbc <init+0x384>)
    1f08:	f002 f850 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFPER Clock: %.1f MHz!", (float)HFPER_CLOCK_FREQ / 1000000);
    1f0c:	4b50      	ldr	r3, [pc, #320]	; (2050 <init+0x418>)
    1f0e:	edd3 7a00 	vldr	s15, [r3]
    1f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1f16:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1f1a:	ee17 0a90 	vmov	r0, s15
    1f1e:	f7fe fa7b 	bl	418 <__aeabi_f2d>
    1f22:	4602      	mov	r2, r0
    1f24:	460b      	mov	r3, r1
    1f26:	484b      	ldr	r0, [pc, #300]	; (2054 <init+0x41c>)
    1f28:	4924      	ldr	r1, [pc, #144]	; (1fbc <init+0x384>)
    1f2a:	f002 f83f 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFPERB Clock: %.1f MHz!", (float)HFPERB_CLOCK_FREQ / 1000000);
    1f2e:	4b4a      	ldr	r3, [pc, #296]	; (2058 <init+0x420>)
    1f30:	edd3 7a00 	vldr	s15, [r3]
    1f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1f38:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1f3c:	ee17 0a90 	vmov	r0, s15
    1f40:	f7fe fa6a 	bl	418 <__aeabi_f2d>
    1f44:	4602      	mov	r2, r0
    1f46:	460b      	mov	r3, r1
    1f48:	4844      	ldr	r0, [pc, #272]	; (205c <init+0x424>)
    1f4a:	491c      	ldr	r1, [pc, #112]	; (1fbc <init+0x384>)
    1f4c:	f002 f82e 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFPERC Clock: %.1f MHz!", (float)HFPERC_CLOCK_FREQ / 1000000);
    1f50:	4b43      	ldr	r3, [pc, #268]	; (2060 <init+0x428>)
    1f52:	edd3 7a00 	vldr	s15, [r3]
    1f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1f5a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1f5e:	ee17 0a90 	vmov	r0, s15
    1f62:	f7fe fa59 	bl	418 <__aeabi_f2d>
    1f66:	4602      	mov	r2, r0
    1f68:	460b      	mov	r3, r1
    1f6a:	483e      	ldr	r0, [pc, #248]	; (2064 <init+0x42c>)
    1f6c:	4913      	ldr	r1, [pc, #76]	; (1fbc <init+0x384>)
    1f6e:	f002 f81d 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - HFLE Clock: %.1f MHz!", (float)HFLE_CLOCK_FREQ / 1000000);
    1f72:	4b3d      	ldr	r3, [pc, #244]	; (2068 <init+0x430>)
    1f74:	edd3 7a00 	vldr	s15, [r3]
    1f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1f7c:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    1f80:	ee17 0a90 	vmov	r0, s15
    1f84:	f7fe fa48 	bl	418 <__aeabi_f2d>
    1f88:	4602      	mov	r2, r0
    1f8a:	460b      	mov	r3, r1
    1f8c:	e06e      	b.n	206c <init+0x434>
    1f8e:	bf00      	nop
    1f90:	e0000000 	.word	0xe0000000
    1f94:	4040624d 	.word	0x4040624d
    1f98:	0fe081b0 	.word	0x0fe081b0
    1f9c:	007a1200 	.word	0x007a1200
    1fa0:	01e84800 	.word	0x01e84800
    1fa4:	001e8480 	.word	0x001e8480
    1fa8:	404e147b 	.word	0x404e147b
    1fac:	40466666 	.word	0x40466666
    1fb0:	4049999a 	.word	0x4049999a
    1fb4:	3cd4fdf4 	.word	0x3cd4fdf4
    1fb8:	0112a880 	.word	0x0112a880
    1fbc:	00004688 	.word	0x00004688
    1fc0:	000046ad 	.word	0x000046ad
    1fc4:	e00fffd0 	.word	0xe00fffd0
    1fc8:	000046c1 	.word	0x000046c1
    1fcc:	000046e2 	.word	0x000046e2
    1fd0:	0000470b 	.word	0x0000470b
    1fd4:	00004727 	.word	0x00004727
    1fd8:	00004741 	.word	0x00004741
    1fdc:	49742400 	.word	0x49742400
    1fe0:	447a0000 	.word	0x447a0000
    1fe4:	000046a6 	.word	0x000046a6
    1fe8:	00004f11 	.word	0x00004f11
    1fec:	0000475a 	.word	0x0000475a
    1ff0:	000046aa 	.word	0x000046aa
    1ff4:	40200000 	.word	0x40200000
    1ff8:	00004778 	.word	0x00004778
    1ffc:	20000008 	.word	0x20000008
    2000:	0000479d 	.word	0x0000479d
    2004:	20000014 	.word	0x20000014
    2008:	000047c3 	.word	0x000047c3
    200c:	20000004 	.word	0x20000004
    2010:	000047eb 	.word	0x000047eb
    2014:	00004814 	.word	0x00004814
    2018:	2000000c 	.word	0x2000000c
    201c:	00004839 	.word	0x00004839
    2020:	20000010 	.word	0x20000010
    2024:	0000485f 	.word	0x0000485f
    2028:	2000013c 	.word	0x2000013c
    202c:	00004886 	.word	0x00004886
    2030:	20000164 	.word	0x20000164
    2034:	000048ac 	.word	0x000048ac
    2038:	20000140 	.word	0x20000140
    203c:	000048cf 	.word	0x000048cf
    2040:	20000128 	.word	0x20000128
    2044:	000048f5 	.word	0x000048f5
    2048:	2000014c 	.word	0x2000014c
    204c:	0000491c 	.word	0x0000491c
    2050:	2000015c 	.word	0x2000015c
    2054:	00004942 	.word	0x00004942
    2058:	20000150 	.word	0x20000150
    205c:	00004968 	.word	0x00004968
    2060:	20000148 	.word	0x20000148
    2064:	0000498f 	.word	0x0000498f
    2068:	20000114 	.word	0x20000114
    206c:	48d4      	ldr	r0, [pc, #848]	; (23c0 <init+0x788>)
    206e:	49d5      	ldr	r1, [pc, #852]	; (23c4 <init+0x78c>)
    2070:	f001 ff9c 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - QSPI Clock: %.1f MHz!", (float)QSPI_CLOCK_FREQ / 1000000);
    2074:	4bd4      	ldr	r3, [pc, #848]	; (23c8 <init+0x790>)
    2076:	edd3 7a00 	vldr	s15, [r3]
    207a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    207e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2082:	ee17 0a90 	vmov	r0, s15
    2086:	f7fe f9c7 	bl	418 <__aeabi_f2d>
    208a:	4602      	mov	r2, r0
    208c:	460b      	mov	r3, r1
    208e:	48cf      	ldr	r0, [pc, #828]	; (23cc <init+0x794>)
    2090:	49cc      	ldr	r1, [pc, #816]	; (23c4 <init+0x78c>)
    2092:	f001 ff8b 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - SDIO Clock: %.1f MHz!", (float)SDIO_CLOCK_FREQ / 1000000);
    2096:	4bce      	ldr	r3, [pc, #824]	; (23d0 <init+0x798>)
    2098:	edd3 7a00 	vldr	s15, [r3]
    209c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    20a0:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    20a4:	ee17 0a90 	vmov	r0, s15
    20a8:	f7fe f9b6 	bl	418 <__aeabi_f2d>
    20ac:	4602      	mov	r2, r0
    20ae:	460b      	mov	r3, r1
    20b0:	48c8      	ldr	r0, [pc, #800]	; (23d4 <init+0x79c>)
    20b2:	49c4      	ldr	r1, [pc, #784]	; (23c4 <init+0x78c>)
    20b4:	f001 ff7a 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - USB Clock: %.1f MHz!", (float)USB_CLOCK_FREQ / 1000000);
    20b8:	4bc7      	ldr	r3, [pc, #796]	; (23d8 <init+0x7a0>)
    20ba:	edd3 7a00 	vldr	s15, [r3]
    20be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    20c2:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    20c6:	ee17 0a90 	vmov	r0, s15
    20ca:	f7fe f9a5 	bl	418 <__aeabi_f2d>
    20ce:	4602      	mov	r2, r0
    20d0:	460b      	mov	r3, r1
    20d2:	48c2      	ldr	r0, [pc, #776]	; (23dc <init+0x7a4>)
    20d4:	49bb      	ldr	r1, [pc, #748]	; (23c4 <init+0x78c>)
    20d6:	f001 ff69 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - ADC0 Clock: %.1f MHz!", (float)ADC0_CLOCK_FREQ / 1000000);
    20da:	4bc1      	ldr	r3, [pc, #772]	; (23e0 <init+0x7a8>)
    20dc:	edd3 7a00 	vldr	s15, [r3]
    20e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    20e4:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    20e8:	ee17 0a90 	vmov	r0, s15
    20ec:	f7fe f994 	bl	418 <__aeabi_f2d>
    20f0:	4602      	mov	r2, r0
    20f2:	460b      	mov	r3, r1
    20f4:	48bb      	ldr	r0, [pc, #748]	; (23e4 <init+0x7ac>)
    20f6:	49b3      	ldr	r1, [pc, #716]	; (23c4 <init+0x78c>)
    20f8:	f001 ff58 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - ADC1 Clock: %.1f MHz!", (float)ADC1_CLOCK_FREQ / 1000000);
    20fc:	4bba      	ldr	r3, [pc, #744]	; (23e8 <init+0x7b0>)
    20fe:	edd3 7a00 	vldr	s15, [r3]
    2102:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2106:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    210a:	ee17 0a90 	vmov	r0, s15
    210e:	f7fe f983 	bl	418 <__aeabi_f2d>
    2112:	4602      	mov	r2, r0
    2114:	460b      	mov	r3, r1
    2116:	48b5      	ldr	r0, [pc, #724]	; (23ec <init+0x7b4>)
    2118:	49aa      	ldr	r1, [pc, #680]	; (23c4 <init+0x78c>)
    211a:	f001 ff47 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - DBG Clock: %.1f MHz!", (float)DBG_CLOCK_FREQ / 1000000);
    211e:	4bb4      	ldr	r3, [pc, #720]	; (23f0 <init+0x7b8>)
    2120:	edd3 7a00 	vldr	s15, [r3]
    2124:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2128:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    212c:	ee17 0a90 	vmov	r0, s15
    2130:	f7fe f972 	bl	418 <__aeabi_f2d>
    2134:	4602      	mov	r2, r0
    2136:	460b      	mov	r3, r1
    2138:	48ae      	ldr	r0, [pc, #696]	; (23f4 <init+0x7bc>)
    213a:	49a2      	ldr	r1, [pc, #648]	; (23c4 <init+0x78c>)
    213c:	f001 ff36 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - AUX Clock: %.1f MHz!", (float)AUX_CLOCK_FREQ / 1000000);
    2140:	4bad      	ldr	r3, [pc, #692]	; (23f8 <init+0x7c0>)
    2142:	edd3 7a00 	vldr	s15, [r3]
    2146:	eef8 7a67 	vcvt.f32.u32	s15, s15
    214a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    214e:	ee17 0a90 	vmov	r0, s15
    2152:	f7fe f961 	bl	418 <__aeabi_f2d>
    2156:	4602      	mov	r2, r0
    2158:	460b      	mov	r3, r1
    215a:	48a8      	ldr	r0, [pc, #672]	; (23fc <init+0x7c4>)
    215c:	4999      	ldr	r1, [pc, #612]	; (23c4 <init+0x78c>)
    215e:	f001 ff25 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LFA Clock: %.3f kHz!", (float)LFA_CLOCK_FREQ / 1000);
    2162:	4ba7      	ldr	r3, [pc, #668]	; (2400 <init+0x7c8>)
    2164:	edd3 7a00 	vldr	s15, [r3]
    2168:	eef8 7a67 	vcvt.f32.u32	s15, s15
    216c:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2170:	ee17 0a90 	vmov	r0, s15
    2174:	f7fe f950 	bl	418 <__aeabi_f2d>
    2178:	4602      	mov	r2, r0
    217a:	460b      	mov	r3, r1
    217c:	48a1      	ldr	r0, [pc, #644]	; (2404 <init+0x7cc>)
    217e:	4991      	ldr	r1, [pc, #580]	; (23c4 <init+0x78c>)
    2180:	f001 ff14 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LESENSE Clock: %.3f kHz!", (float)LESENSE_CLOCK_FREQ / 1000);
    2184:	4ba0      	ldr	r3, [pc, #640]	; (2408 <init+0x7d0>)
    2186:	edd3 7a00 	vldr	s15, [r3]
    218a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    218e:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2192:	ee17 0a90 	vmov	r0, s15
    2196:	f7fe f93f 	bl	418 <__aeabi_f2d>
    219a:	4602      	mov	r2, r0
    219c:	460b      	mov	r3, r1
    219e:	489b      	ldr	r0, [pc, #620]	; (240c <init+0x7d4>)
    21a0:	4988      	ldr	r1, [pc, #544]	; (23c4 <init+0x78c>)
    21a2:	f001 ff03 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - RTC Clock: %.3f kHz!", (float)RTC_CLOCK_FREQ / 1000);
    21a6:	4b9a      	ldr	r3, [pc, #616]	; (2410 <init+0x7d8>)
    21a8:	edd3 7a00 	vldr	s15, [r3]
    21ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    21b0:	eec7 7a88 	vdiv.f32	s15, s15, s16
    21b4:	ee17 0a90 	vmov	r0, s15
    21b8:	f7fe f92e 	bl	418 <__aeabi_f2d>
    21bc:	4602      	mov	r2, r0
    21be:	460b      	mov	r3, r1
    21c0:	4894      	ldr	r0, [pc, #592]	; (2414 <init+0x7dc>)
    21c2:	4980      	ldr	r1, [pc, #512]	; (23c4 <init+0x78c>)
    21c4:	f001 fef2 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LCD Clock: %.3f kHz!", (float)LCD_CLOCK_FREQ / 1000);
    21c8:	4b93      	ldr	r3, [pc, #588]	; (2418 <init+0x7e0>)
    21ca:	edd3 7a00 	vldr	s15, [r3]
    21ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
    21d2:	eec7 7a88 	vdiv.f32	s15, s15, s16
    21d6:	ee17 0a90 	vmov	r0, s15
    21da:	f7fe f91d 	bl	418 <__aeabi_f2d>
    21de:	4602      	mov	r2, r0
    21e0:	460b      	mov	r3, r1
    21e2:	488e      	ldr	r0, [pc, #568]	; (241c <init+0x7e4>)
    21e4:	4977      	ldr	r1, [pc, #476]	; (23c4 <init+0x78c>)
    21e6:	f001 fee1 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LETIMER0 Clock: %.3f kHz!", (float)LETIMER0_CLOCK_FREQ / 1000);
    21ea:	4b8d      	ldr	r3, [pc, #564]	; (2420 <init+0x7e8>)
    21ec:	edd3 7a00 	vldr	s15, [r3]
    21f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    21f4:	eec7 7a88 	vdiv.f32	s15, s15, s16
    21f8:	ee17 0a90 	vmov	r0, s15
    21fc:	f7fe f90c 	bl	418 <__aeabi_f2d>
    2200:	4602      	mov	r2, r0
    2202:	460b      	mov	r3, r1
    2204:	4887      	ldr	r0, [pc, #540]	; (2424 <init+0x7ec>)
    2206:	496f      	ldr	r1, [pc, #444]	; (23c4 <init+0x78c>)
    2208:	f001 fed0 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LETIMER1 Clock: %.3f kHz!", (float)LETIMER1_CLOCK_FREQ / 1000);
    220c:	4b86      	ldr	r3, [pc, #536]	; (2428 <init+0x7f0>)
    220e:	edd3 7a00 	vldr	s15, [r3]
    2212:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2216:	eec7 7a88 	vdiv.f32	s15, s15, s16
    221a:	ee17 0a90 	vmov	r0, s15
    221e:	f7fe f8fb 	bl	418 <__aeabi_f2d>
    2222:	4602      	mov	r2, r0
    2224:	460b      	mov	r3, r1
    2226:	4881      	ldr	r0, [pc, #516]	; (242c <init+0x7f4>)
    2228:	4966      	ldr	r1, [pc, #408]	; (23c4 <init+0x78c>)
    222a:	f001 febf 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LFB Clock: %.3f kHz!", (float)LFB_CLOCK_FREQ / 1000);
    222e:	4b80      	ldr	r3, [pc, #512]	; (2430 <init+0x7f8>)
    2230:	edd3 7a00 	vldr	s15, [r3]
    2234:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2238:	eec7 7a88 	vdiv.f32	s15, s15, s16
    223c:	ee17 0a90 	vmov	r0, s15
    2240:	f7fe f8ea 	bl	418 <__aeabi_f2d>
    2244:	4602      	mov	r2, r0
    2246:	460b      	mov	r3, r1
    2248:	487a      	ldr	r0, [pc, #488]	; (2434 <init+0x7fc>)
    224a:	495e      	ldr	r1, [pc, #376]	; (23c4 <init+0x78c>)
    224c:	f001 feae 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LEUART0 Clock: %.3f kHz!", (float)LEUART0_CLOCK_FREQ / 1000);
    2250:	4b79      	ldr	r3, [pc, #484]	; (2438 <init+0x800>)
    2252:	edd3 7a00 	vldr	s15, [r3]
    2256:	eef8 7a67 	vcvt.f32.u32	s15, s15
    225a:	eec7 7a88 	vdiv.f32	s15, s15, s16
    225e:	ee17 0a90 	vmov	r0, s15
    2262:	f7fe f8d9 	bl	418 <__aeabi_f2d>
    2266:	4602      	mov	r2, r0
    2268:	460b      	mov	r3, r1
    226a:	4874      	ldr	r0, [pc, #464]	; (243c <init+0x804>)
    226c:	4955      	ldr	r1, [pc, #340]	; (23c4 <init+0x78c>)
    226e:	f001 fe9d 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LEUART1 Clock: %.3f kHz!", (float)LEUART1_CLOCK_FREQ / 1000);
    2272:	4b73      	ldr	r3, [pc, #460]	; (2440 <init+0x808>)
    2274:	edd3 7a00 	vldr	s15, [r3]
    2278:	eef8 7a67 	vcvt.f32.u32	s15, s15
    227c:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2280:	ee17 0a90 	vmov	r0, s15
    2284:	f7fe f8c8 	bl	418 <__aeabi_f2d>
    2288:	4602      	mov	r2, r0
    228a:	460b      	mov	r3, r1
    228c:	486d      	ldr	r0, [pc, #436]	; (2444 <init+0x80c>)
    228e:	494d      	ldr	r1, [pc, #308]	; (23c4 <init+0x78c>)
    2290:	f001 fe8c 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - SYSTICK Clock: %.3f kHz!", (float)SYSTICK_CLOCK_FREQ / 1000);
    2294:	4b6c      	ldr	r3, [pc, #432]	; (2448 <init+0x810>)
    2296:	edd3 7a00 	vldr	s15, [r3]
    229a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    229e:	eec7 7a88 	vdiv.f32	s15, s15, s16
    22a2:	ee17 0a90 	vmov	r0, s15
    22a6:	f7fe f8b7 	bl	418 <__aeabi_f2d>
    22aa:	4602      	mov	r2, r0
    22ac:	460b      	mov	r3, r1
    22ae:	4867      	ldr	r0, [pc, #412]	; (244c <init+0x814>)
    22b0:	4944      	ldr	r1, [pc, #272]	; (23c4 <init+0x78c>)
    22b2:	f001 fe7b 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - CSEN Clock: %.3f kHz!", (float)CSEN_CLOCK_FREQ / 1000);
    22b6:	4b66      	ldr	r3, [pc, #408]	; (2450 <init+0x818>)
    22b8:	edd3 7a00 	vldr	s15, [r3]
    22bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    22c0:	eec7 7a88 	vdiv.f32	s15, s15, s16
    22c4:	ee17 0a90 	vmov	r0, s15
    22c8:	f7fe f8a6 	bl	418 <__aeabi_f2d>
    22cc:	4602      	mov	r2, r0
    22ce:	460b      	mov	r3, r1
    22d0:	4860      	ldr	r0, [pc, #384]	; (2454 <init+0x81c>)
    22d2:	493c      	ldr	r1, [pc, #240]	; (23c4 <init+0x78c>)
    22d4:	f001 fe6a 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LFC Clock: %.3f kHz!", (float)LFC_CLOCK_FREQ / 1000);
    22d8:	4b5f      	ldr	r3, [pc, #380]	; (2458 <init+0x820>)
    22da:	edd3 7a00 	vldr	s15, [r3]
    22de:	eef8 7a67 	vcvt.f32.u32	s15, s15
    22e2:	eec7 7a88 	vdiv.f32	s15, s15, s16
    22e6:	ee17 0a90 	vmov	r0, s15
    22ea:	f7fe f895 	bl	418 <__aeabi_f2d>
    22ee:	4602      	mov	r2, r0
    22f0:	460b      	mov	r3, r1
    22f2:	485a      	ldr	r0, [pc, #360]	; (245c <init+0x824>)
    22f4:	4933      	ldr	r1, [pc, #204]	; (23c4 <init+0x78c>)
    22f6:	f001 fe59 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - LFE Clock: %.3f kHz!", (float)LFE_CLOCK_FREQ / 1000);
    22fa:	4b59      	ldr	r3, [pc, #356]	; (2460 <init+0x828>)
    22fc:	edd3 7a00 	vldr	s15, [r3]
    2300:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2304:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2308:	ee17 0a90 	vmov	r0, s15
    230c:	f7fe f884 	bl	418 <__aeabi_f2d>
    2310:	4602      	mov	r2, r0
    2312:	460b      	mov	r3, r1
    2314:	4853      	ldr	r0, [pc, #332]	; (2464 <init+0x82c>)
    2316:	492b      	ldr	r1, [pc, #172]	; (23c4 <init+0x78c>)
    2318:	f001 fe48 	bl	3fac <printf>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);
    231c:	4b52      	ldr	r3, [pc, #328]	; (2468 <init+0x830>)
    231e:	edd3 7a00 	vldr	s15, [r3]
    2322:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2326:	eec7 7a88 	vdiv.f32	s15, s15, s16
    232a:	ee17 0a90 	vmov	r0, s15
    232e:	f7fe f873 	bl	418 <__aeabi_f2d>
    2332:	4602      	mov	r2, r0
    2334:	460b      	mov	r3, r1
    2336:	484d      	ldr	r0, [pc, #308]	; (246c <init+0x834>)
    2338:	4922      	ldr	r1, [pc, #136]	; (23c4 <init+0x78c>)
    233a:	f001 fe37 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    233e:	eddd 7a03 	vldr	s15, [sp, #12]
    2342:	ee67 7a88 	vmul.f32	s15, s15, s16
    2346:	ee17 0a90 	vmov	r0, s15
    234a:	f7fe f865 	bl	418 <__aeabi_f2d>
    234e:	4602      	mov	r2, r0
    2350:	460b      	mov	r3, r1
    2352:	4847      	ldr	r0, [pc, #284]	; (2470 <init+0x838>)
    2354:	491b      	ldr	r1, [pc, #108]	; (23c4 <init+0x78c>)
    2356:	f001 fe29 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    235a:	eddd 7a02 	vldr	s15, [sp, #8]
    235e:	ee67 7a88 	vmul.f32	s15, s15, s16
    2362:	ee17 0a90 	vmov	r0, s15
    2366:	f7fe f857 	bl	418 <__aeabi_f2d>
    236a:	4602      	mov	r2, r0
    236c:	460b      	mov	r3, r1
    236e:	4841      	ldr	r0, [pc, #260]	; (2474 <init+0x83c>)
    2370:	4914      	ldr	r1, [pc, #80]	; (23c4 <init+0x78c>)
    2372:	f001 fe1b 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    2376:	f001 f85d 	bl	3434 <adc_get_avdd>
    237a:	ee10 0a10 	vmov	r0, s0
    237e:	f7fe f84b 	bl	418 <__aeabi_f2d>
    2382:	4602      	mov	r2, r0
    2384:	460b      	mov	r3, r1
    2386:	483c      	ldr	r0, [pc, #240]	; (2478 <init+0x840>)
    2388:	490e      	ldr	r1, [pc, #56]	; (23c4 <init+0x78c>)
    238a:	f001 fe0f 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    238e:	4b3b      	ldr	r3, [pc, #236]	; (247c <init+0x844>)
    2390:	490c      	ldr	r1, [pc, #48]	; (23c4 <init+0x78c>)
    2392:	781a      	ldrb	r2, [r3, #0]
    2394:	483a      	ldr	r0, [pc, #232]	; (2480 <init+0x848>)
    2396:	2a00      	cmp	r2, #0
    2398:	bf14      	ite	ne
    239a:	462a      	movne	r2, r5
    239c:	4622      	moveq	r2, r4
    239e:	f001 fe05 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - DVDD Fall Threshold: %.2f mV!", fDVDDLowThresh * 1000);
    23a2:	eddd 7a04 	vldr	s15, [sp, #16]
    23a6:	ee67 7a88 	vmul.f32	s15, s15, s16
    23aa:	ee17 0a90 	vmov	r0, s15
    23ae:	f7fe f833 	bl	418 <__aeabi_f2d>
    23b2:	4602      	mov	r2, r0
    23b4:	460b      	mov	r3, r1
    23b6:	4833      	ldr	r0, [pc, #204]	; (2484 <init+0x84c>)
    23b8:	4902      	ldr	r1, [pc, #8]	; (23c4 <init+0x78c>)
    23ba:	f001 fdf7 	bl	3fac <printf>
    23be:	e063      	b.n	2488 <init+0x850>
    23c0:	000049b6 	.word	0x000049b6
    23c4:	00004688 	.word	0x00004688
    23c8:	20000144 	.word	0x20000144
    23cc:	000049db 	.word	0x000049db
    23d0:	20000160 	.word	0x20000160
    23d4:	00004a00 	.word	0x00004a00
    23d8:	20000108 	.word	0x20000108
    23dc:	00004a25 	.word	0x00004a25
    23e0:	20000120 	.word	0x20000120
    23e4:	00004a49 	.word	0x00004a49
    23e8:	2000012c 	.word	0x2000012c
    23ec:	00004a6e 	.word	0x00004a6e
    23f0:	20000178 	.word	0x20000178
    23f4:	00004a93 	.word	0x00004a93
    23f8:	20000158 	.word	0x20000158
    23fc:	00004ab7 	.word	0x00004ab7
    2400:	20000110 	.word	0x20000110
    2404:	00004adb 	.word	0x00004adb
    2408:	20000168 	.word	0x20000168
    240c:	00004aff 	.word	0x00004aff
    2410:	2000016c 	.word	0x2000016c
    2414:	00004b27 	.word	0x00004b27
    2418:	20000170 	.word	0x20000170
    241c:	00004b4b 	.word	0x00004b4b
    2420:	20000104 	.word	0x20000104
    2424:	00004b6f 	.word	0x00004b6f
    2428:	2000011c 	.word	0x2000011c
    242c:	00004b98 	.word	0x00004b98
    2430:	20000124 	.word	0x20000124
    2434:	00004bc1 	.word	0x00004bc1
    2438:	20000174 	.word	0x20000174
    243c:	00004be5 	.word	0x00004be5
    2440:	20000134 	.word	0x20000134
    2444:	00004c0d 	.word	0x00004c0d
    2448:	20000118 	.word	0x20000118
    244c:	00004c35 	.word	0x00004c35
    2450:	2000010c 	.word	0x2000010c
    2454:	00004c5d 	.word	0x00004c5d
    2458:	20000154 	.word	0x20000154
    245c:	00004c82 	.word	0x00004c82
    2460:	20000138 	.word	0x20000138
    2464:	00004ca6 	.word	0x00004ca6
    2468:	20000130 	.word	0x20000130
    246c:	00004cca 	.word	0x00004cca
    2470:	00004cef 	.word	0x00004cef
    2474:	00004d1c 	.word	0x00004d1c
    2478:	00004d49 	.word	0x00004d49
    247c:	20000080 	.word	0x20000080
    2480:	00004d6e 	.word	0x00004d6e
    2484:	00004d8d 	.word	0x00004d8d
    DBGPRINTLN_CTX("EMU - DVDD Rise Threshold: %.2f mV!", fDVDDHighThresh * 1000);
    2488:	ee69 7a88 	vmul.f32	s15, s19, s16
    248c:	ee17 0a90 	vmov	r0, s15
    2490:	f7fd ffc2 	bl	418 <__aeabi_f2d>
    2494:	4602      	mov	r2, r0
    2496:	460b      	mov	r3, r1
    2498:	4846      	ldr	r0, [pc, #280]	; (25b4 <init+0x97c>)
    249a:	4947      	ldr	r1, [pc, #284]	; (25b8 <init+0x980>)
    249c:	f001 fd86 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - DVDD Voltage: %.2f mV", adc_get_dvdd());
    24a0:	f001 f80c 	bl	34bc <adc_get_dvdd>
    24a4:	ee10 0a10 	vmov	r0, s0
    24a8:	f7fd ffb6 	bl	418 <__aeabi_f2d>
    24ac:	4602      	mov	r2, r0
    24ae:	460b      	mov	r3, r1
    24b0:	4842      	ldr	r0, [pc, #264]	; (25bc <init+0x984>)
    24b2:	4941      	ldr	r1, [pc, #260]	; (25b8 <init+0x980>)
    24b4:	f001 fd7a 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - DVDD Status: %s", g_ubDVDDLow ? "LOW" : "OK");
    24b8:	4b41      	ldr	r3, [pc, #260]	; (25c0 <init+0x988>)
    24ba:	493f      	ldr	r1, [pc, #252]	; (25b8 <init+0x980>)
    24bc:	781a      	ldrb	r2, [r3, #0]
    24be:	4841      	ldr	r0, [pc, #260]	; (25c4 <init+0x98c>)
    24c0:	2a00      	cmp	r2, #0
    24c2:	bf14      	ite	ne
    24c4:	462a      	movne	r2, r5
    24c6:	4622      	moveq	r2, r4
    24c8:	f001 fd70 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Fall Threshold: %.2f mV!", fIOVDDLowThresh * 1000);
    24cc:	eddd 7a05 	vldr	s15, [sp, #20]
    24d0:	ee67 7a88 	vmul.f32	s15, s15, s16
    24d4:	ee17 0a90 	vmov	r0, s15
    24d8:	f7fd ff9e 	bl	418 <__aeabi_f2d>
    24dc:	4602      	mov	r2, r0
    24de:	460b      	mov	r3, r1
    24e0:	4839      	ldr	r0, [pc, #228]	; (25c8 <init+0x990>)
    24e2:	4935      	ldr	r1, [pc, #212]	; (25b8 <init+0x980>)
    24e4:	f001 fd62 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Rise Threshold: %.2f mV!", fIOVDDHighThresh * 1000);
    24e8:	ee69 7a08 	vmul.f32	s15, s18, s16
    24ec:	ee17 0a90 	vmov	r0, s15
    24f0:	f7fd ff92 	bl	418 <__aeabi_f2d>
    24f4:	4602      	mov	r2, r0
    24f6:	460b      	mov	r3, r1
    24f8:	4834      	ldr	r0, [pc, #208]	; (25cc <init+0x994>)
    24fa:	492f      	ldr	r1, [pc, #188]	; (25b8 <init+0x980>)
    24fc:	f001 fd56 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Voltage: %.2f mV", adc_get_iovdd());
    2500:	f001 f820 	bl	3544 <adc_get_iovdd>
    2504:	ee10 0a10 	vmov	r0, s0
    2508:	f7fd ff86 	bl	418 <__aeabi_f2d>
    250c:	4602      	mov	r2, r0
    250e:	460b      	mov	r3, r1
    2510:	482f      	ldr	r0, [pc, #188]	; (25d0 <init+0x998>)
    2512:	4929      	ldr	r1, [pc, #164]	; (25b8 <init+0x980>)
    2514:	f001 fd4a 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Status: %s", g_ubIOVDDLow ? "LOW" : "OK");
    2518:	4b2e      	ldr	r3, [pc, #184]	; (25d4 <init+0x99c>)
    251a:	4927      	ldr	r1, [pc, #156]	; (25b8 <init+0x980>)
    251c:	781a      	ldrb	r2, [r3, #0]
    251e:	482e      	ldr	r0, [pc, #184]	; (25d8 <init+0x9a0>)
    2520:	2a00      	cmp	r2, #0
    2522:	bf14      	ite	ne
    2524:	462a      	movne	r2, r5
    2526:	4622      	moveq	r2, r4
    2528:	f001 fd40 	bl	3fac <printf>
    DBGPRINTLN_CTX("EMU - Core Voltage: %.2f mV", adc_get_corevdd());
    252c:	f001 f84e 	bl	35cc <adc_get_corevdd>
    2530:	ee10 0a10 	vmov	r0, s0
    2534:	f7fd ff70 	bl	418 <__aeabi_f2d>
    2538:	4602      	mov	r2, r0
    253a:	460b      	mov	r3, r1
    253c:	4827      	ldr	r0, [pc, #156]	; (25dc <init+0x9a4>)
    253e:	491e      	ldr	r1, [pc, #120]	; (25b8 <init+0x980>)
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    2540:	4d1d      	ldr	r5, [pc, #116]	; (25b8 <init+0x980>)
    DBGPRINTLN_CTX("EMU - Core Voltage: %.2f mV", adc_get_corevdd());
    2542:	f001 fd33 	bl	3fac <printf>
    delay_ms(100);
    2546:	2064      	movs	r0, #100	; 0x64
    2548:	2100      	movs	r1, #0
    254a:	f000 f961 	bl	2810 <delay_ms>
    DBGPRINTLN_CTX("Scanning I2C bus 0...");
    254e:	491a      	ldr	r1, [pc, #104]	; (25b8 <init+0x980>)
    2550:	4823      	ldr	r0, [pc, #140]	; (25e0 <init+0x9a8>)
    2552:	f001 fd2b 	bl	3fac <printf>
    2556:	2408      	movs	r4, #8

void i2c0_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation);
uint8_t i2c0_transmit(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop);
static inline uint8_t i2c0_write(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop)
{
	return i2c0_transmit((ubAddress << 1) & ~0x01, pubSrc, ulCount, ubStop);
    2558:	0060      	lsls	r0, r4, #1
    255a:	2200      	movs	r2, #0
    255c:	2301      	movs	r3, #1
    255e:	4611      	mov	r1, r2
    2560:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2564:	f000 f9a6 	bl	28b4 <i2c0_transmit>
        if(i2c0_write(a, 0, 0, I2C_STOP))
    2568:	b120      	cbz	r0, 2574 <init+0x93c>
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    256a:	4622      	mov	r2, r4
    256c:	4629      	mov	r1, r5
    256e:	4630      	mov	r0, r6
    2570:	f001 fd1c 	bl	3fac <printf>
    2574:	3401      	adds	r4, #1
    for(uint8_t a = 0x08; a < 0x78; a++)
    2576:	2c78      	cmp	r4, #120	; 0x78
    2578:	d1ee      	bne.n	2558 <init+0x920>
    }

    DBGPRINTLN_CTX("Scanning I2C bus 2...");
    257a:	490f      	ldr	r1, [pc, #60]	; (25b8 <init+0x980>)
    257c:	4819      	ldr	r0, [pc, #100]	; (25e4 <init+0x9ac>)

    for(uint8_t a = 0x08; a < 0x78; a++)
    {
        if(i2c1_write(a, 0, 0, I2C_STOP))
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    257e:	4d0e      	ldr	r5, [pc, #56]	; (25b8 <init+0x980>)
    2580:	4e19      	ldr	r6, [pc, #100]	; (25e8 <init+0x9b0>)
    DBGPRINTLN_CTX("Scanning I2C bus 2...");
    2582:	f001 fd13 	bl	3fac <printf>
    2586:	2408      	movs	r4, #8

void i2c1_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation);
uint8_t i2c1_transmit(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop);
static inline uint8_t i2c1_write(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop)
{
	return i2c1_transmit((ubAddress << 1) & ~0x01, pubSrc, ulCount, ubStop);
    2588:	0060      	lsls	r0, r4, #1
    258a:	2200      	movs	r2, #0
    258c:	2301      	movs	r3, #1
    258e:	4611      	mov	r1, r2
    2590:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    2594:	f000 fa46 	bl	2a24 <i2c1_transmit>
        if(i2c1_write(a, 0, 0, I2C_STOP))
    2598:	b120      	cbz	r0, 25a4 <init+0x96c>
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    259a:	4622      	mov	r2, r4
    259c:	4629      	mov	r1, r5
    259e:	4630      	mov	r0, r6
    25a0:	f001 fd04 	bl	3fac <printf>
    25a4:	3401      	adds	r4, #1
    for(uint8_t a = 0x08; a < 0x78; a++)
    25a6:	2c78      	cmp	r4, #120	; 0x78
    25a8:	d1ee      	bne.n	2588 <init+0x950>
    }

    return 0;
}
    25aa:	2000      	movs	r0, #0
    25ac:	b00e      	add	sp, #56	; 0x38
    25ae:	ecbd 8b04 	vpop	{d8-d9}
    25b2:	bd70      	pop	{r4, r5, r6, pc}
    25b4:	00004dba 	.word	0x00004dba
    25b8:	00004688 	.word	0x00004688
    25bc:	00004de7 	.word	0x00004de7
    25c0:	20000082 	.word	0x20000082
    25c4:	00004e0c 	.word	0x00004e0c
    25c8:	00004e2b 	.word	0x00004e2b
    25cc:	00004e59 	.word	0x00004e59
    25d0:	00004e87 	.word	0x00004e87
    25d4:	20000083 	.word	0x20000083
    25d8:	00004ead 	.word	0x00004ead
    25dc:	00004ecd 	.word	0x00004ecd
    25e0:	00004ef2 	.word	0x00004ef2
    25e4:	00004f32 	.word	0x00004f32
    25e8:	00004f11 	.word	0x00004f11

000025ec <main>:
int main()
{
    25ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // Internal flash test
    DBGPRINTLN_CTX("Initial calibration dump:");
    25f0:	4939      	ldr	r1, [pc, #228]	; (26d8 <main+0xec>)
    25f2:	483a      	ldr	r0, [pc, #232]	; (26dc <main+0xf0>)

    for(init_calib_t *psCalibTbl = g_psInitCalibrationTable; psCalibTbl->pulRegister; psCalibTbl++)
        DBGPRINTLN_CTX("  0x%08X -> 0x%08X", psCalibTbl->ulInitialCalibration, psCalibTbl->pulRegister);
    25f4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 26d8 <main+0xec>
    25f8:	f8df 9114 	ldr.w	r9, [pc, #276]	; 2710 <main+0x124>
{
    25fc:	b089      	sub	sp, #36	; 0x24
    DBGPRINTLN_CTX("Initial calibration dump:");
    25fe:	f001 fcd5 	bl	3fac <printf>
    for(init_calib_t *psCalibTbl = g_psInitCalibrationTable; psCalibTbl->pulRegister; psCalibTbl++)
    2602:	4b37      	ldr	r3, [pc, #220]	; (26e0 <main+0xf4>)
    2604:	681c      	ldr	r4, [r3, #0]
    2606:	6825      	ldr	r5, [r4, #0]
    2608:	2d00      	cmp	r5, #0
    260a:	d15c      	bne.n	26c6 <main+0xda>
    DBGPRINTLN_CTX("0x000FFFFC: %08X", *(volatile uint32_t *)0x000FFFFC);
    DBGPRINTLN_CTX("0x00100000: %08X", *(volatile uint32_t *)0x00100000);
    */

    // QSPI
    DBGPRINTLN_CTX("Flash Part ID: %06X", qspi_flash_read_jedec_id());
    260c:	f7ff f9b9 	bl	1982 <qspi_flash_read_jedec_id>
    2610:	4931      	ldr	r1, [pc, #196]	; (26d8 <main+0xec>)
    2612:	4602      	mov	r2, r0
    2614:	4833      	ldr	r0, [pc, #204]	; (26e4 <main+0xf8>)
    2616:	f001 fcc9 	bl	3fac <printf>

    uint8_t ubFlashUID[8];

    qspi_flash_read_security(0x0000, ubFlashUID, 8);
    261a:	2208      	movs	r2, #8
    261c:	a906      	add	r1, sp, #24
    261e:	4628      	mov	r0, r5
    2620:	f7ff f9cf 	bl	19c2 <qspi_flash_read_security>

    DBGPRINTLN_CTX("Flash ID: %02X%02X%02X%02X%02X%02X%02X%02X", ubFlashUID[0], ubFlashUID[1], ubFlashUID[2], ubFlashUID[3], ubFlashUID[4], ubFlashUID[5], ubFlashUID[6], ubFlashUID[7]);
    2624:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2628:	9305      	str	r3, [sp, #20]
    262a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    262e:	9304      	str	r3, [sp, #16]
    2630:	f89d 301d 	ldrb.w	r3, [sp, #29]
    2634:	9303      	str	r3, [sp, #12]
    2636:	f89d 301c 	ldrb.w	r3, [sp, #28]
    263a:	9302      	str	r3, [sp, #8]
    263c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2640:	9301      	str	r3, [sp, #4]
    2642:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2646:	9300      	str	r3, [sp, #0]
    2648:	f89d 2018 	ldrb.w	r2, [sp, #24]
    264c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2650:	4921      	ldr	r1, [pc, #132]	; (26d8 <main+0xec>)
    2652:	4825      	ldr	r0, [pc, #148]	; (26e8 <main+0xfc>)
    2654:	f001 fcaa 	bl	3fac <printf>

    DBGPRINTLN_CTX("QSPI Dest %08X", get_family_name);
    DBGPRINTLN_CTX("Device: %s%hu", get_family_name((DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK) >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT), (DEVINFO->PART & _DEVINFO_PART_DEVICE_NUMBER_MASK) >> _DEVINFO_PART_DEVICE_NUMBER_SHIFT);
    */

    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000000);
    2658:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    265c:	491e      	ldr	r1, [pc, #120]	; (26d8 <main+0xec>)
    265e:	781a      	ldrb	r2, [r3, #0]
    2660:	4822      	ldr	r0, [pc, #136]	; (26ec <main+0x100>)
    2662:	f001 fca3 	bl	3fac <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000001);
    2666:	4b22      	ldr	r3, [pc, #136]	; (26f0 <main+0x104>)
    2668:	491b      	ldr	r1, [pc, #108]	; (26d8 <main+0xec>)
    266a:	781a      	ldrb	r2, [r3, #0]
    266c:	481f      	ldr	r0, [pc, #124]	; (26ec <main+0x100>)
    266e:	f001 fc9d 	bl	3fac <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000002);
    2672:	4b20      	ldr	r3, [pc, #128]	; (26f4 <main+0x108>)
    2674:	4918      	ldr	r1, [pc, #96]	; (26d8 <main+0xec>)
    2676:	781a      	ldrb	r2, [r3, #0]
    2678:	481c      	ldr	r0, [pc, #112]	; (26ec <main+0x100>)
    267a:	f001 fc97 	bl	3fac <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000003);
    267e:	4b1e      	ldr	r3, [pc, #120]	; (26f8 <main+0x10c>)
    2680:	4915      	ldr	r1, [pc, #84]	; (26d8 <main+0xec>)
    2682:	781a      	ldrb	r2, [r3, #0]
    2684:	4819      	ldr	r0, [pc, #100]	; (26ec <main+0x100>)
    2686:	f001 fc91 	bl	3fac <printf>
    DBGPRINTLN_CTX("Boot RD: %02X", *(volatile uint8_t *)0x0FE10000);
    268a:	4b1c      	ldr	r3, [pc, #112]	; (26fc <main+0x110>)
    268c:	4912      	ldr	r1, [pc, #72]	; (26d8 <main+0xec>)
    268e:	781a      	ldrb	r2, [r3, #0]
    2690:	481b      	ldr	r0, [pc, #108]	; (2700 <main+0x114>)
    2692:	f001 fc8b 	bl	3fac <printf>
    DBGPRINTLN_CTX("Data RD: %02X", *(volatile uint8_t *)0x0FE00000);
    2696:	f04f 637e 	mov.w	r3, #266338304	; 0xfe00000
    269a:	490f      	ldr	r1, [pc, #60]	; (26d8 <main+0xec>)
    269c:	781a      	ldrb	r2, [r3, #0]
    269e:	4819      	ldr	r0, [pc, #100]	; (2704 <main+0x118>)
    26a0:	f001 fc84 	bl	3fac <printf>
    26a4:	4b18      	ldr	r3, [pc, #96]	; (2708 <main+0x11c>)

    while(1)
    {
        static uint64_t ullLastTask = 0;

        if (g_ullSystemTick > (ullLastTask + 500))
    26a6:	4919      	ldr	r1, [pc, #100]	; (270c <main+0x120>)
    26a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    26ac:	f512 76fa 	adds.w	r6, r2, #500	; 0x1f4
    26b0:	f143 0700 	adc.w	r7, r3, #0
    26b4:	e9d1 2300 	ldrd	r2, r3, [r1]
    26b8:	429f      	cmp	r7, r3
    26ba:	bf08      	it	eq
    26bc:	4296      	cmpeq	r6, r2
    26be:	d2f9      	bcs.n	26b4 <main+0xc8>
        {

            ullLastTask = g_ullSystemTick;
    26c0:	e9d1 2300 	ldrd	r2, r3, [r1]
    26c4:	e7f2      	b.n	26ac <main+0xc0>
        DBGPRINTLN_CTX("  0x%08X -> 0x%08X", psCalibTbl->ulInitialCalibration, psCalibTbl->pulRegister);
    26c6:	6862      	ldr	r2, [r4, #4]
    26c8:	462b      	mov	r3, r5
    26ca:	4641      	mov	r1, r8
    26cc:	4648      	mov	r0, r9
    26ce:	f001 fc6d 	bl	3fac <printf>
    for(init_calib_t *psCalibTbl = g_psInitCalibrationTable; psCalibTbl->pulRegister; psCalibTbl++)
    26d2:	3408      	adds	r4, #8
    26d4:	e797      	b.n	2606 <main+0x1a>
    26d6:	bf00      	nop
    26d8:	0000468d 	.word	0x0000468d
    26dc:	00004f51 	.word	0x00004f51
    26e0:	20000000 	.word	0x20000000
    26e4:	00004f90 	.word	0x00004f90
    26e8:	00004fad 	.word	0x00004fad
    26ec:	00004fe1 	.word	0x00004fe1
    26f0:	c0000001 	.word	0xc0000001
    26f4:	c0000002 	.word	0xc0000002
    26f8:	c0000003 	.word	0xc0000003
    26fc:	0fe10000 	.word	0x0fe10000
    2700:	00004ff8 	.word	0x00004ff8
    2704:	0000500f 	.word	0x0000500f
    2708:	200000e8 	.word	0x200000e8
    270c:	200000f0 	.word	0x200000f0
    2710:	00004f74 	.word	0x00004f74

00002714 <rtcc_init>:
#include "rtcc.h"

void rtcc_init()
{
    2714:	b508      	push	{r3, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_LE;
    2716:	4b16      	ldr	r3, [pc, #88]	; (2770 <rtcc_init+0x5c>)
    2718:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    271c:	f042 0201 	orr.w	r2, r2, #1
    2720:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    CMU->LFEPRESC0 = (CMU->LFEPRESC0 & ~_CMU_LFEPRESC0_RTCC_MASK) | CMU_LFEPRESC0_RTCC_DIV1;
    2724:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2728:	f022 0203 	bic.w	r2, r2, #3
    272c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    CMU->LFECLKEN0 |= CMU_LFECLKEN0_RTCC;
    2730:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    2734:	f042 0201 	orr.w	r2, r2, #1
    2738:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    cmu_update_clocks();
    273c:	f000 f9ea 	bl	2b14 <cmu_update_clocks>

    RTCC->CTRL = RTCC_CTRL_CNTMODE_NORMAL | RTCC_CTRL_OSCFDETEN | RTCC_CTRL_CNTTICK_CCV0MATCH | RTCC_CTRL_PRECCV0TOP | RTCC_CTRL_DEBUGRUN;
    2740:	4b0c      	ldr	r3, [pc, #48]	; (2774 <rtcc_init+0x60>)
    2742:	f249 0214 	movw	r2, #36884	; 0x9014
    2746:	601a      	str	r2, [r3, #0]
    RTCC->PRECNT = 0;
    2748:	2200      	movs	r2, #0
    274a:	605a      	str	r2, [r3, #4]
    RTCC->CNT = 0;
    274c:	609a      	str	r2, [r3, #8]

    RTCC->CC[0].CCV = 999; // Prescaler RTCC_CLOCK_FREQ / (X + 1)
    274e:	f240 32e7 	movw	r2, #999	; 0x3e7
    2752:	645a      	str	r2, [r3, #68]	; 0x44

    RTCC->CC[1].CTRL = RTCC_CC_CTRL_COMPBASE_CNT | RTCC_CC_CTRL_MODE_OUTPUTCOMPARE;
    2754:	2202      	movs	r2, #2
    2756:	651a      	str	r2, [r3, #80]	; 0x50

    RTCC->IFC = _RTCC_IFC_MASK;
    2758:	f240 72ff 	movw	r2, #2047	; 0x7ff
    275c:	621a      	str	r2, [r3, #32]
    RTCC->IEN |= RTCC_IEN_CC1;
    275e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2760:	f042 0204 	orr.w	r2, r2, #4
    2764:	625a      	str	r2, [r3, #36]	; 0x24

    RTCC->CTRL |= RTCC_CTRL_ENABLE;
    2766:	681a      	ldr	r2, [r3, #0]
    2768:	f042 0201 	orr.w	r2, r2, #1
    276c:	601a      	str	r2, [r3, #0]
}
    276e:	bd08      	pop	{r3, pc}
    2770:	400e4000 	.word	0x400e4000
    2774:	40062000 	.word	0x40062000

00002778 <trng_init>:
#include "trng.h"

void trng_init()
{
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_TRNG0;
    2778:	4a11      	ldr	r2, [pc, #68]	; (27c0 <trng_init+0x48>)
    277a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    277e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    2782:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    TRNG0->CONTROL = TRNG_CONTROL_FORCERUN_RUN | TRNG_CONTROL_SOFTRESET_RESET | TRNG_CONTROL_CONDBYPASS_BYPASS | TRNG_CONTROL_TESTEN_NOISE;
    2786:	4b0f      	ldr	r3, [pc, #60]	; (27c4 <trng_init+0x4c>)
    2788:	f640 1208 	movw	r2, #2312	; 0x908
    278c:	601a      	str	r2, [r3, #0]
    TRNG0->CONTROL &= ~TRNG_CONTROL_SOFTRESET_RESET;
    278e:	681a      	ldr	r2, [r3, #0]
    2790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2794:	601a      	str	r2, [r3, #0]
    TRNG0->CONTROL |= TRNG_CONTROL_ENABLE_ENABLED;
    2796:	681a      	ldr	r2, [r3, #0]
    2798:	f042 0201 	orr.w	r2, r2, #1
    279c:	601a      	str	r2, [r3, #0]

    while(TRNG0->FIFOLEVEL < 4);
    279e:	685a      	ldr	r2, [r3, #4]
    27a0:	2a03      	cmp	r2, #3
    27a2:	d9fc      	bls.n	279e <trng_init+0x26>

    TRNG0->KEY0 = TRNG0->FIFO;
    27a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    27a8:	611a      	str	r2, [r3, #16]
    TRNG0->KEY1 = TRNG0->FIFO;
    27aa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    27ae:	615a      	str	r2, [r3, #20]
    TRNG0->KEY2 = TRNG0->FIFO;
    27b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    27b4:	619a      	str	r2, [r3, #24]
    TRNG0->KEY3 = TRNG0->FIFO;
    27b6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    27ba:	61da      	str	r2, [r3, #28]
}
    27bc:	4770      	bx	lr
    27be:	bf00      	nop
    27c0:	400e4000 	.word	0x400e4000
    27c4:	4001d000 	.word	0x4001d000

000027c8 <_systick_isr>:

volatile uint64_t g_ullSystemTick = 0;

void _systick_isr()
{
    g_ullSystemTick++;
    27c8:	4904      	ldr	r1, [pc, #16]	; (27dc <_systick_isr+0x14>)
{
    27ca:	b530      	push	{r4, r5, lr}
    g_ullSystemTick++;
    27cc:	e9d1 2300 	ldrd	r2, r3, [r1]
    27d0:	1c54      	adds	r4, r2, #1
    27d2:	f143 0500 	adc.w	r5, r3, #0
    27d6:	e9c1 4500 	strd	r4, r5, [r1]
}
    27da:	bd30      	pop	{r4, r5, pc}
    27dc:	200000f0 	.word	0x200000f0

000027e0 <systick_init>:
void systick_init()
{
    SysTick->LOAD = (HFCORE_CLOCK_FREQ / 1000) - 1;
    27e0:	4b08      	ldr	r3, [pc, #32]	; (2804 <systick_init+0x24>)
    27e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    27e6:	681b      	ldr	r3, [r3, #0]
    27e8:	fbb3 f3f2 	udiv	r3, r3, r2
    27ec:	4a06      	ldr	r2, [pc, #24]	; (2808 <systick_init+0x28>)
    27ee:	3b01      	subs	r3, #1
    27f0:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;
    27f2:	2300      	movs	r3, #0
    27f4:	6093      	str	r3, [r2, #8]
    SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
    27f6:	2307      	movs	r3, #7
    27f8:	6013      	str	r3, [r2, #0]

    SCB->SHP[11] = 7 << (8 - __NVIC_PRIO_BITS); // Set priority 3,1 (min)
    27fa:	4b04      	ldr	r3, [pc, #16]	; (280c <systick_init+0x2c>)
    27fc:	22e0      	movs	r2, #224	; 0xe0
    27fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
    2802:	4770      	bx	lr
    2804:	20000128 	.word	0x20000128
    2808:	e000e010 	.word	0xe000e010
    280c:	e000ed00 	.word	0xe000ed00

00002810 <delay_ms>:
void delay_ms(uint64_t ullTicks)
{
    uint64_t ullStartTick = g_ullSystemTick;
    2810:	4b08      	ldr	r3, [pc, #32]	; (2834 <delay_ms+0x24>)
{
    2812:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint64_t ullStartTick = g_ullSystemTick;
    2816:	e9d3 4500 	ldrd	r4, r5, [r3]

    while(g_ullSystemTick - ullStartTick < ullTicks);
    281a:	e9d3 8900 	ldrd	r8, r9, [r3]
    281e:	ebb8 0604 	subs.w	r6, r8, r4
    2822:	eb69 0705 	sbc.w	r7, r9, r5
    2826:	428f      	cmp	r7, r1
    2828:	bf08      	it	eq
    282a:	4286      	cmpeq	r6, r0
    282c:	d3f5      	bcc.n	281a <delay_ms+0xa>
}
    282e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2832:	bf00      	nop
    2834:	200000f0 	.word	0x200000f0

00002838 <i2c0_init>:
#include "i2c.h"

void i2c0_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation)
{
    if(ubSCLLocation > AFCHANLOC_MAX)
    2838:	2908      	cmp	r1, #8
{
    283a:	b510      	push	{r4, lr}
    if(ubSCLLocation > AFCHANLOC_MAX)
    283c:	d828      	bhi.n	2890 <i2c0_init+0x58>
        return;

    if(ubSDALocation > AFCHANLOC_MAX)
    283e:	2a08      	cmp	r2, #8
    2840:	d826      	bhi.n	2890 <i2c0_init+0x58>
        return;

	CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_I2C0;
    2842:	4c17      	ldr	r4, [pc, #92]	; (28a0 <i2c0_init+0x68>)
    2844:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    2848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    284c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    I2C0->CTRL = I2C_CTRL_CLHR_ASYMMETRIC | I2C_CTRL_TXBIL_EMPTY;
    2850:	f5a4 24b6 	sub.w	r4, r4, #372736	; 0x5b000
    2854:	f44f 7380 	mov.w	r3, #256	; 0x100
    2858:	6023      	str	r3, [r4, #0]
    I2C0->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    I2C0->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    285a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    I2C0->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    285e:	2303      	movs	r3, #3
    2860:	6463      	str	r3, [r4, #68]	; 0x44
    I2C0->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    2862:	64a2      	str	r2, [r4, #72]	; 0x48

    if(ubMode == I2C_NORMAL)
    2864:	b9a8      	cbnz	r0, 2892 <i2c0_init+0x5a>
        I2C0->CLKDIV = (((HFPERC_CLOCK_FREQ / 100000) - 8) / 9) - 1;
    2866:	4b0f      	ldr	r3, [pc, #60]	; (28a4 <i2c0_init+0x6c>)
    2868:	4a0f      	ldr	r2, [pc, #60]	; (28a8 <i2c0_init+0x70>)
    286a:	681b      	ldr	r3, [r3, #0]
    else if(ubMode == I2C_FAST)
        I2C0->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 9) - 1;
    286c:	fbb3 f3f2 	udiv	r3, r3, r2
    2870:	2209      	movs	r2, #9
    2872:	3b08      	subs	r3, #8
    2874:	fbb3 f3f2 	udiv	r3, r3, r2
    2878:	3b01      	subs	r3, #1
    287a:	6123      	str	r3, [r4, #16]

    I2C0->CTRL |= I2C_CTRL_EN;
    287c:	4b0b      	ldr	r3, [pc, #44]	; (28ac <i2c0_init+0x74>)
    287e:	681a      	ldr	r2, [r3, #0]
    2880:	f042 0201 	orr.w	r2, r2, #1
    2884:	601a      	str	r2, [r3, #0]
    I2C0->CMD = I2C_CMD_ABORT;
    2886:	2220      	movs	r2, #32
    2888:	605a      	str	r2, [r3, #4]

    while(I2C0->STATE & I2C_STATE_BUSY);
    288a:	689a      	ldr	r2, [r3, #8]
    288c:	07d2      	lsls	r2, r2, #31
    288e:	d4fc      	bmi.n	288a <i2c0_init+0x52>
}
    2890:	bd10      	pop	{r4, pc}
    else if(ubMode == I2C_FAST)
    2892:	2801      	cmp	r0, #1
    2894:	d1f2      	bne.n	287c <i2c0_init+0x44>
        I2C0->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 9) - 1;
    2896:	4b03      	ldr	r3, [pc, #12]	; (28a4 <i2c0_init+0x6c>)
    2898:	4a05      	ldr	r2, [pc, #20]	; (28b0 <i2c0_init+0x78>)
    289a:	681b      	ldr	r3, [r3, #0]
    289c:	e7e6      	b.n	286c <i2c0_init+0x34>
    289e:	bf00      	nop
    28a0:	400e4000 	.word	0x400e4000
    28a4:	20000148 	.word	0x20000148
    28a8:	000186a0 	.word	0x000186a0
    28ac:	40089000 	.word	0x40089000
    28b0:	00061a80 	.word	0x00061a80

000028b4 <i2c0_transmit>:
uint8_t i2c0_transmit(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop)
{
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    I2C0->IFC = _I2C_IFC_MASK;
    28b6:	4c3b      	ldr	r4, [pc, #236]	; (29a4 <i2c0_transmit+0xf0>)
    28b8:	4d3b      	ldr	r5, [pc, #236]	; (29a8 <i2c0_transmit+0xf4>)
    28ba:	63e5      	str	r5, [r4, #60]	; 0x3c

    I2C0->CMD = I2C_CMD_START;
    28bc:	2501      	movs	r5, #1
    28be:	6065      	str	r5, [r4, #4]

    while(!(I2C0->IF & (I2C_IF_START | I2C_IF_RSTART | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
    28c0:	f240 6503 	movw	r5, #1539	; 0x603
    28c4:	6b66      	ldr	r6, [r4, #52]	; 0x34
    28c6:	422e      	tst	r6, r5
    28c8:	d0fc      	beq.n	28c4 <i2c0_transmit+0x10>

    if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    28ca:	6b65      	ldr	r5, [r4, #52]	; 0x34
    28cc:	f415 6fc0 	tst.w	r5, #1536	; 0x600
    28d0:	d003      	beq.n	28da <i2c0_transmit+0x26>
			{
                while(!(I2C0->IF & (I2C_IF_RXDATAV | I2C_IF_ARBLOST | I2C_IF_BUSERR)));

                if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
                {
                    I2C0->CMD = I2C_CMD_ABORT;
    28d2:	2320      	movs	r3, #32
    28d4:	6063      	str	r3, [r4, #4]

                    return 0;
    28d6:	2000      	movs	r0, #0
            return 0;
        }
    }

	return 1;
}
    28d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    I2C0->TXDATA = ubAddress;
    28da:	62e0      	str	r0, [r4, #44]	; 0x2c
    while(!(I2C0->IF & (I2C_IF_ACK | I2C_IF_NACK | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
    28dc:	4c31      	ldr	r4, [pc, #196]	; (29a4 <i2c0_transmit+0xf0>)
    28de:	6b65      	ldr	r5, [r4, #52]	; 0x34
    28e0:	f415 6fd8 	tst.w	r5, #1728	; 0x6c0
    28e4:	d0fb      	beq.n	28de <i2c0_transmit+0x2a>
    if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    28e6:	6b65      	ldr	r5, [r4, #52]	; 0x34
    28e8:	f415 6fc0 	tst.w	r5, #1536	; 0x600
    28ec:	d1f1      	bne.n	28d2 <i2c0_transmit+0x1e>
    else if(I2C0->IF & I2C_IF_NACK)
    28ee:	6b65      	ldr	r5, [r4, #52]	; 0x34
    28f0:	062d      	lsls	r5, r5, #24
    28f2:	d50d      	bpl.n	2910 <i2c0_transmit+0x5c>
        I2C0->CMD = I2C_CMD_STOP;
    28f4:	2302      	movs	r3, #2
    28f6:	6063      	str	r3, [r4, #4]
        while(I2C0->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
    28f8:	4b2a      	ldr	r3, [pc, #168]	; (29a4 <i2c0_transmit+0xf0>)
    28fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    28fc:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
    2900:	d1fb      	bne.n	28fa <i2c0_transmit+0x46>
                    if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    2902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2904:	f412 6fc0 	tst.w	r2, #1536	; 0x600
    2908:	d0e5      	beq.n	28d6 <i2c0_transmit+0x22>
            I2C0->CMD = I2C_CMD_ABORT;
    290a:	2220      	movs	r2, #32
    290c:	605a      	str	r2, [r3, #4]
            return 0;
    290e:	e7e3      	b.n	28d8 <i2c0_transmit+0x24>
	if(ulCount)
    2910:	b1ea      	cbz	r2, 294e <i2c0_transmit+0x9a>
    2912:	4c24      	ldr	r4, [pc, #144]	; (29a4 <i2c0_transmit+0xf0>)
    2914:	3101      	adds	r1, #1
			if (ubAddress & 1) // Read
    2916:	f000 0001 	and.w	r0, r0, #1
                    I2C0->CMD = I2C_CMD_NACK;
    291a:	2508      	movs	r5, #8
                    I2C0->CMD = I2C_CMD_ACK;
    291c:	2604      	movs	r6, #4
                I2C0->IFC = I2C_IFC_ACK;
    291e:	2740      	movs	r7, #64	; 0x40
			if (ubAddress & 1) // Read
    2920:	b1c0      	cbz	r0, 2954 <i2c0_transmit+0xa0>
                while(!(I2C0->IF & (I2C_IF_RXDATAV | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
    2922:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    2926:	f41c 6fc4 	tst.w	ip, #1568	; 0x620
    292a:	d0fa      	beq.n	2922 <i2c0_transmit+0x6e>
                if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    292c:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    2930:	f41c 6fc0 	tst.w	ip, #1536	; 0x600
    2934:	d1cd      	bne.n	28d2 <i2c0_transmit+0x1e>
				*(pubSrc++) = I2C0->RXDATA;
    2936:	f8d4 c01c 	ldr.w	ip, [r4, #28]
    293a:	f801 cc01 	strb.w	ip, [r1, #-1]
				if (ulCount > 1)
    293e:	2a01      	cmp	r2, #1
                    I2C0->CMD = I2C_CMD_ACK;
    2940:	bf8c      	ite	hi
    2942:	6066      	strhi	r6, [r4, #4]
                    I2C0->CMD = I2C_CMD_NACK;
    2944:	6065      	strls	r5, [r4, #4]
		} while(--ulCount);
    2946:	3a01      	subs	r2, #1
    2948:	f101 0101 	add.w	r1, r1, #1
    294c:	d1e8      	bne.n	2920 <i2c0_transmit+0x6c>
    if(ubStop)
    294e:	b9eb      	cbnz	r3, 298c <i2c0_transmit+0xd8>
	return 1;
    2950:	2001      	movs	r0, #1
    2952:	e7c1      	b.n	28d8 <i2c0_transmit+0x24>
                I2C0->IFC = I2C_IFC_ACK;
    2954:	63e7      	str	r7, [r4, #60]	; 0x3c
				I2C0->TXDATA = *(pubSrc++);
    2956:	f811 cc01 	ldrb.w	ip, [r1, #-1]
    295a:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
                while(!(I2C0->IF & (I2C_IF_ACK | I2C_IF_NACK | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
    295e:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    2962:	f41c 6fd8 	tst.w	ip, #1728	; 0x6c0
    2966:	d0fa      	beq.n	295e <i2c0_transmit+0xaa>
                if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    2968:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    296c:	f41c 6fc0 	tst.w	ip, #1536	; 0x600
    2970:	d1af      	bne.n	28d2 <i2c0_transmit+0x1e>
                else if(I2C0->IF & I2C_IF_NACK)
    2972:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    2976:	f01c 0f80 	tst.w	ip, #128	; 0x80
    297a:	d0e4      	beq.n	2946 <i2c0_transmit+0x92>
                    I2C0->CMD = I2C_CMD_STOP;
    297c:	2302      	movs	r3, #2
    297e:	6063      	str	r3, [r4, #4]
                    while(I2C0->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
    2980:	4b08      	ldr	r3, [pc, #32]	; (29a4 <i2c0_transmit+0xf0>)
    2982:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2984:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
    2988:	d1fb      	bne.n	2982 <i2c0_transmit+0xce>
    298a:	e7ba      	b.n	2902 <i2c0_transmit+0x4e>
        I2C0->CMD = I2C_CMD_STOP;
    298c:	4b05      	ldr	r3, [pc, #20]	; (29a4 <i2c0_transmit+0xf0>)
    298e:	2202      	movs	r2, #2
    2990:	605a      	str	r2, [r3, #4]
        while(I2C0->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
    2992:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2994:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
    2998:	d1fb      	bne.n	2992 <i2c0_transmit+0xde>
        if(I2C0->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    299a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    299c:	f412 6fc0 	tst.w	r2, #1536	; 0x600
    29a0:	d0d6      	beq.n	2950 <i2c0_transmit+0x9c>
    29a2:	e7b2      	b.n	290a <i2c0_transmit+0x56>
    29a4:	40089000 	.word	0x40089000
    29a8:	0007ffcf 	.word	0x0007ffcf

000029ac <i2c1_init>:


void i2c1_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation)
{
    if(ubSCLLocation > AFCHANLOC_MAX)
    29ac:	2908      	cmp	r1, #8
{
    29ae:	b510      	push	{r4, lr}
    if(ubSCLLocation > AFCHANLOC_MAX)
    29b0:	d826      	bhi.n	2a00 <i2c1_init+0x54>
        return;

    if(ubSDALocation > AFCHANLOC_MAX)
    29b2:	2a08      	cmp	r2, #8
    29b4:	d824      	bhi.n	2a00 <i2c1_init+0x54>
        return;

	CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_I2C1;
    29b6:	4c16      	ldr	r4, [pc, #88]	; (2a10 <i2c1_init+0x64>)
    29b8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    29bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    29c0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    I2C1->CTRL = I2C_CTRL_CLHR_ASYMMETRIC | I2C_CTRL_TXBIL_EMPTY;
    29c4:	4b13      	ldr	r3, [pc, #76]	; (2a14 <i2c1_init+0x68>)
    29c6:	f44f 7480 	mov.w	r4, #256	; 0x100
    29ca:	601c      	str	r4, [r3, #0]
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    29cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    29d0:	2403      	movs	r4, #3
    29d2:	645c      	str	r4, [r3, #68]	; 0x44
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    29d4:	649a      	str	r2, [r3, #72]	; 0x48

    if(ubMode == I2C_NORMAL)
    29d6:	b9a0      	cbnz	r0, 2a02 <i2c1_init+0x56>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 100000) - 8) / 9) - 1;
    29d8:	4a0f      	ldr	r2, [pc, #60]	; (2a18 <i2c1_init+0x6c>)
    29da:	4910      	ldr	r1, [pc, #64]	; (2a1c <i2c1_init+0x70>)
    29dc:	6812      	ldr	r2, [r2, #0]
    else if(ubMode == I2C_FAST)
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 9) - 1;
    29de:	fbb2 f2f1 	udiv	r2, r2, r1
    29e2:	2109      	movs	r1, #9
    29e4:	3a08      	subs	r2, #8
    29e6:	fbb2 f2f1 	udiv	r2, r2, r1
    29ea:	3a01      	subs	r2, #1
    29ec:	611a      	str	r2, [r3, #16]

    I2C1->CTRL |= I2C_CTRL_EN;
    29ee:	681a      	ldr	r2, [r3, #0]
    29f0:	f042 0201 	orr.w	r2, r2, #1
    29f4:	601a      	str	r2, [r3, #0]
    I2C1->CMD = I2C_CMD_ABORT;
    29f6:	2220      	movs	r2, #32
    29f8:	605a      	str	r2, [r3, #4]

    while(I2C1->STATE & I2C_STATE_BUSY);
    29fa:	689a      	ldr	r2, [r3, #8]
    29fc:	07d2      	lsls	r2, r2, #31
    29fe:	d4fc      	bmi.n	29fa <i2c1_init+0x4e>
}
    2a00:	bd10      	pop	{r4, pc}
    else if(ubMode == I2C_FAST)
    2a02:	2801      	cmp	r0, #1
    2a04:	d1f3      	bne.n	29ee <i2c1_init+0x42>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 9) - 1;
    2a06:	4a04      	ldr	r2, [pc, #16]	; (2a18 <i2c1_init+0x6c>)
    2a08:	4905      	ldr	r1, [pc, #20]	; (2a20 <i2c1_init+0x74>)
    2a0a:	6812      	ldr	r2, [r2, #0]
    2a0c:	e7e7      	b.n	29de <i2c1_init+0x32>
    2a0e:	bf00      	nop
    2a10:	400e4000 	.word	0x400e4000
    2a14:	40089400 	.word	0x40089400
    2a18:	20000148 	.word	0x20000148
    2a1c:	000186a0 	.word	0x000186a0
    2a20:	00061a80 	.word	0x00061a80

00002a24 <i2c1_transmit>:
uint8_t i2c1_transmit(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop)
{
    2a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    I2C1->IFC = _I2C_IFC_MASK;
    2a26:	4c39      	ldr	r4, [pc, #228]	; (2b0c <i2c1_transmit+0xe8>)
    2a28:	4d39      	ldr	r5, [pc, #228]	; (2b10 <i2c1_transmit+0xec>)
    2a2a:	63e5      	str	r5, [r4, #60]	; 0x3c

    I2C1->CMD = I2C_CMD_START;
    2a2c:	2501      	movs	r5, #1
    2a2e:	6065      	str	r5, [r4, #4]

    while(!(I2C1->IF & (I2C_IF_START | I2C_IF_RSTART | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
    2a30:	f240 6503 	movw	r5, #1539	; 0x603
    2a34:	6b66      	ldr	r6, [r4, #52]	; 0x34
    2a36:	422e      	tst	r6, r5
    2a38:	d0fc      	beq.n	2a34 <i2c1_transmit+0x10>

    if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    2a3a:	6b65      	ldr	r5, [r4, #52]	; 0x34
    2a3c:	f415 6fc0 	tst.w	r5, #1536	; 0x600
    2a40:	d003      	beq.n	2a4a <i2c1_transmit+0x26>
			{
                while(!(I2C1->IF & (I2C_IF_RXDATAV | I2C_IF_ARBLOST | I2C_IF_BUSERR)));

                if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
                {
                    I2C1->CMD = I2C_CMD_ABORT;
    2a42:	2320      	movs	r3, #32
    2a44:	6063      	str	r3, [r4, #4]

                    return 0;
    2a46:	2000      	movs	r0, #0
            return 0;
        }
    }

	return 1;
}
    2a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    I2C1->TXDATA = ubAddress;
    2a4a:	62e0      	str	r0, [r4, #44]	; 0x2c
    while(!(I2C1->IF & (I2C_IF_ACK | I2C_IF_NACK | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
    2a4c:	6b65      	ldr	r5, [r4, #52]	; 0x34
    2a4e:	f415 6fd8 	tst.w	r5, #1728	; 0x6c0
    2a52:	d0fb      	beq.n	2a4c <i2c1_transmit+0x28>
    if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    2a54:	6b65      	ldr	r5, [r4, #52]	; 0x34
    2a56:	f415 6fc0 	tst.w	r5, #1536	; 0x600
    2a5a:	d1f2      	bne.n	2a42 <i2c1_transmit+0x1e>
    else if(I2C1->IF & I2C_IF_NACK)
    2a5c:	6b65      	ldr	r5, [r4, #52]	; 0x34
    2a5e:	062d      	lsls	r5, r5, #24
    2a60:	d50c      	bpl.n	2a7c <i2c1_transmit+0x58>
        I2C1->CMD = I2C_CMD_STOP;
    2a62:	2302      	movs	r3, #2
    2a64:	6063      	str	r3, [r4, #4]
        while(I2C1->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
    2a66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2a68:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
    2a6c:	d1fb      	bne.n	2a66 <i2c1_transmit+0x42>
                    if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    2a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2a70:	f413 6fc0 	tst.w	r3, #1536	; 0x600
    2a74:	d0e7      	beq.n	2a46 <i2c1_transmit+0x22>
            I2C1->CMD = I2C_CMD_ABORT;
    2a76:	2320      	movs	r3, #32
    2a78:	6063      	str	r3, [r4, #4]
            return 0;
    2a7a:	e7e5      	b.n	2a48 <i2c1_transmit+0x24>
	if(ulCount)
    2a7c:	b1e2      	cbz	r2, 2ab8 <i2c1_transmit+0x94>
    2a7e:	3101      	adds	r1, #1
			if (ubAddress & 1) // Read
    2a80:	f000 0001 	and.w	r0, r0, #1
                    I2C1->CMD = I2C_CMD_NACK;
    2a84:	2508      	movs	r5, #8
                    I2C1->CMD = I2C_CMD_ACK;
    2a86:	2604      	movs	r6, #4
                I2C1->IFC = I2C_IFC_ACK;
    2a88:	2740      	movs	r7, #64	; 0x40
			if (ubAddress & 1) // Read
    2a8a:	b1c0      	cbz	r0, 2abe <i2c1_transmit+0x9a>
                while(!(I2C1->IF & (I2C_IF_RXDATAV | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
    2a8c:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    2a90:	f41c 6fc4 	tst.w	ip, #1568	; 0x620
    2a94:	d0fa      	beq.n	2a8c <i2c1_transmit+0x68>
                if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    2a96:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    2a9a:	f41c 6fc0 	tst.w	ip, #1536	; 0x600
    2a9e:	d1d0      	bne.n	2a42 <i2c1_transmit+0x1e>
				*(pubSrc++) = I2C1->RXDATA;
    2aa0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
    2aa4:	f801 cc01 	strb.w	ip, [r1, #-1]
				if (ulCount > 1)
    2aa8:	2a01      	cmp	r2, #1
                    I2C1->CMD = I2C_CMD_ACK;
    2aaa:	bf8c      	ite	hi
    2aac:	6066      	strhi	r6, [r4, #4]
                    I2C1->CMD = I2C_CMD_NACK;
    2aae:	6065      	strls	r5, [r4, #4]
		} while(--ulCount);
    2ab0:	3a01      	subs	r2, #1
    2ab2:	f101 0101 	add.w	r1, r1, #1
    2ab6:	d1e8      	bne.n	2a8a <i2c1_transmit+0x66>
    if(ubStop)
    2ab8:	b9e3      	cbnz	r3, 2af4 <i2c1_transmit+0xd0>
	return 1;
    2aba:	2001      	movs	r0, #1
    2abc:	e7c4      	b.n	2a48 <i2c1_transmit+0x24>
                I2C1->IFC = I2C_IFC_ACK;
    2abe:	63e7      	str	r7, [r4, #60]	; 0x3c
				I2C1->TXDATA = *(pubSrc++);
    2ac0:	f811 cc01 	ldrb.w	ip, [r1, #-1]
    2ac4:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
                while(!(I2C1->IF & (I2C_IF_ACK | I2C_IF_NACK | I2C_IF_ARBLOST | I2C_IF_BUSERR)));
    2ac8:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    2acc:	f41c 6fd8 	tst.w	ip, #1728	; 0x6c0
    2ad0:	d0fa      	beq.n	2ac8 <i2c1_transmit+0xa4>
                if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    2ad2:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    2ad6:	f41c 6fc0 	tst.w	ip, #1536	; 0x600
    2ada:	d1b2      	bne.n	2a42 <i2c1_transmit+0x1e>
                else if(I2C1->IF & I2C_IF_NACK)
    2adc:	f8d4 c034 	ldr.w	ip, [r4, #52]	; 0x34
    2ae0:	f01c 0f80 	tst.w	ip, #128	; 0x80
    2ae4:	d0e4      	beq.n	2ab0 <i2c1_transmit+0x8c>
                    I2C1->CMD = I2C_CMD_STOP;
    2ae6:	2302      	movs	r3, #2
    2ae8:	6063      	str	r3, [r4, #4]
                    while(I2C1->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
    2aea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2aec:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
    2af0:	d1fb      	bne.n	2aea <i2c1_transmit+0xc6>
    2af2:	e7bc      	b.n	2a6e <i2c1_transmit+0x4a>
        I2C1->CMD = I2C_CMD_STOP;
    2af4:	2302      	movs	r3, #2
    2af6:	6063      	str	r3, [r4, #4]
        while(I2C1->IFC & (I2C_IFC_MSTOP | I2C_IFC_ARBLOST | I2C_IF_BUSERR));
    2af8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    2afa:	f410 60e0 	ands.w	r0, r0, #1792	; 0x700
    2afe:	d1fb      	bne.n	2af8 <i2c1_transmit+0xd4>
        if(I2C1->IF & (I2C_IF_ARBLOST | I2C_IF_BUSERR))
    2b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2b02:	f413 6fc0 	tst.w	r3, #1536	; 0x600
    2b06:	d0d8      	beq.n	2aba <i2c1_transmit+0x96>
    2b08:	e7b5      	b.n	2a76 <i2c1_transmit+0x52>
    2b0a:	bf00      	nop
    2b0c:	40089400 	.word	0x40089400
    2b10:	0007ffcf 	.word	0x0007ffcf

00002b14 <cmu_update_clocks>:
    // LFE Clock
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
}
void cmu_update_clocks()
{
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
    2b14:	49a1      	ldr	r1, [pc, #644]	; (2d9c <cmu_update_clocks+0x288>)
    2b16:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    2b1a:	049b      	lsls	r3, r3, #18
{
    2b1c:	b530      	push	{r4, r5, lr}
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
    2b1e:	d518      	bpl.n	2b52 <cmu_update_clocks+0x3e>
    {
        float fPLLMul = (float)(((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
    2b20:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    2b22:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    2b24:	f3c2 420b 	ubfx	r2, r2, #16, #12
    2b28:	3201      	adds	r2, #1
    2b2a:	ee07 2a90 	vmov	s15, r2
    2b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2b32:	3301      	adds	r3, #1
    2b34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2b38:	ee07 3a90 	vmov	s15, r3

        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
    2b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        float fPLLMul = (float)(((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
    2b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
    2b42:	f003 0318 	and.w	r3, r3, #24
    2b46:	2b08      	cmp	r3, #8
        float fPLLMul = (float)(((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
    2b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
    2b4c:	d025      	beq.n	2b9a <cmu_update_clocks+0x86>
    2b4e:	d813      	bhi.n	2b78 <cmu_update_clocks+0x64>
    2b50:	b1cb      	cbz	r3, 2b86 <cmu_update_clocks+0x72>
                HFRCO_VALUE = 0 * fPLLMul; // TODO: Support external clock
            break;
        }
    }

    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
    2b52:	4b93      	ldr	r3, [pc, #588]	; (2da0 <cmu_update_clocks+0x28c>)

    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
    2b54:	4991      	ldr	r1, [pc, #580]	; (2d9c <cmu_update_clocks+0x288>)
    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
    2b56:	6818      	ldr	r0, [r3, #0]
    2b58:	4b92      	ldr	r3, [pc, #584]	; (2da4 <cmu_update_clocks+0x290>)
    2b5a:	6018      	str	r0, [r3, #0]
    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
    2b5c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
    2b60:	4b91      	ldr	r3, [pc, #580]	; (2da8 <cmu_update_clocks+0x294>)
    2b62:	f002 0207 	and.w	r2, r2, #7
    2b66:	3a01      	subs	r2, #1
    2b68:	2a06      	cmp	r2, #6
    2b6a:	d824      	bhi.n	2bb6 <cmu_update_clocks+0xa2>
    2b6c:	e8df f002 	tbb	[pc, r2]
    2b70:	8280211e 	.word	0x8280211e
    2b74:	8985      	.short	0x8985
    2b76:	8b          	.byte	0x8b
    2b77:	00          	.byte	0x00
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
    2b78:	2b10      	cmp	r3, #16
    2b7a:	d011      	beq.n	2ba0 <cmu_update_clocks+0x8c>
    2b7c:	2b18      	cmp	r3, #24
    2b7e:	d1e8      	bne.n	2b52 <cmu_update_clocks+0x3e>
                HFRCO_VALUE = 0 * fPLLMul; // TODO: Support external clock
    2b80:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 2dac <cmu_update_clocks+0x298>
    2b84:	e001      	b.n	2b8a <cmu_update_clocks+0x76>
                HFRCO_VALUE = HFXO_VALUE * fPLLMul;
    2b86:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 2db0 <cmu_update_clocks+0x29c>
                HFRCO_VALUE = 0 * fPLLMul; // TODO: Support external clock
    2b8a:	4b8a      	ldr	r3, [pc, #552]	; (2db4 <cmu_update_clocks+0x2a0>)
    2b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
    2b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2b94:	edc3 7a00 	vstr	s15, [r3]
            break;
    2b98:	e7db      	b.n	2b52 <cmu_update_clocks+0x3e>
                HFRCO_VALUE = LFXO_VALUE * fPLLMul;
    2b9a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 2db8 <cmu_update_clocks+0x2a4>
    2b9e:	e7f4      	b.n	2b8a <cmu_update_clocks+0x76>
                HFRCO_VALUE = USHFRCO_VALUE * fPLLMul;
    2ba0:	4b86      	ldr	r3, [pc, #536]	; (2dbc <cmu_update_clocks+0x2a8>)
    2ba2:	ed93 7a00 	vldr	s14, [r3]
    2ba6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2baa:	e7ee      	b.n	2b8a <cmu_update_clocks+0x76>
    {
        case CMU_HFCLKSTATUS_SELECTED_HFRCO:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE;
    2bac:	4a81      	ldr	r2, [pc, #516]	; (2db4 <cmu_update_clocks+0x2a0>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_HFRCODIV2:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
        case CMU_HFCLKSTATUS_SELECTED_USHFRCO:
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
    2bae:	6812      	ldr	r2, [r2, #0]
    2bb0:	e000      	b.n	2bb4 <cmu_update_clocks+0xa0>
            HFSRC_CLOCK_FREQ = HFXO_VALUE;
    2bb2:	4a83      	ldr	r2, [pc, #524]	; (2dc0 <cmu_update_clocks+0x2ac>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_CLKIN0:
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
    2bb4:	601a      	str	r2, [r3, #0]
        break;
    }

    HF_CLOCK_FREQ = HFSRC_CLOCK_FREQ / (((CMU->HFPRESC & _CMU_HFPRESC_PRESC_MASK) >> _CMU_HFPRESC_PRESC_SHIFT) + 1);
    2bb6:	681c      	ldr	r4, [r3, #0]
    2bb8:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
    2bbc:	4a81      	ldr	r2, [pc, #516]	; (2dc4 <cmu_update_clocks+0x2b0>)
    2bbe:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2bc2:	3301      	adds	r3, #1
    2bc4:	fbb4 f3f3 	udiv	r3, r4, r3
    2bc8:	6013      	str	r3, [r2, #0]

    switch(CMU->HFPRESC & _CMU_HFPRESC_HFCLKLEPRESC_MASK)
    2bca:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    2bce:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
    2bd2:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    2bd6:	d058      	beq.n	2c8a <cmu_update_clocks+0x176>
    2bd8:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
    2bdc:	d057      	beq.n	2c8e <cmu_update_clocks+0x17a>
    2bde:	b912      	cbnz	r2, 2be6 <cmu_update_clocks+0xd2>
    {
        case CMU_HFPRESC_HFCLKLEPRESC_DIV2:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 1;
    2be0:	085a      	lsrs	r2, r3, #1
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV4:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV8:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
    2be2:	4979      	ldr	r1, [pc, #484]	; (2dc8 <cmu_update_clocks+0x2b4>)
    2be4:	600a      	str	r2, [r1, #0]
        break;
    }

    HFBUS_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFBUSPRESC & _CMU_HFBUSPRESC_PRESC_MASK) >> _CMU_HFBUSPRESC_PRESC_SHIFT) + 1);
    2be6:	4a6d      	ldr	r2, [pc, #436]	; (2d9c <cmu_update_clocks+0x288>)
    2be8:	4d78      	ldr	r5, [pc, #480]	; (2dcc <cmu_update_clocks+0x2b8>)
    2bea:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    2bee:	f3c1 2108 	ubfx	r1, r1, #8, #9
    2bf2:	3101      	adds	r1, #1
    2bf4:	fbb3 f1f1 	udiv	r1, r3, r1
    2bf8:	6029      	str	r1, [r5, #0]
    HFCORE_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFCOREPRESC & _CMU_HFCOREPRESC_PRESC_MASK) >> _CMU_HFCOREPRESC_PRESC_SHIFT) + 1);
    2bfa:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
    2bfe:	4d74      	ldr	r5, [pc, #464]	; (2dd0 <cmu_update_clocks+0x2bc>)
    2c00:	f3c1 2108 	ubfx	r1, r1, #8, #9
    2c04:	3101      	adds	r1, #1
    2c06:	fbb3 f1f1 	udiv	r1, r3, r1
    2c0a:	6029      	str	r1, [r5, #0]
    HFEXP_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFEXPPRESC & _CMU_HFEXPPRESC_PRESC_MASK) >> _CMU_HFEXPPRESC_PRESC_SHIFT) + 1);
    2c0c:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
    2c10:	4d70      	ldr	r5, [pc, #448]	; (2dd4 <cmu_update_clocks+0x2c0>)
    2c12:	f3c1 2104 	ubfx	r1, r1, #8, #5
    2c16:	3101      	adds	r1, #1
    2c18:	fbb3 f1f1 	udiv	r1, r3, r1
    2c1c:	6029      	str	r1, [r5, #0]
    HFPER_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESC & _CMU_HFPERPRESC_PRESC_MASK) >> _CMU_HFPERPRESC_PRESC_SHIFT) + 1);
    2c1e:	f8d2 110c 	ldr.w	r1, [r2, #268]	; 0x10c
    2c22:	4d6d      	ldr	r5, [pc, #436]	; (2dd8 <cmu_update_clocks+0x2c4>)
    2c24:	f3c1 2108 	ubfx	r1, r1, #8, #9
    2c28:	3101      	adds	r1, #1
    2c2a:	fbb3 f1f1 	udiv	r1, r3, r1
    2c2e:	6029      	str	r1, [r5, #0]
    HFPERB_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCB & _CMU_HFPERPRESCB_PRESC_MASK) >> _CMU_HFPERPRESCB_PRESC_SHIFT) + 1);
    2c30:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
    2c34:	4d69      	ldr	r5, [pc, #420]	; (2ddc <cmu_update_clocks+0x2c8>)
    2c36:	f3c1 2108 	ubfx	r1, r1, #8, #9
    2c3a:	3101      	adds	r1, #1
    2c3c:	fbb3 f1f1 	udiv	r1, r3, r1
    2c40:	6029      	str	r1, [r5, #0]
    HFPERC_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCC & _CMU_HFPERPRESCC_PRESC_MASK) >> _CMU_HFPERPRESCC_PRESC_SHIFT) + 1);
    2c42:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
    2c46:	4d66      	ldr	r5, [pc, #408]	; (2de0 <cmu_update_clocks+0x2cc>)
    2c48:	f3c1 2108 	ubfx	r1, r1, #8, #9
    2c4c:	3101      	adds	r1, #1
    2c4e:	fbb3 f1f1 	udiv	r1, r3, r1
    2c52:	6029      	str	r1, [r5, #0]

    switch(CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK)
    2c54:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
    2c58:	4d62      	ldr	r5, [pc, #392]	; (2de4 <cmu_update_clocks+0x2d0>)
    2c5a:	f001 0103 	and.w	r1, r1, #3
    2c5e:	2902      	cmp	r1, #2
    2c60:	d01a      	beq.n	2c98 <cmu_update_clocks+0x184>
    2c62:	2903      	cmp	r1, #3
    2c64:	d027      	beq.n	2cb6 <cmu_update_clocks+0x1a2>
    2c66:	2901      	cmp	r1, #1
    2c68:	d013      	beq.n	2c92 <cmu_update_clocks+0x17e>
    {
        case CMU_SDIOCTRL_SDIOCLKSEL_HFRCO:
            SDIO_CLOCK_FREQ = HFRCO_VALUE;
    2c6a:	4952      	ldr	r1, [pc, #328]	; (2db4 <cmu_update_clocks+0x2a0>)
        break;
        case CMU_SDIOCTRL_SDIOCLKSEL_AUXHFRCO:
            SDIO_CLOCK_FREQ = AUX_CLOCK_FREQ;
        break;
        case CMU_SDIOCTRL_SDIOCLKSEL_USHFRCO:
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
    2c6c:	6809      	ldr	r1, [r1, #0]
    2c6e:	e011      	b.n	2c94 <cmu_update_clocks+0x180>
            HFSRC_CLOCK_FREQ = LFRCO_VALUE;
    2c70:	4a5d      	ldr	r2, [pc, #372]	; (2de8 <cmu_update_clocks+0x2d4>)
    2c72:	e79c      	b.n	2bae <cmu_update_clocks+0x9a>
            HFSRC_CLOCK_FREQ = LFXO_VALUE;
    2c74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2c78:	e79c      	b.n	2bb4 <cmu_update_clocks+0xa0>
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
    2c7a:	4a4e      	ldr	r2, [pc, #312]	; (2db4 <cmu_update_clocks+0x2a0>)
    2c7c:	6812      	ldr	r2, [r2, #0]
    2c7e:	0852      	lsrs	r2, r2, #1
    2c80:	e798      	b.n	2bb4 <cmu_update_clocks+0xa0>
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
    2c82:	4a4e      	ldr	r2, [pc, #312]	; (2dbc <cmu_update_clocks+0x2a8>)
    2c84:	e793      	b.n	2bae <cmu_update_clocks+0x9a>
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
    2c86:	2200      	movs	r2, #0
    2c88:	e794      	b.n	2bb4 <cmu_update_clocks+0xa0>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
    2c8a:	089a      	lsrs	r2, r3, #2
    2c8c:	e7a9      	b.n	2be2 <cmu_update_clocks+0xce>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
    2c8e:	08da      	lsrs	r2, r3, #3
    2c90:	e7a7      	b.n	2be2 <cmu_update_clocks+0xce>
            SDIO_CLOCK_FREQ = HFXO_VALUE;
    2c92:	494b      	ldr	r1, [pc, #300]	; (2dc0 <cmu_update_clocks+0x2ac>)
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
    2c94:	6029      	str	r1, [r5, #0]
        break;
    2c96:	e000      	b.n	2c9a <cmu_update_clocks+0x186>
            SDIO_CLOCK_FREQ = AUX_CLOCK_FREQ;
    2c98:	6028      	str	r0, [r5, #0]
    }

    switch(CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK)
    2c9a:	f8d2 2164 	ldr.w	r2, [r2, #356]	; 0x164
    2c9e:	4953      	ldr	r1, [pc, #332]	; (2dec <cmu_update_clocks+0x2d8>)
    2ca0:	f002 0203 	and.w	r2, r2, #3
    2ca4:	2a02      	cmp	r2, #2
    2ca6:	d00b      	beq.n	2cc0 <cmu_update_clocks+0x1ac>
    2ca8:	2a03      	cmp	r2, #3
    2caa:	d016      	beq.n	2cda <cmu_update_clocks+0x1c6>
    2cac:	2a01      	cmp	r2, #1
    2cae:	d004      	beq.n	2cba <cmu_update_clocks+0x1a6>
    {
        case CMU_QSPICTRL_QSPI0CLKSEL_HFRCO:
            QSPI_CLOCK_FREQ = HFRCO_VALUE;
    2cb0:	4a40      	ldr	r2, [pc, #256]	; (2db4 <cmu_update_clocks+0x2a0>)
        break;
        case CMU_QSPICTRL_QSPI0CLKSEL_AUXHFRCO:
            QSPI_CLOCK_FREQ = AUX_CLOCK_FREQ;
        break;
        case CMU_QSPICTRL_QSPI0CLKSEL_USHFRCO:
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
    2cb2:	6812      	ldr	r2, [r2, #0]
    2cb4:	e002      	b.n	2cbc <cmu_update_clocks+0x1a8>
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
    2cb6:	4941      	ldr	r1, [pc, #260]	; (2dbc <cmu_update_clocks+0x2a8>)
    2cb8:	e7d8      	b.n	2c6c <cmu_update_clocks+0x158>
            QSPI_CLOCK_FREQ = HFXO_VALUE;
    2cba:	4a41      	ldr	r2, [pc, #260]	; (2dc0 <cmu_update_clocks+0x2ac>)
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
    2cbc:	600a      	str	r2, [r1, #0]
        break;
    2cbe:	e000      	b.n	2cc2 <cmu_update_clocks+0x1ae>
            QSPI_CLOCK_FREQ = AUX_CLOCK_FREQ;
    2cc0:	6008      	str	r0, [r1, #0]
    }

    switch(CMU->USBCTRL & _CMU_USBCTRL_USBCLKSEL_MASK)
    2cc2:	4a36      	ldr	r2, [pc, #216]	; (2d9c <cmu_update_clocks+0x288>)
    2cc4:	f8d2 11f0 	ldr.w	r1, [r2, #496]	; 0x1f0
    2cc8:	f001 0107 	and.w	r1, r1, #7
    2ccc:	2905      	cmp	r1, #5
    2cce:	d814      	bhi.n	2cfa <cmu_update_clocks+0x1e6>
    2cd0:	e8df f001 	tbb	[pc, r1]
    2cd4:	520c0905 	.word	0x520c0905
    2cd8:	5854      	.short	0x5854
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
    2cda:	4a38      	ldr	r2, [pc, #224]	; (2dbc <cmu_update_clocks+0x2a8>)
    2cdc:	e7e9      	b.n	2cb2 <cmu_update_clocks+0x19e>
    {
        case CMU_USBCTRL_USBCLKSEL_USHFRCO:
            USB_CLOCK_FREQ = USHFRCO_VALUE;
    2cde:	4a37      	ldr	r2, [pc, #220]	; (2dbc <cmu_update_clocks+0x2a8>)
        break;
        case CMU_USBCTRL_USBCLKSEL_LFXO:
            USB_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_USBCTRL_USBCLKSEL_LFRCO:
            USB_CLOCK_FREQ = LFRCO_VALUE;
    2ce0:	6811      	ldr	r1, [r2, #0]
    2ce2:	4a43      	ldr	r2, [pc, #268]	; (2df0 <cmu_update_clocks+0x2dc>)
    2ce4:	e008      	b.n	2cf8 <cmu_update_clocks+0x1e4>
            USB_CLOCK_FREQ = HFXO_VALUE;
    2ce6:	4a42      	ldr	r2, [pc, #264]	; (2df0 <cmu_update_clocks+0x2dc>)
                USB_CLOCK_FREQ = HFXO_VALUE;
    2ce8:	4935      	ldr	r1, [pc, #212]	; (2dc0 <cmu_update_clocks+0x2ac>)
    2cea:	e005      	b.n	2cf8 <cmu_update_clocks+0x1e4>
            if(CMU->HFXOCTRL & CMU_HFXOCTRL_HFXOX2EN)
    2cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2cee:	f012 0f08 	tst.w	r2, #8
    2cf2:	4a3f      	ldr	r2, [pc, #252]	; (2df0 <cmu_update_clocks+0x2dc>)
    2cf4:	d0f8      	beq.n	2ce8 <cmu_update_clocks+0x1d4>
                USB_CLOCK_FREQ = HFXO_VALUE << 1;
    2cf6:	493f      	ldr	r1, [pc, #252]	; (2df4 <cmu_update_clocks+0x2e0>)
            USB_CLOCK_FREQ = LFRCO_VALUE;
    2cf8:	6011      	str	r1, [r2, #0]
        break;
    }

    switch(CMU->DBGCLKSEL & _CMU_DBGCLKSEL_DBG_MASK)
    2cfa:	4a28      	ldr	r2, [pc, #160]	; (2d9c <cmu_update_clocks+0x288>)
    2cfc:	6f12      	ldr	r2, [r2, #112]	; 0x70
    2cfe:	f002 0203 	and.w	r2, r2, #3
    2d02:	2a01      	cmp	r2, #1
    2d04:	d046      	beq.n	2d94 <cmu_update_clocks+0x280>
    2d06:	2a00      	cmp	r2, #0
    2d08:	d03e      	beq.n	2d88 <cmu_update_clocks+0x274>
    2d0a:	2a02      	cmp	r2, #2
    2d0c:	d03f      	beq.n	2d8e <cmu_update_clocks+0x27a>
        case CMU_DBGCLKSEL_DBG_HFRCODIV2:
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
    }

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
    2d0e:	4923      	ldr	r1, [pc, #140]	; (2d9c <cmu_update_clocks+0x288>)
    2d10:	4a39      	ldr	r2, [pc, #228]	; (2df8 <cmu_update_clocks+0x2e4>)
    2d12:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
    2d16:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2d1a:	2b10      	cmp	r3, #16
    2d1c:	d07a      	beq.n	2e14 <cmu_update_clocks+0x300>
    2d1e:	d873      	bhi.n	2e08 <cmu_update_clocks+0x2f4>
    2d20:	2b00      	cmp	r3, #0
    2d22:	d07a      	beq.n	2e1a <cmu_update_clocks+0x306>
        case CMU_ADCCTRL_ADC0CLKSEL_HFSRCCLK:
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC0_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKDIV_MASK) >> _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) + 1);
    2d24:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
    2d28:	6815      	ldr	r5, [r2, #0]
    2d2a:	f003 0303 	and.w	r3, r3, #3
    2d2e:	3301      	adds	r3, #1
    2d30:	fbb5 f3f3 	udiv	r3, r5, r3
    2d34:	6013      	str	r3, [r2, #0]

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
    2d36:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
    2d3a:	4a30      	ldr	r2, [pc, #192]	; (2dfc <cmu_update_clocks+0x2e8>)
    2d3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    2d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2d44:	d073      	beq.n	2e2e <cmu_update_clocks+0x31a>
    2d46:	d86a      	bhi.n	2e1e <cmu_update_clocks+0x30a>
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d073      	beq.n	2e34 <cmu_update_clocks+0x320>
        case CMU_ADCCTRL_ADC1CLKSEL_HFSRCCLK:
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC1_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKDIV_MASK) >> _CMU_ADCCTRL_ADC1CLKDIV_SHIFT) + 1);
    2d4c:	4b13      	ldr	r3, [pc, #76]	; (2d9c <cmu_update_clocks+0x288>)
    2d4e:	6810      	ldr	r0, [r2, #0]
    2d50:	f8d3 115c 	ldr.w	r1, [r3, #348]	; 0x15c
    2d54:	f3c1 4101 	ubfx	r1, r1, #16, #2
    2d58:	3101      	adds	r1, #1
    2d5a:	fbb0 f1f1 	udiv	r1, r0, r1
    2d5e:	6011      	str	r1, [r2, #0]

    switch(CMU->LFACLKSEL & _CMU_LFACLKSEL_LFA_MASK)
    2d60:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    2d64:	4a26      	ldr	r2, [pc, #152]	; (2e00 <cmu_update_clocks+0x2ec>)
    2d66:	f001 0107 	and.w	r1, r1, #7
    2d6a:	2904      	cmp	r1, #4
    2d6c:	d866      	bhi.n	2e3c <cmu_update_clocks+0x328>
    2d6e:	e8df f001 	tbb	[pc, r1]
    2d72:	9963      	.short	0x9963
    2d74:	659c      	.short	0x659c
    2d76:	9f          	.byte	0x9f
    2d77:	00          	.byte	0x00
            USB_CLOCK_FREQ = HFRCO_VALUE;
    2d78:	4a0e      	ldr	r2, [pc, #56]	; (2db4 <cmu_update_clocks+0x2a0>)
    2d7a:	e7b1      	b.n	2ce0 <cmu_update_clocks+0x1cc>
            USB_CLOCK_FREQ = LFXO_VALUE;
    2d7c:	4a1c      	ldr	r2, [pc, #112]	; (2df0 <cmu_update_clocks+0x2dc>)
    2d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2d82:	e7b9      	b.n	2cf8 <cmu_update_clocks+0x1e4>
            USB_CLOCK_FREQ = LFRCO_VALUE;
    2d84:	4a18      	ldr	r2, [pc, #96]	; (2de8 <cmu_update_clocks+0x2d4>)
    2d86:	e7ab      	b.n	2ce0 <cmu_update_clocks+0x1cc>
            DBG_CLOCK_FREQ = AUX_CLOCK_FREQ;
    2d88:	4b1e      	ldr	r3, [pc, #120]	; (2e04 <cmu_update_clocks+0x2f0>)
    2d8a:	6018      	str	r0, [r3, #0]
        break;
    2d8c:	e7bf      	b.n	2d0e <cmu_update_clocks+0x1fa>
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
    2d8e:	4b09      	ldr	r3, [pc, #36]	; (2db4 <cmu_update_clocks+0x2a0>)
    2d90:	681b      	ldr	r3, [r3, #0]
    2d92:	085b      	lsrs	r3, r3, #1
    2d94:	4a1b      	ldr	r2, [pc, #108]	; (2e04 <cmu_update_clocks+0x2f0>)
    2d96:	6013      	str	r3, [r2, #0]
        break;
    2d98:	e7b9      	b.n	2d0e <cmu_update_clocks+0x1fa>
    2d9a:	bf00      	nop
    2d9c:	400e4000 	.word	0x400e4000
    2da0:	20000004 	.word	0x20000004
    2da4:	20000158 	.word	0x20000158
    2da8:	2000013c 	.word	0x2000013c
    2dac:	00000000 	.word	0x00000000
    2db0:	4af42400 	.word	0x4af42400
    2db4:	20000008 	.word	0x20000008
    2db8:	47000000 	.word	0x47000000
    2dbc:	20000014 	.word	0x20000014
    2dc0:	007a1200 	.word	0x007a1200
    2dc4:	20000164 	.word	0x20000164
    2dc8:	20000114 	.word	0x20000114
    2dcc:	20000140 	.word	0x20000140
    2dd0:	20000128 	.word	0x20000128
    2dd4:	2000014c 	.word	0x2000014c
    2dd8:	2000015c 	.word	0x2000015c
    2ddc:	20000150 	.word	0x20000150
    2de0:	20000148 	.word	0x20000148
    2de4:	20000160 	.word	0x20000160
    2de8:	2000000c 	.word	0x2000000c
    2dec:	20000144 	.word	0x20000144
    2df0:	20000108 	.word	0x20000108
    2df4:	00f42400 	.word	0x00f42400
    2df8:	20000120 	.word	0x20000120
    2dfc:	2000012c 	.word	0x2000012c
    2e00:	20000110 	.word	0x20000110
    2e04:	20000178 	.word	0x20000178
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
    2e08:	2b20      	cmp	r3, #32
    2e0a:	d005      	beq.n	2e18 <cmu_update_clocks+0x304>
    2e0c:	2b30      	cmp	r3, #48	; 0x30
    2e0e:	d189      	bne.n	2d24 <cmu_update_clocks+0x210>
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
    2e10:	6014      	str	r4, [r2, #0]
        break;
    2e12:	e787      	b.n	2d24 <cmu_update_clocks+0x210>
            ADC0_CLOCK_FREQ = AUX_CLOCK_FREQ;
    2e14:	6010      	str	r0, [r2, #0]
        break;
    2e16:	e785      	b.n	2d24 <cmu_update_clocks+0x210>
            ADC0_CLOCK_FREQ = HFXO_VALUE;
    2e18:	4b59      	ldr	r3, [pc, #356]	; (2f80 <cmu_update_clocks+0x46c>)
    2e1a:	6013      	str	r3, [r2, #0]
        break;
    2e1c:	e782      	b.n	2d24 <cmu_update_clocks+0x210>
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
    2e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    2e22:	d006      	beq.n	2e32 <cmu_update_clocks+0x31e>
    2e24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    2e28:	d190      	bne.n	2d4c <cmu_update_clocks+0x238>
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
    2e2a:	6014      	str	r4, [r2, #0]
        break;
    2e2c:	e78e      	b.n	2d4c <cmu_update_clocks+0x238>
            ADC1_CLOCK_FREQ = AUX_CLOCK_FREQ;
    2e2e:	6010      	str	r0, [r2, #0]
        break;
    2e30:	e78c      	b.n	2d4c <cmu_update_clocks+0x238>
            ADC1_CLOCK_FREQ = HFXO_VALUE;
    2e32:	4b53      	ldr	r3, [pc, #332]	; (2f80 <cmu_update_clocks+0x46c>)
    2e34:	6013      	str	r3, [r2, #0]
        break;
    2e36:	e789      	b.n	2d4c <cmu_update_clocks+0x238>
    {
        case CMU_LFACLKSEL_LFA_DISABLED:
            LFA_CLOCK_FREQ = 0;
    2e38:	2100      	movs	r1, #0
        break;
        case CMU_LFACLKSEL_LFA_LFXO:
            LFA_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFACLKSEL_LFA_ULFRCO:
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    2e3a:	6011      	str	r1, [r2, #0]
        break;
    }

    LESENSE_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LESENSE_MASK) >> _CMU_LFAPRESC0_LESENSE_SHIFT);
    2e3c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    2e40:	6812      	ldr	r2, [r2, #0]
    2e42:	4850      	ldr	r0, [pc, #320]	; (2f84 <cmu_update_clocks+0x470>)
    2e44:	f3c1 2101 	ubfx	r1, r1, #8, #2
    2e48:	fa02 f101 	lsl.w	r1, r2, r1
    2e4c:	6001      	str	r1, [r0, #0]
    RTC_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK) >> _CMU_LFAPRESC0_RTC_SHIFT);
    2e4e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    2e52:	484d      	ldr	r0, [pc, #308]	; (2f88 <cmu_update_clocks+0x474>)
    2e54:	f3c1 4103 	ubfx	r1, r1, #16, #4
    2e58:	fa02 f101 	lsl.w	r1, r2, r1
    2e5c:	6001      	str	r1, [r0, #0]
    LCD_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK) >> _CMU_LFAPRESC0_LCD_SHIFT);
    2e5e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    2e62:	484a      	ldr	r0, [pc, #296]	; (2f8c <cmu_update_clocks+0x478>)
    2e64:	f3c1 3102 	ubfx	r1, r1, #12, #3
    2e68:	fa02 f101 	lsl.w	r1, r2, r1
    2e6c:	6001      	str	r1, [r0, #0]
    LETIMER0_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK) >> _CMU_LFAPRESC0_LETIMER0_SHIFT);
    2e6e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    2e72:	4847      	ldr	r0, [pc, #284]	; (2f90 <cmu_update_clocks+0x47c>)
    2e74:	f001 010f 	and.w	r1, r1, #15
    2e78:	fa02 f101 	lsl.w	r1, r2, r1
    2e7c:	6001      	str	r1, [r0, #0]
    LETIMER1_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER1_MASK) >> _CMU_LFAPRESC0_LETIMER1_SHIFT);
    2e7e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    2e82:	f3c1 1103 	ubfx	r1, r1, #4, #4
    2e86:	408a      	lsls	r2, r1
    2e88:	4942      	ldr	r1, [pc, #264]	; (2f94 <cmu_update_clocks+0x480>)
    2e8a:	600a      	str	r2, [r1, #0]

    switch(CMU->LFBCLKSEL & _CMU_LFBCLKSEL_LFB_MASK)
    2e8c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    2e90:	4b41      	ldr	r3, [pc, #260]	; (2f98 <cmu_update_clocks+0x484>)
    2e92:	f002 0207 	and.w	r2, r2, #7
    2e96:	2a04      	cmp	r2, #4
    2e98:	d80e      	bhi.n	2eb8 <cmu_update_clocks+0x3a4>
    2e9a:	e8df f002 	tbb	[pc, r2]
    2e9e:	3a0b      	.short	0x3a0b
    2ea0:	403d      	.short	0x403d
    2ea2:	42          	.byte	0x42
    2ea3:	00          	.byte	0x00
            LFA_CLOCK_FREQ = LFRCO_VALUE;
    2ea4:	493d      	ldr	r1, [pc, #244]	; (2f9c <cmu_update_clocks+0x488>)
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    2ea6:	6809      	ldr	r1, [r1, #0]
    2ea8:	e7c7      	b.n	2e3a <cmu_update_clocks+0x326>
            LFA_CLOCK_FREQ = LFXO_VALUE;
    2eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2eae:	e7c4      	b.n	2e3a <cmu_update_clocks+0x326>
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    2eb0:	493b      	ldr	r1, [pc, #236]	; (2fa0 <cmu_update_clocks+0x48c>)
    2eb2:	e7f8      	b.n	2ea6 <cmu_update_clocks+0x392>
    {
        case CMU_LFBCLKSEL_LFB_DISABLED:
            LFB_CLOCK_FREQ = 0;
    2eb4:	2200      	movs	r2, #0
        break;
        case CMU_LFBCLKSEL_LFB_HFCLKLE:
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
        break;
        case CMU_LFBCLKSEL_LFB_ULFRCO:
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    2eb6:	601a      	str	r2, [r3, #0]
        break;
    }

    LEUART0_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK) >> _CMU_LFBPRESC0_LEUART0_SHIFT);
    2eb8:	681a      	ldr	r2, [r3, #0]
    2eba:	4b3a      	ldr	r3, [pc, #232]	; (2fa4 <cmu_update_clocks+0x490>)
    2ebc:	483a      	ldr	r0, [pc, #232]	; (2fa8 <cmu_update_clocks+0x494>)
    2ebe:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    2ec2:	f001 0103 	and.w	r1, r1, #3
    2ec6:	fa02 f101 	lsl.w	r1, r2, r1
    2eca:	6001      	str	r1, [r0, #0]
    LEUART1_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK) >> _CMU_LFBPRESC0_LEUART1_SHIFT);
    2ecc:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    2ed0:	4836      	ldr	r0, [pc, #216]	; (2fac <cmu_update_clocks+0x498>)
    2ed2:	f3c1 1101 	ubfx	r1, r1, #4, #2
    2ed6:	fa02 f101 	lsl.w	r1, r2, r1
    2eda:	6001      	str	r1, [r0, #0]
    SYSTICK_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_SYSTICK_MASK) >> _CMU_LFBPRESC0_SYSTICK_SHIFT);
    2edc:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    2ee0:	4833      	ldr	r0, [pc, #204]	; (2fb0 <cmu_update_clocks+0x49c>)
    2ee2:	f3c1 2103 	ubfx	r1, r1, #8, #4
    2ee6:	fa02 f101 	lsl.w	r1, r2, r1
    2eea:	6001      	str	r1, [r0, #0]
    CSEN_CLOCK_FREQ = LFB_CLOCK_FREQ << (((CMU->LFBPRESC0 & _CMU_LFBPRESC0_CSEN_MASK) >> _CMU_LFBPRESC0_CSEN_SHIFT) + 4);
    2eec:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    2ef0:	f3c1 3101 	ubfx	r1, r1, #12, #2
    2ef4:	3104      	adds	r1, #4
    2ef6:	408a      	lsls	r2, r1
    2ef8:	492e      	ldr	r1, [pc, #184]	; (2fb4 <cmu_update_clocks+0x4a0>)
    2efa:	600a      	str	r2, [r1, #0]

    switch(CMU->LFCCLKSEL & _CMU_LFCCLKSEL_LFC_MASK)
    2efc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    2f00:	f002 0207 	and.w	r2, r2, #7
    2f04:	2a04      	cmp	r2, #4
    2f06:	d811      	bhi.n	2f2c <cmu_update_clocks+0x418>
    2f08:	e8df f002 	tbb	[pc, r2]
    2f0c:	10201c0d 	.word	0x10201c0d
    2f10:	24          	.byte	0x24
    2f11:	00          	.byte	0x00
            LFB_CLOCK_FREQ = LFRCO_VALUE;
    2f12:	4a22      	ldr	r2, [pc, #136]	; (2f9c <cmu_update_clocks+0x488>)
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    2f14:	6812      	ldr	r2, [r2, #0]
    2f16:	e7ce      	b.n	2eb6 <cmu_update_clocks+0x3a2>
            LFB_CLOCK_FREQ = LFXO_VALUE;
    2f18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2f1c:	e7cb      	b.n	2eb6 <cmu_update_clocks+0x3a2>
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
    2f1e:	4a26      	ldr	r2, [pc, #152]	; (2fb8 <cmu_update_clocks+0x4a4>)
    2f20:	e7f8      	b.n	2f14 <cmu_update_clocks+0x400>
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    2f22:	4a1f      	ldr	r2, [pc, #124]	; (2fa0 <cmu_update_clocks+0x48c>)
    2f24:	e7f6      	b.n	2f14 <cmu_update_clocks+0x400>
    {
        case CMU_LFCCLKSEL_LFC_DISABLED:
            LFC_CLOCK_FREQ = 0;
    2f26:	4a25      	ldr	r2, [pc, #148]	; (2fbc <cmu_update_clocks+0x4a8>)
    2f28:	2100      	movs	r1, #0
        break;
        case CMU_LFCCLKSEL_LFC_LFXO:
            LFC_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFCCLKSEL_LFC_ULFRCO:
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    2f2a:	6011      	str	r1, [r2, #0]
        break;
    }

    switch(CMU->LFECLKSEL & _CMU_LFECLKSEL_LFE_MASK)
    2f2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2f30:	4b23      	ldr	r3, [pc, #140]	; (2fc0 <cmu_update_clocks+0x4ac>)
    2f32:	f002 0207 	and.w	r2, r2, #7
    2f36:	2a04      	cmp	r2, #4
    2f38:	d810      	bhi.n	2f5c <cmu_update_clocks+0x448>
    2f3a:	e8df f002 	tbb	[pc, r2]
    2f3e:	190d      	.short	0x190d
    2f40:	0f1c      	.short	0x0f1c
    2f42:	1f          	.byte	0x1f
    2f43:	00          	.byte	0x00
            LFC_CLOCK_FREQ = LFRCO_VALUE;
    2f44:	4a15      	ldr	r2, [pc, #84]	; (2f9c <cmu_update_clocks+0x488>)
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    2f46:	6811      	ldr	r1, [r2, #0]
    2f48:	4a1c      	ldr	r2, [pc, #112]	; (2fbc <cmu_update_clocks+0x4a8>)
    2f4a:	e7ee      	b.n	2f2a <cmu_update_clocks+0x416>
            LFC_CLOCK_FREQ = LFXO_VALUE;
    2f4c:	4a1b      	ldr	r2, [pc, #108]	; (2fbc <cmu_update_clocks+0x4a8>)
    2f4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2f52:	e7ea      	b.n	2f2a <cmu_update_clocks+0x416>
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    2f54:	4a12      	ldr	r2, [pc, #72]	; (2fa0 <cmu_update_clocks+0x48c>)
    2f56:	e7f6      	b.n	2f46 <cmu_update_clocks+0x432>
    {
        case CMU_LFECLKSEL_LFE_DISABLED:
            LFE_CLOCK_FREQ = 0;
    2f58:	2200      	movs	r2, #0
        break;
        case CMU_LFECLKSEL_LFE_LFXO:
            LFE_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFECLKSEL_LFE_ULFRCO:
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    2f5a:	601a      	str	r2, [r3, #0]
        break;
    }

    RTCC_CLOCK_FREQ = LFE_CLOCK_FREQ << ((CMU->LFEPRESC0 & _CMU_LFEPRESC0_RTCC_MASK) >> _CMU_LFEPRESC0_RTCC_SHIFT);
    2f5c:	4a11      	ldr	r2, [pc, #68]	; (2fa4 <cmu_update_clocks+0x490>)
    2f5e:	681b      	ldr	r3, [r3, #0]
    2f60:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
    2f64:	f002 0203 	and.w	r2, r2, #3
    2f68:	4093      	lsls	r3, r2
    2f6a:	4a16      	ldr	r2, [pc, #88]	; (2fc4 <cmu_update_clocks+0x4b0>)
    2f6c:	6013      	str	r3, [r2, #0]
}
    2f6e:	bd30      	pop	{r4, r5, pc}
            LFE_CLOCK_FREQ = LFRCO_VALUE;
    2f70:	4a0a      	ldr	r2, [pc, #40]	; (2f9c <cmu_update_clocks+0x488>)
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    2f72:	6812      	ldr	r2, [r2, #0]
    2f74:	e7f1      	b.n	2f5a <cmu_update_clocks+0x446>
            LFE_CLOCK_FREQ = LFXO_VALUE;
    2f76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2f7a:	e7ee      	b.n	2f5a <cmu_update_clocks+0x446>
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    2f7c:	4a08      	ldr	r2, [pc, #32]	; (2fa0 <cmu_update_clocks+0x48c>)
    2f7e:	e7f8      	b.n	2f72 <cmu_update_clocks+0x45e>
    2f80:	007a1200 	.word	0x007a1200
    2f84:	20000168 	.word	0x20000168
    2f88:	2000016c 	.word	0x2000016c
    2f8c:	20000170 	.word	0x20000170
    2f90:	20000104 	.word	0x20000104
    2f94:	2000011c 	.word	0x2000011c
    2f98:	20000124 	.word	0x20000124
    2f9c:	2000000c 	.word	0x2000000c
    2fa0:	20000010 	.word	0x20000010
    2fa4:	400e4000 	.word	0x400e4000
    2fa8:	20000174 	.word	0x20000174
    2fac:	20000134 	.word	0x20000134
    2fb0:	20000118 	.word	0x20000118
    2fb4:	2000010c 	.word	0x2000010c
    2fb8:	20000114 	.word	0x20000114
    2fbc:	20000154 	.word	0x20000154
    2fc0:	20000138 	.word	0x20000138
    2fc4:	20000130 	.word	0x20000130

00002fc8 <cmu_config_waitstates>:
void cmu_config_waitstates(uint32_t ulFrequency)
{
    if(ulFrequency <= 32000000)
    2fc8:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <cmu_config_waitstates+0x18>)
    2fca:	4298      	cmp	r0, r3
    2fcc:	4b05      	ldr	r3, [pc, #20]	; (2fe4 <cmu_config_waitstates+0x1c>)
        CMU->CTRL &= ~CMU_CTRL_WSHFLE;
    2fce:	681a      	ldr	r2, [r3, #0]
    2fd0:	bf94      	ite	ls
    2fd2:	f422 3280 	bicls.w	r2, r2, #65536	; 0x10000
    else
        CMU->CTRL |= CMU_CTRL_WSHFLE;
    2fd6:	f442 3280 	orrhi.w	r2, r2, #65536	; 0x10000
    2fda:	601a      	str	r2, [r3, #0]
}
    2fdc:	4770      	bx	lr
    2fde:	bf00      	nop
    2fe0:	01e84800 	.word	0x01e84800
    2fe4:	400e4000 	.word	0x400e4000

00002fe8 <cmu_hfrco_calib>:

void cmu_hfrco_calib(uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
    2fe8:	4b08      	ldr	r3, [pc, #32]	; (300c <cmu_hfrco_calib+0x24>)
    2fea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    2fee:	04d2      	lsls	r2, r2, #19
    2ff0:	d40a      	bmi.n	3008 <cmu_hfrco_calib+0x20>
        return;

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
    2ff2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    2ff6:	01d2      	lsls	r2, r2, #7
    2ff8:	d4fb      	bmi.n	2ff2 <cmu_hfrco_calib+0xa>

    CMU->HFRCOCTRL = ulCalibration;
    2ffa:	6118      	str	r0, [r3, #16]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
    2ffc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    3000:	01d2      	lsls	r2, r2, #7
    3002:	d4fb      	bmi.n	2ffc <cmu_hfrco_calib+0x14>

    HFRCO_VALUE = ulTargetFrequency;
    3004:	4b02      	ldr	r3, [pc, #8]	; (3010 <cmu_hfrco_calib+0x28>)
    3006:	6019      	str	r1, [r3, #0]
}
    3008:	4770      	bx	lr
    300a:	bf00      	nop
    300c:	400e4000 	.word	0x400e4000
    3010:	20000008 	.word	0x20000008

00003014 <cmu_init>:
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    3014:	4b61      	ldr	r3, [pc, #388]	; (319c <cmu_init+0x188>)
{
    3016:	b570      	push	{r4, r5, r6, lr}
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    3018:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
    if((CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFXO || (CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFRCO)
    301c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    3020:	f002 0203 	and.w	r2, r2, #3
    3024:	2a01      	cmp	r2, #1
    3026:	d003      	beq.n	3030 <cmu_init+0x1c>
    3028:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    302c:	0794      	lsls	r4, r2, #30
    302e:	d106      	bne.n	303e <cmu_init+0x2a>
        CMU->SDIOCTRL = CMU_SDIOCTRL_SDIOCLKDIS | CMU_SDIOCTRL_SDIOCLKSEL_HFXO;
    3030:	2281      	movs	r2, #129	; 0x81
    3032:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        while(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    3036:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    303a:	0390      	lsls	r0, r2, #14
    303c:	d4fb      	bmi.n	3036 <cmu_init+0x22>
    uint8_t ubQSPIClockEnabled = !!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
    303e:	4b57      	ldr	r3, [pc, #348]	; (319c <cmu_init+0x188>)
    3040:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
    if((CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFXO || (CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFRCO)
    3044:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    3048:	f002 0203 	and.w	r2, r2, #3
    304c:	2a01      	cmp	r2, #1
    304e:	d003      	beq.n	3058 <cmu_init+0x44>
    3050:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    3054:	0791      	lsls	r1, r2, #30
    3056:	d106      	bne.n	3066 <cmu_init+0x52>
        CMU->QSPICTRL = CMU_QSPICTRL_QSPI0CLKDIS | CMU_QSPICTRL_QSPI0CLKSEL_HFXO;
    3058:	2281      	movs	r2, #129	; 0x81
    305a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        while(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
    305e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    3062:	0352      	lsls	r2, r2, #13
    3064:	d4fb      	bmi.n	305e <cmu_init+0x4a>
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
    3066:	4a4d      	ldr	r2, [pc, #308]	; (319c <cmu_init+0x188>)
    3068:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    306c:	04dc      	lsls	r4, r3, #19
    306e:	d506      	bpl.n	307e <cmu_init+0x6a>
        CMU->OSCENCMD = CMU_OSCENCMD_DPLLDIS;
    3070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3074:	6613      	str	r3, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_DPLLENS);
    3076:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    307a:	04d8      	lsls	r0, r3, #19
    307c:	d4fb      	bmi.n	3076 <cmu_init+0x62>
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    307e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    3082:	f013 0f04 	tst.w	r3, #4
    3086:	4b45      	ldr	r3, [pc, #276]	; (319c <cmu_init+0x188>)
    3088:	d005      	beq.n	3096 <cmu_init+0x82>
        CMU->OSCENCMD = CMU_OSCENCMD_HFXODIS;
    308a:	2108      	movs	r1, #8
    308c:	6611      	str	r1, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_HFXOENS);
    308e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    3092:	0751      	lsls	r1, r2, #29
    3094:	d4fb      	bmi.n	308e <cmu_init+0x7a>
    CMU->HFXOCTRL = CMU_HFXOCTRL_PEAKDETMODE_AUTOCMD | CMU_HFXOCTRL_MODE_XTAL;
    3096:	2210      	movs	r2, #16
    3098:	625a      	str	r2, [r3, #36]	; 0x24
    CMU->HFXOCTRL1 = CMU_HFXOCTRL1_PEAKDETTHR_DEFAULT;
    309a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    309e:	629a      	str	r2, [r3, #40]	; 0x28
    CMU->HFXOSTEADYSTATECTRL |= CMU_HFXOSTEADYSTATECTRL_PEAKMONEN;
    30a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    30a2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    30a6:	631a      	str	r2, [r3, #48]	; 0x30
    CMU->HFXOTIMEOUTCTRL = (7 << _CMU_HFXOTIMEOUTCTRL_PEAKDETTIMEOUT_SHIFT) | (8 << _CMU_HFXOTIMEOUTCTRL_STEADYTIMEOUT_SHIFT) | (12 << _CMU_HFXOTIMEOUTCTRL_STARTUPTIMEOUT_SHIFT);
    30a8:	f247 028c 	movw	r2, #28812	; 0x708c
    30ac:	635a      	str	r2, [r3, #52]	; 0x34
    CMU->OSCENCMD = CMU_OSCENCMD_HFXOEN;
    30ae:	2204      	movs	r2, #4
    30b0:	661a      	str	r2, [r3, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_HFXORDY));
    30b2:	4b3a      	ldr	r3, [pc, #232]	; (319c <cmu_init+0x188>)
    30b4:	461c      	mov	r4, r3
    30b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    30ba:	0712      	lsls	r2, r2, #28
    30bc:	d5fb      	bpl.n	30b6 <cmu_init+0xa2>
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFXO;
    30be:	2202      	movs	r2, #2
    30c0:	675a      	str	r2, [r3, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFXO);
    30c2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    30c6:	f003 0307 	and.w	r3, r3, #7
    30ca:	2b02      	cmp	r3, #2
    30cc:	d1f9      	bne.n	30c2 <cmu_init+0xae>
    cmu_hfrco_calib(HFRCO_CALIB_72M | CMU_HFRCOCTRL_FINETUNINGEN, 72000000);
    30ce:	4b34      	ldr	r3, [pc, #208]	; (31a0 <cmu_init+0x18c>)
    30d0:	4934      	ldr	r1, [pc, #208]	; (31a4 <cmu_init+0x190>)
    30d2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
    30d6:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
    30da:	f7ff ff85 	bl	2fe8 <cmu_hfrco_calib>
    CMU->DPLLCTRL = CMU_DPLLCTRL_REFSEL_HFXO | CMU_DPLLCTRL_AUTORECOVER | CMU_DPLLCTRL_EDGESEL_RISE | CMU_DPLLCTRL_MODE_FREQLL;
    30de:	2306      	movs	r3, #6
    30e0:	6423      	str	r3, [r4, #64]	; 0x40
    CMU->DPLLCTRL1 = (899 << _CMU_DPLLCTRL1_N_SHIFT) | (99 << _CMU_DPLLCTRL1_M_SHIFT); // fHFRCO = fHFXO * (N + 1) / (M + 1)
    30e2:	4b31      	ldr	r3, [pc, #196]	; (31a8 <cmu_init+0x194>)
    30e4:	6463      	str	r3, [r4, #68]	; 0x44
    CMU->OSCENCMD = CMU_OSCENCMD_DPLLEN;
    30e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    30ea:	6623      	str	r3, [r4, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_DPLLRDY));
    30ec:	4c2b      	ldr	r4, [pc, #172]	; (319c <cmu_init+0x188>)
    30ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    30f2:	0498      	lsls	r0, r3, #18
    30f4:	d5fb      	bpl.n	30ee <cmu_init+0xda>
    cmu_config_waitstates(36000000);
    30f6:	482d      	ldr	r0, [pc, #180]	; (31ac <cmu_init+0x198>)
    30f8:	f7ff ff66 	bl	2fc8 <cmu_config_waitstates>
    msc_config_waitstates(72000000);
    30fc:	4829      	ldr	r0, [pc, #164]	; (31a4 <cmu_init+0x190>)
    30fe:	f7fe fa9f 	bl	1640 <msc_config_waitstates>
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
    3102:	2300      	movs	r3, #0
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
    3104:	f44f 7280 	mov.w	r2, #256	; 0x100
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
    3108:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
    310c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    CMU->HFCOREPRESC = 0 << _CMU_HFCOREPRESC_PRESC_SHIFT;
    3110:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    CMU->HFPERPRESC = 1 << _CMU_HFPERPRESC_PRESC_SHIFT;
    3114:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    CMU->HFEXPPRESC = 0 << _CMU_HFEXPPRESC_PRESC_SHIFT;
    3118:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    CMU->HFPERPRESCB = 0 << _CMU_HFPERPRESCB_PRESC_SHIFT;
    311c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    CMU->HFPERPRESCC = 1 << _CMU_HFPERPRESCC_PRESC_SHIFT;
    3120:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    CMU->CTRL |= CMU_CTRL_HFPERCLKEN;
    3124:	6823      	ldr	r3, [r4, #0]
    3126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    312a:	6023      	str	r3, [r4, #0]
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFRCO;
    312c:	2301      	movs	r3, #1
    312e:	6763      	str	r3, [r4, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFRCO);
    3130:	4b1a      	ldr	r3, [pc, #104]	; (319c <cmu_init+0x188>)
    3132:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    3136:	f002 0207 	and.w	r2, r2, #7
    313a:	2a01      	cmp	r2, #1
    313c:	d1f9      	bne.n	3132 <cmu_init+0x11e>
    if((CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFXO)
    313e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    3142:	f002 0203 	and.w	r2, r2, #3
    3146:	2a01      	cmp	r2, #1
    3148:	d10e      	bne.n	3168 <cmu_init+0x154>
        CMU->SDIOCTRL &= ~CMU_SDIOCTRL_SDIOCLKDIS;
    314a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    314e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3152:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        while(!(CMU->STATUS & CMU_STATUS_SDIOCLKENS) && ubSDIOClockEnabled);
    3156:	4b11      	ldr	r3, [pc, #68]	; (319c <cmu_init+0x188>)
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    3158:	f405 3500 	and.w	r5, r5, #131072	; 0x20000
        while(!(CMU->STATUS & CMU_STATUS_SDIOCLKENS) && ubSDIOClockEnabled);
    315c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    3160:	0391      	lsls	r1, r2, #14
    3162:	d401      	bmi.n	3168 <cmu_init+0x154>
    3164:	2d00      	cmp	r5, #0
    3166:	d1f9      	bne.n	315c <cmu_init+0x148>
    if((CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFXO)
    3168:	4b0c      	ldr	r3, [pc, #48]	; (319c <cmu_init+0x188>)
    316a:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    316e:	f002 0203 	and.w	r2, r2, #3
    3172:	2a01      	cmp	r2, #1
    3174:	d10d      	bne.n	3192 <cmu_init+0x17e>
        CMU->QSPICTRL &= ~CMU_QSPICTRL_QSPI0CLKDIS;
    3176:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    317a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    317e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    uint8_t ubQSPIClockEnabled = !!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
    3182:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
        while(!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS) && ubQSPIClockEnabled);
    3186:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    318a:	0352      	lsls	r2, r2, #13
    318c:	d401      	bmi.n	3192 <cmu_init+0x17e>
    318e:	2e00      	cmp	r6, #0
    3190:	d1f9      	bne.n	3186 <cmu_init+0x172>
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
    3192:	4b02      	ldr	r3, [pc, #8]	; (319c <cmu_init+0x188>)
    3194:	2204      	movs	r2, #4
    3196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    319a:	bd70      	pop	{r4, r5, r6, pc}
    319c:	400e4000 	.word	0x400e4000
    31a0:	0fe081b0 	.word	0x0fe081b0
    31a4:	044aa200 	.word	0x044aa200
    31a8:	03830063 	.word	0x03830063
    31ac:	02255100 	.word	0x02255100

000031b0 <cmu_ushfrco_calib>:

void cmu_ushfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(CMU->USBCRCTRL & CMU_USBCRCTRL_USBCREN)
    31b0:	4b13      	ldr	r3, [pc, #76]	; (3200 <cmu_ushfrco_calib+0x50>)
{
    31b2:	b510      	push	{r4, lr}
    if(CMU->USBCRCTRL & CMU_USBCRCTRL_USBCREN)
    31b4:	f8d3 41f4 	ldr.w	r4, [r3, #500]	; 0x1f4
    31b8:	07e4      	lsls	r4, r4, #31
    31ba:	d407      	bmi.n	31cc <cmu_ushfrco_calib+0x1c>
        return;

    if(!ubEnable)
    31bc:	b938      	cbnz	r0, 31ce <cmu_ushfrco_calib+0x1e>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCODIS;
    31be:	f44f 6200 	mov.w	r2, #2048	; 0x800
    31c2:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_USHFRCOENS);
    31c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    31c8:	0554      	lsls	r4, r2, #21
    31ca:	d4fb      	bmi.n	31c4 <cmu_ushfrco_calib+0x14>

        while(!(CMU->STATUS & CMU_STATUS_USHFRCORDY));
    }

    USHFRCO_VALUE = ulTargetFrequency;
}
    31cc:	bd10      	pop	{r4, pc}
    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
    31ce:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    31d2:	0040      	lsls	r0, r0, #1
    31d4:	d4fb      	bmi.n	31ce <cmu_ushfrco_calib+0x1e>
    CMU->USHFRCOCTRL = ulCalibration;
    31d6:	6099      	str	r1, [r3, #8]
    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
    31d8:	4b09      	ldr	r3, [pc, #36]	; (3200 <cmu_ushfrco_calib+0x50>)
    31da:	4619      	mov	r1, r3
    31dc:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    31e0:	0044      	lsls	r4, r0, #1
    31e2:	d4fb      	bmi.n	31dc <cmu_ushfrco_calib+0x2c>
    if(ubEnable && !(CMU->STATUS & CMU_STATUS_USHFRCOENS))
    31e4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    31e8:	0540      	lsls	r0, r0, #21
    31ea:	d406      	bmi.n	31fa <cmu_ushfrco_calib+0x4a>
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCOEN;
    31ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
    31f0:	6618      	str	r0, [r3, #96]	; 0x60
        while(!(CMU->STATUS & CMU_STATUS_USHFRCORDY));
    31f2:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    31f6:	051b      	lsls	r3, r3, #20
    31f8:	d5fb      	bpl.n	31f2 <cmu_ushfrco_calib+0x42>
    USHFRCO_VALUE = ulTargetFrequency;
    31fa:	4b02      	ldr	r3, [pc, #8]	; (3204 <cmu_ushfrco_calib+0x54>)
    31fc:	601a      	str	r2, [r3, #0]
    31fe:	e7e5      	b.n	31cc <cmu_ushfrco_calib+0x1c>
    3200:	400e4000 	.word	0x400e4000
    3204:	20000014 	.word	0x20000014

00003208 <cmu_auxhfrco_calib>:

void cmu_auxhfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(!ubEnable)
    3208:	4b0f      	ldr	r3, [pc, #60]	; (3248 <cmu_auxhfrco_calib+0x40>)
    320a:	b930      	cbnz	r0, 321a <cmu_auxhfrco_calib+0x12>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCODIS;
    320c:	2220      	movs	r2, #32
    320e:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_AUXHFRCOENS);
    3210:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    3214:	06d2      	lsls	r2, r2, #27
    3216:	d4fb      	bmi.n	3210 <cmu_auxhfrco_calib+0x8>
    3218:	4770      	bx	lr

        return;
    }

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
    321a:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    321e:	0180      	lsls	r0, r0, #6
    3220:	d4fb      	bmi.n	321a <cmu_auxhfrco_calib+0x12>

    CMU->AUXHFRCOCTRL = ulCalibration;
    3222:	6199      	str	r1, [r3, #24]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
    3224:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
    3228:	0188      	lsls	r0, r1, #6
    322a:	d4fb      	bmi.n	3224 <cmu_auxhfrco_calib+0x1c>

    if(ubEnable && !(CMU->STATUS & CMU_STATUS_AUXHFRCOENS))
    322c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    3230:	06c9      	lsls	r1, r1, #27
    3232:	d406      	bmi.n	3242 <cmu_auxhfrco_calib+0x3a>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCOEN;
    3234:	2110      	movs	r1, #16
    3236:	6619      	str	r1, [r3, #96]	; 0x60

        while(!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));
    3238:	4903      	ldr	r1, [pc, #12]	; (3248 <cmu_auxhfrco_calib+0x40>)
    323a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    323e:	069b      	lsls	r3, r3, #26
    3240:	d5fb      	bpl.n	323a <cmu_auxhfrco_calib+0x32>
    }

    AUXHFRCO_VALUE = ulTargetFrequency;
    3242:	4b02      	ldr	r3, [pc, #8]	; (324c <cmu_auxhfrco_calib+0x44>)
    3244:	601a      	str	r2, [r3, #0]
}
    3246:	4770      	bx	lr
    3248:	400e4000 	.word	0x400e4000
    324c:	20000004 	.word	0x20000004

00003250 <cmu_hfxo_startup_calib>:

void cmu_hfxo_startup_calib(uint16_t usIBTrim, uint16_t usCTune)
{
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    3250:	4a08      	ldr	r2, [pc, #32]	; (3274 <cmu_hfxo_startup_calib+0x24>)
    3252:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    3256:	075b      	lsls	r3, r3, #29
    3258:	d40a      	bmi.n	3270 <cmu_hfxo_startup_calib+0x20>
        return;

    CMU->HFXOSTARTUPCTRL = (CMU->HFXOSTARTUPCTRL & ~(_CMU_HFXOSTARTUPCTRL_CTUNE_MASK | _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT) & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK);
    325a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    325c:	0d1b      	lsrs	r3, r3, #20
    325e:	f3c0 000a 	ubfx	r0, r0, #0, #11
    3262:	051b      	lsls	r3, r3, #20
    3264:	4303      	orrs	r3, r0
    3266:	4804      	ldr	r0, [pc, #16]	; (3278 <cmu_hfxo_startup_calib+0x28>)
    3268:	ea00 20c1 	and.w	r0, r0, r1, lsl #11
    326c:	4303      	orrs	r3, r0
    326e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
    3270:	4770      	bx	lr
    3272:	bf00      	nop
    3274:	400e4000 	.word	0x400e4000
    3278:	000ff800 	.word	0x000ff800

0000327c <cmu_hfxo_steady_calib>:
{
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
}
void cmu_hfxo_steady_calib(uint16_t usIBTrim, uint16_t usCTune)
{
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    327c:	4a08      	ldr	r2, [pc, #32]	; (32a0 <cmu_hfxo_steady_calib+0x24>)
    327e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    3282:	075b      	lsls	r3, r3, #29
    3284:	d40a      	bmi.n	329c <cmu_hfxo_steady_calib+0x20>
        return;

    CMU->HFXOSTEADYSTATECTRL = (CMU->HFXOSTEADYSTATECTRL & ~(_CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK | _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK);
    3286:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3288:	0d1b      	lsrs	r3, r3, #20
    328a:	f3c0 000a 	ubfx	r0, r0, #0, #11
    328e:	051b      	lsls	r3, r3, #20
    3290:	4303      	orrs	r3, r0
    3292:	4804      	ldr	r0, [pc, #16]	; (32a4 <cmu_hfxo_steady_calib+0x28>)
    3294:	ea00 20c1 	and.w	r0, r0, r1, lsl #11
    3298:	4303      	orrs	r3, r0
    329a:	6313      	str	r3, [r2, #48]	; 0x30
}
    329c:	4770      	bx	lr
    329e:	bf00      	nop
    32a0:	400e4000 	.word	0x400e4000
    32a4:	000ff800 	.word	0x000ff800

000032a8 <usart0_init>:
#include "usart.h"

#if defined(USART0_MODE_SPI)
void usart0_init(uint32_t ulBaud, uint8_t ubMode, uint8_t ubBitMode, int8_t bMISOLocation, int8_t bMOSILocation, uint8_t ubCLKLocation)
{
    32a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(bMISOLocation > -1 && bMISOLocation > AFCHANLOC_MAX)
    32aa:	2b08      	cmp	r3, #8
{
    32ac:	f99d 6014 	ldrsb.w	r6, [sp, #20]
    32b0:	f89d 4018 	ldrb.w	r4, [sp, #24]
    if(bMISOLocation > -1 && bMISOLocation > AFCHANLOC_MAX)
    32b4:	dc42      	bgt.n	333c <usart0_init+0x94>
        return;

    if(bMOSILocation > -1 && bMOSILocation > AFCHANLOC_MAX)
    32b6:	2e08      	cmp	r6, #8
    32b8:	dc40      	bgt.n	333c <usart0_init+0x94>
        return;

    if(ubCLKLocation > AFCHANLOC_MAX)
    32ba:	2c08      	cmp	r4, #8
    32bc:	d83e      	bhi.n	333c <usart0_init+0x94>
        return;

    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_USART0;
    32be:	4f20      	ldr	r7, [pc, #128]	; (3340 <usart0_init+0x98>)
    32c0:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
    32c4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    32c8:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0

    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | UART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;

    USART0->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
    32cc:	2a01      	cmp	r2, #1
    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | UART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;
    32ce:	4d1d      	ldr	r5, [pc, #116]	; (3344 <usart0_init+0x9c>)
    USART0->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
    32d0:	ea4f 2241 	mov.w	r2, r1, lsl #9
    32d4:	ea4f 11c1 	mov.w	r1, r1, lsl #7
    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | UART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;
    32d8:	f640 678a 	movw	r7, #3722	; 0xe8a
    USART0->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
    32dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
    32e0:	f401 7180 	and.w	r1, r1, #256	; 0x100
    USART0->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX | UART_CMD_TXTRIDIS | USART_CMD_RXBLOCKDIS | USART_CMD_TXDIS | USART_CMD_RXDIS;
    32e4:	60ef      	str	r7, [r5, #12]
    USART0->CTRL = USART_CTRL_TXBIL_EMPTY | USART_CTRL_CSMA_NOACTION | (ubBitMode == USART_SPI_MSB_FIRST ? USART_CTRL_MSBF : 0) | (ubMode & 1 ? USART_CTRL_CLKPHA_SAMPLETRAILING : USART_CTRL_CLKPHA_SAMPLELEADING) | (ubMode & 2 ? USART_CTRL_CLKPOL_IDLEHIGH : USART_CTRL_CLKPOL_IDLELOW) | USART_CTRL_SYNC;
    32e6:	ea42 0201 	orr.w	r2, r2, r1
    32ea:	bf0c      	ite	eq
    32ec:	f44f 6780 	moveq.w	r7, #1024	; 0x400
    32f0:	2700      	movne	r7, #0
    32f2:	433a      	orrs	r2, r7
    32f4:	f042 0201 	orr.w	r2, r2, #1
    32f8:	602a      	str	r2, [r5, #0]
    USART0->FRAME = USART_FRAME_DATABITS_EIGHT;
    32fa:	2205      	movs	r2, #5
    32fc:	606a      	str	r2, [r5, #4]
    USART0->CLKDIV = ((HFPER_CLOCK_FREQ / (2 * ulBaud)) - 1) << 8;
    32fe:	4a12      	ldr	r2, [pc, #72]	; (3348 <usart0_init+0xa0>)
    3300:	0040      	lsls	r0, r0, #1
    3302:	6812      	ldr	r2, [r2, #0]
    3304:	fbb2 f2f0 	udiv	r2, r2, r0
    3308:	3a01      	subs	r2, #1

    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
    330a:	2e00      	cmp	r6, #0
    USART0->CLKDIV = ((HFPER_CLOCK_FREQ / (2 * ulBaud)) - 1) << 8;
    330c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    3310:	616a      	str	r2, [r5, #20]
    USART0->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
    3312:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
    3316:	bfac      	ite	ge
    3318:	2202      	movge	r2, #2
    331a:	2200      	movlt	r2, #0
    USART0->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
    331c:	0624      	lsls	r4, r4, #24
    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
    331e:	2b00      	cmp	r3, #0
    3320:	bfa8      	it	ge
    3322:	f042 0201 	orrge.w	r2, r2, #1
    USART0->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
    3326:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    332a:	2b00      	cmp	r3, #0
    332c:	bfa8      	it	ge
    332e:	431c      	orrge	r4, r3
    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
    3330:	f042 0208 	orr.w	r2, r2, #8

    USART0->CMD = USART_CMD_MASTEREN | USART_CMD_TXEN | USART_CMD_RXEN;
    3334:	2315      	movs	r3, #21
    USART0->ROUTEPEN = (bMISOLocation >= 0 ? USART_ROUTEPEN_RXPEN : 0) | (bMOSILocation >= 0 ? USART_ROUTEPEN_TXPEN : 0) | USART_ROUTEPEN_CLKPEN;
    3336:	676a      	str	r2, [r5, #116]	; 0x74
    USART0->ROUTELOC0 = ((uint32_t)(bMISOLocation >= 0 ? bMISOLocation : 0) << _USART_ROUTELOC0_RXLOC_SHIFT) | ((uint32_t)(bMOSILocation >= 0 ? bMOSILocation : 0) << _USART_ROUTELOC0_TXLOC_SHIFT) | ((uint32_t)ubCLKLocation << _USART_ROUTELOC0_CLKLOC_SHIFT);
    3338:	67ac      	str	r4, [r5, #120]	; 0x78
    USART0->CMD = USART_CMD_MASTEREN | USART_CMD_TXEN | USART_CMD_RXEN;
    333a:	60eb      	str	r3, [r5, #12]
}
    333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    333e:	bf00      	nop
    3340:	400e4000 	.word	0x400e4000
    3344:	40010000 	.word	0x40010000
    3348:	2000015c 	.word	0x2000015c

0000334c <_default_isr>:
extern uint32_t _end;


void _default_isr()
{
    while(1);
    334c:	e7fe      	b.n	334c <_default_isr>

0000334e <__libc_init_array>:
}

void __attribute__ ((weak)) __libc_init_array()
{

}
    334e:	4770      	bx	lr

00003350 <_reset_isr>:
extern int main();

#define DEFAULT_ISR "_default_isr"

void _reset_isr()
{
    3350:	b508      	push	{r3, lr}
    uint32_t *src, *dst;

    src = &_siiram0;
    3352:	4a1d      	ldr	r2, [pc, #116]	; (33c8 <_reset_isr+0x78>)
    3354:	4b1d      	ldr	r3, [pc, #116]	; (33cc <_reset_isr+0x7c>)
    dst = &_siram0;

    while (dst < &_eiram0) // Copy RAM code
    3356:	491e      	ldr	r1, [pc, #120]	; (33d0 <_reset_isr+0x80>)
    3358:	428b      	cmp	r3, r1
    335a:	d327      	bcc.n	33ac <_reset_isr+0x5c>
    335c:	4b1d      	ldr	r3, [pc, #116]	; (33d4 <_reset_isr+0x84>)
        *(dst++) = *(src++);

    src = &_sidata;
    335e:	4a1e      	ldr	r2, [pc, #120]	; (33d8 <_reset_isr+0x88>)
    dst = &_sdata;

    while (dst < &_edata) // Copy data
    3360:	491e      	ldr	r1, [pc, #120]	; (33dc <_reset_isr+0x8c>)
    3362:	428b      	cmp	r3, r1
    3364:	d327      	bcc.n	33b6 <_reset_isr+0x66>
        *(dst++) = *(src++);

    src = 0;
    dst = &_sbss;
    3366:	4b1e      	ldr	r3, [pc, #120]	; (33e0 <_reset_isr+0x90>)

    while (dst < &_ebss) // Zero BSS
    3368:	4a1e      	ldr	r2, [pc, #120]	; (33e4 <_reset_isr+0x94>)
        *(dst++) = 0;
    336a:	2100      	movs	r1, #0
    while (dst < &_ebss) // Zero BSS
    336c:	4293      	cmp	r3, r2
    336e:	d327      	bcc.n	33c0 <_reset_isr+0x70>

    __libc_init_array();
    3370:	f7ff ffed 	bl	334e <__libc_init_array>

    SCB->VTOR = (uint32_t)&_svect; // ISR Vectors offset
    3374:	4b1c      	ldr	r3, [pc, #112]	; (33e8 <_reset_isr+0x98>)
    3376:	4a1d      	ldr	r2, [pc, #116]	; (33ec <_reset_isr+0x9c>)
    3378:	609a      	str	r2, [r3, #8]
    SCB->AIRCR = 0x05FA0000 | (5 << 8); // Interrupt priority - 2 bits Group, 1 bit Sub-group
    337a:	4a1d      	ldr	r2, [pc, #116]	; (33f0 <_reset_isr+0xa0>)
    337c:	60da      	str	r2, [r3, #12]
    SCB->SHCSR = SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk; // Enable separate fault handlers
    337e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
    3382:	625a      	str	r2, [r3, #36]	; 0x24
    SCB->SCR |= SCB_SCR_SEVONPEND_Msk; // Pending disabled interrupt generates event
    3384:	691a      	ldr	r2, [r3, #16]
    3386:	f042 0210 	orr.w	r2, r2, #16
    338a:	611a      	str	r2, [r3, #16]
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; // Enable division by zero faults
    338c:	695a      	ldr	r2, [r3, #20]
    338e:	f042 0210 	orr.w	r2, r2, #16
    3392:	615a      	str	r2, [r3, #20]
    SCB->CPACR |= 0xF << 20; // Enable CP10 & CP11 (FPU) in priv. and non priv. mode
    3394:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3398:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    339c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    init();
    33a0:	f7fe fc4a 	bl	1c38 <init>
    main();
    33a4:	f7ff f922 	bl	25ec <main>
  __ASM volatile ("cpsid i" : : : "memory");
    33a8:	b672      	cpsid	i

    __disable_irq();
    while(1);
    33aa:	e7fe      	b.n	33aa <_reset_isr+0x5a>
        *(dst++) = *(src++);
    33ac:	f852 0b04 	ldr.w	r0, [r2], #4
    33b0:	f843 0b04 	str.w	r0, [r3], #4
    33b4:	e7d0      	b.n	3358 <_reset_isr+0x8>
        *(dst++) = *(src++);
    33b6:	f852 0b04 	ldr.w	r0, [r2], #4
    33ba:	f843 0b04 	str.w	r0, [r3], #4
    33be:	e7d0      	b.n	3362 <_reset_isr+0x12>
        *(dst++) = 0;
    33c0:	f843 1b04 	str.w	r1, [r3], #4
    33c4:	e7d2      	b.n	336c <_reset_isr+0x1c>
    33c6:	bf00      	nop
    33c8:	000052b8 	.word	0x000052b8
    33cc:	10000000 	.word	0x10000000
    33d0:	10000000 	.word	0x10000000
    33d4:	20000000 	.word	0x20000000
    33d8:	000052b8 	.word	0x000052b8
    33dc:	2000007c 	.word	0x2000007c
    33e0:	20000080 	.word	0x20000080
    33e4:	2000018c 	.word	0x2000018c
    33e8:	e000ed00 	.word	0xe000ed00
    33ec:	00000000 	.word	0x00000000
    33f0:	05fa0500 	.word	0x05fa0500

000033f4 <adc_init>:
#include "adc.h"

void adc_init()
{
    33f4:	b508      	push	{r3, lr}
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC0;
    33f6:	4b0b      	ldr	r3, [pc, #44]	; (3424 <adc_init+0x30>)
    33f8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    33fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    3400:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC1;
    3404:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    3408:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    340c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    
    CMU->ADCCTRL = CMU_ADCCTRL_ADC0CLKINV | CMU_ADCCTRL_ADC0CLKSEL_AUXHFRCO | (3 << _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) | CMU_ADCCTRL_ADC1CLKINV | CMU_ADCCTRL_ADC1CLKSEL_AUXHFRCO | (3 << _CMU_ADCCTRL_ADC1CLKDIV_SHIFT);
    3410:	4a05      	ldr	r2, [pc, #20]	; (3428 <adc_init+0x34>)
    3412:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    
    cmu_update_clocks();
    3416:	f7ff fb7d 	bl	2b14 <cmu_update_clocks>

    // ADC_CLK is 8 MHz
    // adc_sar_clk is 100 kHz (ADC_CLK / (PRESC + 1)) PRESC = 79
    // TIMEBASE period is 1 us (1 MHz) (ADC_CLK / (TIMEBASE + 1)) TIMEBASE = 7
    ADC0->CTRL = ADC_CTRL_CHCONREFWARMIDLE_KEEPPREV | ADC_CTRL_CHCONMODE_MAXSETTLE | ADC_CTRL_OVSRSEL_X16 | (7 << _ADC_CTRL_TIMEBASE_SHIFT) | (79 << _ADC_CTRL_PRESC_SHIFT) | ADC_CTRL_ASYNCCLKEN_ALWAYSON | ADC_CTRL_ADCCLKMODE_ASYNC | ADC_CTRL_WARMUPMODE_NORMAL;
    341a:	4b04      	ldr	r3, [pc, #16]	; (342c <adc_init+0x38>)
    341c:	4a04      	ldr	r2, [pc, #16]	; (3430 <adc_init+0x3c>)
    341e:	601a      	str	r2, [r3, #0]
}
    3420:	bd08      	pop	{r3, pc}
    3422:	bf00      	nop
    3424:	400e4000 	.word	0x400e4000
    3428:	01130113 	.word	0x01130113
    342c:	40082000 	.word	0x40082000
    3430:	83074fc0 	.word	0x83074fc0

00003434 <adc_get_avdd>:
float adc_get_avdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3434:	4b1b      	ldr	r3, [pc, #108]	; (34a4 <adc_get_avdd+0x70>)
    3436:	68da      	ldr	r2, [r3, #12]
    3438:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    343c:	d1fb      	bne.n	3436 <adc_get_avdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_AVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    343e:	4a1a      	ldr	r2, [pc, #104]	; (34a8 <adc_get_avdd+0x74>)
    3440:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    3442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3446:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    3448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    344a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    344e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3452:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    3454:	4a15      	ldr	r2, [pc, #84]	; (34ac <adc_get_avdd+0x78>)
    3456:	6e52      	ldr	r2, [r2, #100]	; 0x64
    3458:	6b59      	ldr	r1, [r3, #52]	; 0x34
    345a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    345e:	430a      	orrs	r2, r1
    3460:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3464:	4912      	ldr	r1, [pc, #72]	; (34b0 <adc_get_avdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3466:	f022 020f 	bic.w	r2, r2, #15
    346a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    346c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    346e:	f022 020f 	bic.w	r2, r2, #15
    3472:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    3474:	689a      	ldr	r2, [r3, #8]
    3476:	f042 0201 	orr.w	r2, r2, #1
    347a:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    347c:	4b09      	ldr	r3, [pc, #36]	; (34a4 <adc_get_avdd+0x70>)
    347e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3480:	07d2      	lsls	r2, r2, #31
    3482:	d5fc      	bpl.n	347e <adc_get_avdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fAVDD = fADCCode * 5000.f / 4096.f;
    3486:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 34b4 <adc_get_avdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    348a:	091b      	lsrs	r3, r3, #4
    348c:	ee07 3a90 	vmov	s15, r3
    3490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fAVDD = fADCCode * 5000.f / 4096.f;
    3494:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fAVDD;
}
    3498:	ed9f 0a07 	vldr	s0, [pc, #28]	; 34b8 <adc_get_avdd+0x84>
    349c:	ee27 0a80 	vmul.f32	s0, s15, s0
    34a0:	4770      	bx	lr
    34a2:	bf00      	nop
    34a4:	40082000 	.word	0x40082000
    34a8:	07ffe078 	.word	0x07ffe078
    34ac:	0fe081b0 	.word	0x0fe081b0
    34b0:	40082400 	.word	0x40082400
    34b4:	459c4000 	.word	0x459c4000
    34b8:	39800000 	.word	0x39800000

000034bc <adc_get_dvdd>:
float adc_get_dvdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    34bc:	4b1b      	ldr	r3, [pc, #108]	; (352c <adc_get_dvdd+0x70>)
    34be:	68da      	ldr	r2, [r3, #12]
    34c0:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    34c4:	d1fb      	bne.n	34be <adc_get_dvdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    34c6:	4a1a      	ldr	r2, [pc, #104]	; (3530 <adc_get_dvdd+0x74>)
    34c8:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    34ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    34ce:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    34d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    34d2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    34d6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    34da:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    34dc:	4a15      	ldr	r2, [pc, #84]	; (3534 <adc_get_dvdd+0x78>)
    34de:	6e52      	ldr	r2, [r2, #100]	; 0x64
    34e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    34e2:	f3c2 420e 	ubfx	r2, r2, #16, #15
    34e6:	430a      	orrs	r2, r1
    34e8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    34ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    34ec:	4912      	ldr	r1, [pc, #72]	; (3538 <adc_get_dvdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    34ee:	f022 020f 	bic.w	r2, r2, #15
    34f2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    34f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    34f6:	f022 020f 	bic.w	r2, r2, #15
    34fa:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    34fc:	689a      	ldr	r2, [r3, #8]
    34fe:	f042 0201 	orr.w	r2, r2, #1
    3502:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    3504:	4b09      	ldr	r3, [pc, #36]	; (352c <adc_get_dvdd+0x70>)
    3506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3508:	07d2      	lsls	r2, r2, #31
    350a:	d5fc      	bpl.n	3506 <adc_get_dvdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fDVDD = fADCCode * 5000.f / 4096.f;
    350e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 353c <adc_get_dvdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    3512:	091b      	lsrs	r3, r3, #4
    3514:	ee07 3a90 	vmov	s15, r3
    3518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fDVDD = fADCCode * 5000.f / 4096.f;
    351c:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDVDD;
}
    3520:	ed9f 0a07 	vldr	s0, [pc, #28]	; 3540 <adc_get_dvdd+0x84>
    3524:	ee27 0a80 	vmul.f32	s0, s15, s0
    3528:	4770      	bx	lr
    352a:	bf00      	nop
    352c:	40082000 	.word	0x40082000
    3530:	07ffe278 	.word	0x07ffe278
    3534:	0fe081b0 	.word	0x0fe081b0
    3538:	40082400 	.word	0x40082400
    353c:	459c4000 	.word	0x459c4000
    3540:	39800000 	.word	0x39800000

00003544 <adc_get_iovdd>:
float adc_get_iovdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3544:	4b1b      	ldr	r3, [pc, #108]	; (35b4 <adc_get_iovdd+0x70>)
    3546:	68da      	ldr	r2, [r3, #12]
    3548:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    354c:	d1fb      	bne.n	3546 <adc_get_iovdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_IOVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    354e:	4a1a      	ldr	r2, [pc, #104]	; (35b8 <adc_get_iovdd+0x74>)
    3550:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    3552:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3556:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    3558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    355a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    355e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3562:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    3564:	4a15      	ldr	r2, [pc, #84]	; (35bc <adc_get_iovdd+0x78>)
    3566:	6e52      	ldr	r2, [r2, #100]	; 0x64
    3568:	6b59      	ldr	r1, [r3, #52]	; 0x34
    356a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    356e:	430a      	orrs	r2, r1
    3570:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3574:	4912      	ldr	r1, [pc, #72]	; (35c0 <adc_get_iovdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3576:	f022 020f 	bic.w	r2, r2, #15
    357a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    357c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    357e:	f022 020f 	bic.w	r2, r2, #15
    3582:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    3584:	689a      	ldr	r2, [r3, #8]
    3586:	f042 0201 	orr.w	r2, r2, #1
    358a:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    358c:	4b09      	ldr	r3, [pc, #36]	; (35b4 <adc_get_iovdd+0x70>)
    358e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3590:	07d2      	lsls	r2, r2, #31
    3592:	d5fc      	bpl.n	358e <adc_get_iovdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fIOVDD = fADCCode * 5000.f / 4096.f;
    3596:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 35c4 <adc_get_iovdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    359a:	091b      	lsrs	r3, r3, #4
    359c:	ee07 3a90 	vmov	s15, r3
    35a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fIOVDD = fADCCode * 5000.f / 4096.f;
    35a4:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fIOVDD;
}
    35a8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 35c8 <adc_get_iovdd+0x84>
    35ac:	ee27 0a80 	vmul.f32	s0, s15, s0
    35b0:	4770      	bx	lr
    35b2:	bf00      	nop
    35b4:	40082000 	.word	0x40082000
    35b8:	07ffe578 	.word	0x07ffe578
    35bc:	0fe081b0 	.word	0x0fe081b0
    35c0:	40082400 	.word	0x40082400
    35c4:	459c4000 	.word	0x459c4000
    35c8:	39800000 	.word	0x39800000

000035cc <adc_get_corevdd>:
float adc_get_corevdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    35cc:	4b1b      	ldr	r3, [pc, #108]	; (363c <adc_get_corevdd+0x70>)
    35ce:	68da      	ldr	r2, [r3, #12]
    35d0:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    35d4:	d1fb      	bne.n	35ce <adc_get_corevdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DECOUPLE | ADC_SINGLECTRL_REF_2V5 | ADC_SINGLECTRL_RES_OVS;
    35d6:	4a1a      	ldr	r2, [pc, #104]	; (3640 <adc_get_corevdd+0x74>)
    35d8:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    35da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    35de:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    35e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    35e2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    35e6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    35ea:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x7FFF0000) >> 16; // Calibration for 2V5 reference
    35ec:	4a15      	ldr	r2, [pc, #84]	; (3644 <adc_get_corevdd+0x78>)
    35ee:	6e12      	ldr	r2, [r2, #96]	; 0x60
    35f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    35f2:	f3c2 420e 	ubfx	r2, r2, #16, #15
    35f6:	430a      	orrs	r2, r1
    35f8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    35fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    35fc:	4912      	ldr	r1, [pc, #72]	; (3648 <adc_get_corevdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    35fe:	f022 020f 	bic.w	r2, r2, #15
    3602:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3606:	f022 020f 	bic.w	r2, r2, #15
    360a:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    360c:	689a      	ldr	r2, [r3, #8]
    360e:	f042 0201 	orr.w	r2, r2, #1
    3612:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    3614:	4b09      	ldr	r3, [pc, #36]	; (363c <adc_get_corevdd+0x70>)
    3616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3618:	07d2      	lsls	r2, r2, #31
    361a:	d5fc      	bpl.n	3616 <adc_get_corevdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    361c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fDECOUPLE = fADCCode * 2500.f / 4096.f;
    361e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 364c <adc_get_corevdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    3622:	091b      	lsrs	r3, r3, #4
    3624:	ee07 3a90 	vmov	s15, r3
    3628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fDECOUPLE = fADCCode * 2500.f / 4096.f;
    362c:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDECOUPLE;
}
    3630:	ed9f 0a07 	vldr	s0, [pc, #28]	; 3650 <adc_get_corevdd+0x84>
    3634:	ee27 0a80 	vmul.f32	s0, s15, s0
    3638:	4770      	bx	lr
    363a:	bf00      	nop
    363c:	40082000 	.word	0x40082000
    3640:	07ffe438 	.word	0x07ffe438
    3644:	0fe081b0 	.word	0x0fe081b0
    3648:	40082400 	.word	0x40082400
    364c:	451c4000 	.word	0x451c4000
    3650:	39800000 	.word	0x39800000

00003654 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, char* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
    3654:	429a      	cmp	r2, r3
    buffer[idx] = character;
    3656:	bf38      	it	cc
    3658:	5488      	strbcc	r0, [r1, r2]
  }
}
    365a:	4770      	bx	lr

0000365c <_out_null>:

// internal null output
static inline void _out_null(char character, char* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    365c:	4770      	bx	lr

0000365e <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    365e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3662:	469b      	mov	fp, r3
    3664:	e9dd 7311 	ldrd	r7, r3, [sp, #68]	; 0x44
    3668:	4681      	mov	r9, r0
  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    366a:	f013 0002 	ands.w	r0, r3, #2
{
    366e:	468a      	mov	sl, r1
    3670:	4616      	mov	r6, r2
    3672:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    3676:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    367a:	9001      	str	r0, [sp, #4]
{
    367c:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
    buf[len++] = '0';
    3680:	f04f 0e30 	mov.w	lr, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3684:	d044      	beq.n	3710 <_ntoa_format+0xb2>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3686:	f003 0003 	and.w	r0, r3, #3
    368a:	2801      	cmp	r0, #1
    buf[len++] = '0';
    368c:	f04f 0e30 	mov.w	lr, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3690:	d046      	beq.n	3720 <_ntoa_format+0xc2>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    3692:	f013 0f10 	tst.w	r3, #16
    3696:	d018      	beq.n	36ca <_ntoa_format+0x6c>
    if (((len == prec) || (len == width)) && (len > 0U)) {
    3698:	42a1      	cmp	r1, r4
    369a:	d001      	beq.n	36a0 <_ntoa_format+0x42>
    369c:	42a7      	cmp	r7, r4
    369e:	d144      	bne.n	372a <_ntoa_format+0xcc>
    36a0:	2c00      	cmp	r4, #0
    36a2:	d079      	beq.n	3798 <_ntoa_format+0x13a>
      len--;
      if ((base == 16U) && (len > 0U)) {
    36a4:	2a10      	cmp	r2, #16
      len--;
    36a6:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
      if ((base == 16U) && (len > 0U)) {
    36aa:	d147      	bne.n	373c <_ntoa_format+0xde>
    36ac:	2900      	cmp	r1, #0
    36ae:	d041      	beq.n	3734 <_ntoa_format+0xd6>
        len--;
    36b0:	3c02      	subs	r4, #2
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    36b2:	0699      	lsls	r1, r3, #26
    36b4:	d473      	bmi.n	379e <_ntoa_format+0x140>
    36b6:	2c1f      	cmp	r4, #31
    36b8:	d873      	bhi.n	37a2 <_ntoa_format+0x144>
      buf[len++] = 'x';
    36ba:	2278      	movs	r2, #120	; 0x78
    }
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    36bc:	552a      	strb	r2, [r5, r4]
    36be:	3401      	adds	r4, #1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    36c0:	2c1f      	cmp	r4, #31
    36c2:	d86e      	bhi.n	37a2 <_ntoa_format+0x144>
      buf[len++] = '0';
    36c4:	2230      	movs	r2, #48	; 0x30
    36c6:	552a      	strb	r2, [r5, r4]
    36c8:	3401      	adds	r4, #1
    }
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    36ca:	42bc      	cmp	r4, r7
    36cc:	d106      	bne.n	36dc <_ntoa_format+0x7e>
    36ce:	f1bc 0f00 	cmp.w	ip, #0
    36d2:	d102      	bne.n	36da <_ntoa_format+0x7c>
    36d4:	f013 0f0c 	tst.w	r3, #12
    36d8:	d057      	beq.n	378a <_ntoa_format+0x12c>
    len--;
    36da:	1e7c      	subs	r4, r7, #1
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    36dc:	2c1f      	cmp	r4, #31
    36de:	d805      	bhi.n	36ec <_ntoa_format+0x8e>
    if (negative) {
    36e0:	f1bc 0f00 	cmp.w	ip, #0
    36e4:	d054      	beq.n	3790 <_ntoa_format+0x132>
      buf[len++] = '-';
    36e6:	232d      	movs	r3, #45	; 0x2d
    }
    else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    36e8:	552b      	strb	r3, [r5, r4]
    36ea:	3401      	adds	r4, #1
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    36ec:	b3c0      	cbz	r0, 3760 <_ntoa_format+0x102>
    36ee:	4425      	add	r5, r4
    36f0:	f04f 0800 	mov.w	r8, #0
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    36f4:	4544      	cmp	r4, r8
    36f6:	eb06 0208 	add.w	r2, r6, r8
    36fa:	d135      	bne.n	3768 <_ntoa_format+0x10a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    36fc:	9b01      	ldr	r3, [sp, #4]
    36fe:	2b00      	cmp	r3, #0
    3700:	d140      	bne.n	3784 <_ntoa_format+0x126>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
    3702:	4610      	mov	r0, r2
    3704:	b003      	add	sp, #12
    3706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    buf[len++] = '0';
    370a:	f805 e004 	strb.w	lr, [r5, r4]
    370e:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3710:	42a1      	cmp	r1, r4
    3712:	d9b8      	bls.n	3686 <_ntoa_format+0x28>
    3714:	2c20      	cmp	r4, #32
    3716:	d1f8      	bne.n	370a <_ntoa_format+0xac>
    3718:	e7b5      	b.n	3686 <_ntoa_format+0x28>
    buf[len++] = '0';
    371a:	f805 e004 	strb.w	lr, [r5, r4]
    371e:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3720:	42a7      	cmp	r7, r4
    3722:	d9b6      	bls.n	3692 <_ntoa_format+0x34>
    3724:	2c20      	cmp	r4, #32
    3726:	d1f8      	bne.n	371a <_ntoa_format+0xbc>
    3728:	e7b3      	b.n	3692 <_ntoa_format+0x34>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    372a:	2a10      	cmp	r2, #16
    372c:	d0c1      	beq.n	36b2 <_ntoa_format+0x54>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    372e:	2c1f      	cmp	r4, #31
    3730:	d8dc      	bhi.n	36ec <_ntoa_format+0x8e>
    3732:	e7c7      	b.n	36c4 <_ntoa_format+0x66>
    3734:	460c      	mov	r4, r1
    3736:	e7bc      	b.n	36b2 <_ntoa_format+0x54>
      buf[len++] = 'X';
    3738:	2258      	movs	r2, #88	; 0x58
    373a:	e7bf      	b.n	36bc <_ntoa_format+0x5e>
      len--;
    373c:	460c      	mov	r4, r1
    373e:	e7c1      	b.n	36c4 <_ntoa_format+0x66>
    else if (flags & FLAGS_SPACE) {
    3740:	071b      	lsls	r3, r3, #28
    3742:	d5d3      	bpl.n	36ec <_ntoa_format+0x8e>
      buf[len++] = ' ';
    3744:	2320      	movs	r3, #32
    3746:	e7cf      	b.n	36e8 <_ntoa_format+0x8a>
      out(' ', buffer, idx++, maxlen);
    3748:	1c56      	adds	r6, r2, #1
    374a:	465b      	mov	r3, fp
    374c:	4651      	mov	r1, sl
    374e:	2020      	movs	r0, #32
    3750:	47c8      	blx	r9
    3752:	4632      	mov	r2, r6
    for (size_t i = len; i < width; i++) {
    3754:	eb08 0302 	add.w	r3, r8, r2
    3758:	429f      	cmp	r7, r3
    375a:	d8f5      	bhi.n	3748 <_ntoa_format+0xea>
    375c:	4616      	mov	r6, r2
    375e:	e7c6      	b.n	36ee <_ntoa_format+0x90>
    3760:	4632      	mov	r2, r6
    3762:	eba4 0806 	sub.w	r8, r4, r6
    3766:	e7f5      	b.n	3754 <_ntoa_format+0xf6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3768:	465b      	mov	r3, fp
    376a:	4651      	mov	r1, sl
    376c:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
    3770:	47c8      	blx	r9
  for (size_t i = 0U; i < len; i++) {
    3772:	f108 0801 	add.w	r8, r8, #1
    3776:	e7bd      	b.n	36f4 <_ntoa_format+0x96>
      out(' ', buffer, idx++, maxlen);
    3778:	1c54      	adds	r4, r2, #1
    377a:	465b      	mov	r3, fp
    377c:	4651      	mov	r1, sl
    377e:	2020      	movs	r0, #32
    3780:	47c8      	blx	r9
    3782:	4622      	mov	r2, r4
    while (idx < width) {
    3784:	42ba      	cmp	r2, r7
    3786:	d3f7      	bcc.n	3778 <_ntoa_format+0x11a>
    3788:	e7bb      	b.n	3702 <_ntoa_format+0xa4>
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    378a:	2f1f      	cmp	r7, #31
    378c:	463c      	mov	r4, r7
    378e:	d8ad      	bhi.n	36ec <_ntoa_format+0x8e>
    else if (flags & FLAGS_PLUS) {
    3790:	075a      	lsls	r2, r3, #29
    3792:	d5d5      	bpl.n	3740 <_ntoa_format+0xe2>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3794:	232b      	movs	r3, #43	; 0x2b
    3796:	e7a7      	b.n	36e8 <_ntoa_format+0x8a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3798:	2a10      	cmp	r2, #16
    379a:	d193      	bne.n	36c4 <_ntoa_format+0x66>
    379c:	e789      	b.n	36b2 <_ntoa_format+0x54>
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    379e:	2c1f      	cmp	r4, #31
    37a0:	d9ca      	bls.n	3738 <_ntoa_format+0xda>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    37a2:	42bc      	cmp	r4, r7
    37a4:	d093      	beq.n	36ce <_ntoa_format+0x70>
    37a6:	e7a1      	b.n	36ec <_ntoa_format+0x8e>

000037a8 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    37a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    37ac:	b091      	sub	sp, #68	; 0x44
    37ae:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
    37b2:	9d18      	ldr	r5, [sp, #96]	; 0x60
    37b4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    37b6:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    37ba:	d000      	beq.n	37be <_ntoa_long+0x16>
    37bc:	b3a5      	cbz	r5, 3828 <_ntoa_long+0x80>
    37be:	f01c 0f20 	tst.w	ip, #32
    37c2:	f10d 0e20 	add.w	lr, sp, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    37c6:	f04f 0600 	mov.w	r6, #0
    37ca:	bf14      	ite	ne
    37cc:	f04f 0837 	movne.w	r8, #55	; 0x37
    37d0:	f04f 0857 	moveq.w	r8, #87	; 0x57
      const char digit = (char)(value % base);
    37d4:	fbb5 f9f7 	udiv	r9, r5, r7
    37d8:	fb07 5919 	mls	r9, r7, r9, r5
    37dc:	fa5f f489 	uxtb.w	r4, r9
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    37e0:	f1b9 0f09 	cmp.w	r9, #9
    37e4:	bf94      	ite	ls
    37e6:	3430      	addls	r4, #48	; 0x30
    37e8:	4444      	addhi	r4, r8
    37ea:	b2e4      	uxtb	r4, r4
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    37ec:	42bd      	cmp	r5, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    37ee:	f80e 4b01 	strb.w	r4, [lr], #1
      value /= base;
    37f2:	fbb5 f4f7 	udiv	r4, r5, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    37f6:	f106 0601 	add.w	r6, r6, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    37fa:	d301      	bcc.n	3800 <_ntoa_long+0x58>
    37fc:	2e20      	cmp	r6, #32
    37fe:	d111      	bne.n	3824 <_ntoa_long+0x7c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3800:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    3802:	9405      	str	r4, [sp, #20]
    3804:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    3806:	f8cd c018 	str.w	ip, [sp, #24]
    380a:	e9cd 7403 	strd	r7, r4, [sp, #12]
    380e:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
    3812:	e9cd 6401 	strd	r6, r4, [sp, #4]
    3816:	ac08      	add	r4, sp, #32
    3818:	9400      	str	r4, [sp, #0]
    381a:	f7ff ff20 	bl	365e <_ntoa_format>
}
    381e:	b011      	add	sp, #68	; 0x44
    3820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      value /= base;
    3824:	4625      	mov	r5, r4
    3826:	e7d5      	b.n	37d4 <_ntoa_long+0x2c>
  size_t len = 0U;
    3828:	462e      	mov	r6, r5
    382a:	e7e9      	b.n	3800 <_ntoa_long+0x58>

0000382c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3830:	b093      	sub	sp, #76	; 0x4c
    3832:	4691      	mov	r9, r2
    3834:	9d24      	ldr	r5, [sp, #144]	; 0x90
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3836:	056a      	lsls	r2, r5, #21
{
    3838:	4607      	mov	r7, r0
    383a:	4688      	mov	r8, r1
    383c:	469a      	mov	sl, r3
  if (!(flags & FLAGS_PRECISION) || value) {
    383e:	d503      	bpl.n	3848 <_ntoa_long_long+0x1c>
    3840:	e9dd 341c 	ldrd	r3, r4, [sp, #112]	; 0x70
    3844:	4323      	orrs	r3, r4
    3846:	d03b      	beq.n	38c0 <_ntoa_long_long+0x94>
    3848:	f015 0f20 	tst.w	r5, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    384c:	bf14      	ite	ne
    384e:	2337      	movne	r3, #55	; 0x37
    3850:	2357      	moveq	r3, #87	; 0x57
    3852:	ae0a      	add	r6, sp, #40	; 0x28
    3854:	2400      	movs	r4, #0
    3856:	9309      	str	r3, [sp, #36]	; 0x24
      const char digit = (char)(value % base);
    3858:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    385c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3860:	f7fd f914 	bl	a8c <__aeabi_uldivmod>
    3864:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3866:	2a09      	cmp	r2, #9
    3868:	bf8a      	itet	hi
    386a:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
    386c:	3230      	addls	r2, #48	; 0x30
    386e:	18d2      	addhi	r2, r2, r3
    3870:	b2d2      	uxtb	r2, r2
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3872:	e9dd bc20 	ldrd	fp, ip, [sp, #128]	; 0x80
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3876:	f806 2b01 	strb.w	r2, [r6], #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    387a:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    387e:	4563      	cmp	r3, ip
    3880:	bf08      	it	eq
    3882:	455a      	cmpeq	r2, fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3884:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3888:	d301      	bcc.n	388e <_ntoa_long_long+0x62>
    388a:	2c20      	cmp	r4, #32
    388c:	d115      	bne.n	38ba <_ntoa_long_long+0x8e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    388e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3890:	9305      	str	r3, [sp, #20]
    3892:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3894:	9304      	str	r3, [sp, #16]
    3896:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3898:	9303      	str	r3, [sp, #12]
    389a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
    389e:	9506      	str	r5, [sp, #24]
    38a0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    38a4:	ab0a      	add	r3, sp, #40	; 0x28
    38a6:	9300      	str	r3, [sp, #0]
    38a8:	464a      	mov	r2, r9
    38aa:	4653      	mov	r3, sl
    38ac:	4641      	mov	r1, r8
    38ae:	4638      	mov	r0, r7
    38b0:	f7ff fed5 	bl	365e <_ntoa_format>
}
    38b4:	b013      	add	sp, #76	; 0x4c
    38b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      value /= base;
    38ba:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    38be:	e7cb      	b.n	3858 <_ntoa_long_long+0x2c>
  size_t len = 0U;
    38c0:	2400      	movs	r4, #0
    38c2:	e7e4      	b.n	388e <_ntoa_long_long+0x62>

000038c4 <_out_char>:
  if (character) {
    38c4:	b108      	cbz	r0, 38ca <_out_char+0x6>
    _putchar(character);
    38c6:	f7fd bc68 	b.w	119a <_putchar>
}
    38ca:	4770      	bx	lr
    38cc:	0000      	movs	r0, r0
	...

000038d0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    38d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38d4:	b09f      	sub	sp, #124	; 0x7c
    38d6:	469a      	mov	sl, r3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
    38d8:	1e0b      	subs	r3, r1, #0
    38da:	930c      	str	r3, [sp, #48]	; 0x30
    38dc:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
    38e0:	4bb5      	ldr	r3, [pc, #724]	; (3bb8 <_vsnprintf+0x2e8>)
    38e2:	bf18      	it	ne
    38e4:	4603      	movne	r3, r0
{
    38e6:	4691      	mov	r9, r2
    out = _out_null;
    38e8:	930b      	str	r3, [sp, #44]	; 0x2c
    return 0U;
    38ea:	2400      	movs	r4, #0
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
        format++;
        break;
    38ec:	e34a      	b.n	3f84 <_vsnprintf+0x6b4>
    if (*format != '%') {
    38ee:	2825      	cmp	r0, #37	; 0x25
    38f0:	f10a 0a01 	add.w	sl, sl, #1
    38f4:	d007      	beq.n	3906 <_vsnprintf+0x36>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    38f6:	1c65      	adds	r5, r4, #1
    38f8:	4622      	mov	r2, r4
    38fa:	464b      	mov	r3, r9
    38fc:	e9dd 410b 	ldrd	r4, r1, [sp, #44]	; 0x2c
    3900:	47a0      	blx	r4
    3902:	462c      	mov	r4, r5
        format++;
        break;
    3904:	e33e      	b.n	3f84 <_vsnprintf+0x6b4>
    flags = 0U;
    3906:	2500      	movs	r5, #0
    3908:	e006      	b.n	3918 <_vsnprintf+0x48>
      switch (*format) {
    390a:	2b2d      	cmp	r3, #45	; 0x2d
    390c:	d016      	beq.n	393c <_vsnprintf+0x6c>
    390e:	2b30      	cmp	r3, #48	; 0x30
    3910:	d10c      	bne.n	392c <_vsnprintf+0x5c>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    3912:	f045 0501 	orr.w	r5, r5, #1
{
    3916:	4692      	mov	sl, r2
      switch (*format) {
    3918:	4652      	mov	r2, sl
    391a:	f812 3b01 	ldrb.w	r3, [r2], #1
    391e:	2b2b      	cmp	r3, #43	; 0x2b
    3920:	d00f      	beq.n	3942 <_vsnprintf+0x72>
    3922:	d8f2      	bhi.n	390a <_vsnprintf+0x3a>
    3924:	2b20      	cmp	r3, #32
    3926:	d00f      	beq.n	3948 <_vsnprintf+0x78>
    3928:	2b23      	cmp	r3, #35	; 0x23
    392a:	d010      	beq.n	394e <_vsnprintf+0x7e>
    if (_is_digit(*format)) {
    392c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    3930:	2909      	cmp	r1, #9
    3932:	d82e      	bhi.n	3992 <_vsnprintf+0xc2>
  unsigned int i = 0U;
    3934:	2300      	movs	r3, #0
    3936:	930d      	str	r3, [sp, #52]	; 0x34
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3938:	200a      	movs	r0, #10
    393a:	e011      	b.n	3960 <_vsnprintf+0x90>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    393c:	f045 0502 	orr.w	r5, r5, #2
    3940:	e7e9      	b.n	3916 <_vsnprintf+0x46>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3942:	f045 0504 	orr.w	r5, r5, #4
    3946:	e7e6      	b.n	3916 <_vsnprintf+0x46>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3948:	f045 0508 	orr.w	r5, r5, #8
    394c:	e7e3      	b.n	3916 <_vsnprintf+0x46>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    394e:	f045 0510 	orr.w	r5, r5, #16
    3952:	e7e0      	b.n	3916 <_vsnprintf+0x46>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3954:	990d      	ldr	r1, [sp, #52]	; 0x34
    3956:	fb00 3301 	mla	r3, r0, r1, r3
    395a:	3b30      	subs	r3, #48	; 0x30
    395c:	930d      	str	r3, [sp, #52]	; 0x34
    395e:	4692      	mov	sl, r2
  while (_is_digit(**str)) {
    3960:	4652      	mov	r2, sl
    3962:	f812 3b01 	ldrb.w	r3, [r2], #1
    3966:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    396a:	2909      	cmp	r1, #9
    396c:	d9f2      	bls.n	3954 <_vsnprintf+0x84>
    if (*format == '.') {
    396e:	f89a 3000 	ldrb.w	r3, [sl]
    3972:	2b2e      	cmp	r3, #46	; 0x2e
    3974:	d148      	bne.n	3a08 <_vsnprintf+0x138>
      if (_is_digit(*format)) {
    3976:	f89a 2001 	ldrb.w	r2, [sl, #1]
    397a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    397e:	2909      	cmp	r1, #9
    3980:	f10a 0301 	add.w	r3, sl, #1
      flags |= FLAGS_PRECISION;
    3984:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      if (_is_digit(*format)) {
    3988:	d836      	bhi.n	39f8 <_vsnprintf+0x128>
      format++;
    398a:	469a      	mov	sl, r3
  unsigned int i = 0U;
    398c:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    398e:	210a      	movs	r1, #10
    3990:	e013      	b.n	39ba <_vsnprintf+0xea>
    else if (*format == '*') {
    3992:	2b2a      	cmp	r3, #42	; 0x2a
    3994:	d109      	bne.n	39aa <_vsnprintf+0xda>
      const int w = va_arg(va, int);
    3996:	f85b 3b04 	ldr.w	r3, [fp], #4
      if (w < 0) {
    399a:	2b00      	cmp	r3, #0
        width = (unsigned int)-w;
    399c:	bfbc      	itt	lt
    399e:	425b      	neglt	r3, r3
        flags |= FLAGS_LEFT;    // reverse padding
    39a0:	f045 0502 	orrlt.w	r5, r5, #2
        width = (unsigned int)w;
    39a4:	930d      	str	r3, [sp, #52]	; 0x34
      const int w = va_arg(va, int);
    39a6:	4692      	mov	sl, r2
    39a8:	e7e1      	b.n	396e <_vsnprintf+0x9e>
    width = 0U;
    39aa:	2300      	movs	r3, #0
    39ac:	930d      	str	r3, [sp, #52]	; 0x34
    39ae:	e7de      	b.n	396e <_vsnprintf+0x9e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    39b0:	fb01 0206 	mla	r2, r1, r6, r0
    39b4:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
    39b8:	469a      	mov	sl, r3
  while (_is_digit(**str)) {
    39ba:	4653      	mov	r3, sl
    39bc:	f813 0b01 	ldrb.w	r0, [r3], #1
    39c0:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    39c4:	2a09      	cmp	r2, #9
    39c6:	d9f3      	bls.n	39b0 <_vsnprintf+0xe0>
    switch (*format) {
    39c8:	4653      	mov	r3, sl
    39ca:	f813 2b01 	ldrb.w	r2, [r3], #1
    39ce:	2a6c      	cmp	r2, #108	; 0x6c
    39d0:	d023      	beq.n	3a1a <_vsnprintf+0x14a>
    39d2:	d81b      	bhi.n	3a0c <_vsnprintf+0x13c>
    39d4:	2a68      	cmp	r2, #104	; 0x68
    39d6:	d029      	beq.n	3a2c <_vsnprintf+0x15c>
    39d8:	2a6a      	cmp	r2, #106	; 0x6a
    39da:	d031      	beq.n	3a40 <_vsnprintf+0x170>
    39dc:	4653      	mov	r3, sl
    switch (*format) {
    39de:	469a      	mov	sl, r3
    39e0:	f81a 0b01 	ldrb.w	r0, [sl], #1
    39e4:	2866      	cmp	r0, #102	; 0x66
    39e6:	d036      	beq.n	3a56 <_vsnprintf+0x186>
    39e8:	f200 80c4 	bhi.w	3b74 <_vsnprintf+0x2a4>
    39ec:	2858      	cmp	r0, #88	; 0x58
    39ee:	d12a      	bne.n	3a46 <_vsnprintf+0x176>
          flags |= FLAGS_UPPERCASE;
    39f0:	f045 0520 	orr.w	r5, r5, #32
          base = 16U;
    39f4:	2310      	movs	r3, #16
    39f6:	e0c7      	b.n	3b88 <_vsnprintf+0x2b8>
      else if (*format == '*') {
    39f8:	2a2a      	cmp	r2, #42	; 0x2a
    39fa:	d104      	bne.n	3a06 <_vsnprintf+0x136>
        precision = (unsigned int)va_arg(va, int);
    39fc:	f85b 6b04 	ldr.w	r6, [fp], #4
        format++;
    3a00:	f10a 0a02 	add.w	sl, sl, #2
    3a04:	e7e0      	b.n	39c8 <_vsnprintf+0xf8>
      format++;
    3a06:	469a      	mov	sl, r3
    precision = 0U;
    3a08:	2600      	movs	r6, #0
    3a0a:	e7dd      	b.n	39c8 <_vsnprintf+0xf8>
    switch (*format) {
    3a0c:	2a74      	cmp	r2, #116	; 0x74
    3a0e:	d001      	beq.n	3a14 <_vsnprintf+0x144>
    3a10:	2a7a      	cmp	r2, #122	; 0x7a
    3a12:	d1e3      	bne.n	39dc <_vsnprintf+0x10c>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3a14:	f445 7580 	orr.w	r5, r5, #256	; 0x100
        break;
    3a18:	e7e1      	b.n	39de <_vsnprintf+0x10e>
        if (*format == 'l') {
    3a1a:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3a1e:	2a6c      	cmp	r2, #108	; 0x6c
    3a20:	d1f8      	bne.n	3a14 <_vsnprintf+0x144>
          flags |= FLAGS_LONG_LONG;
    3a22:	f445 7540 	orr.w	r5, r5, #768	; 0x300
          format++;
    3a26:	f10a 0302 	add.w	r3, sl, #2
    3a2a:	e7d8      	b.n	39de <_vsnprintf+0x10e>
        if (*format == 'h') {
    3a2c:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3a30:	2a68      	cmp	r2, #104	; 0x68
    3a32:	d002      	beq.n	3a3a <_vsnprintf+0x16a>
        flags |= FLAGS_SHORT;
    3a34:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    3a38:	e7d1      	b.n	39de <_vsnprintf+0x10e>
          flags |= FLAGS_CHAR;
    3a3a:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
    3a3e:	e7f2      	b.n	3a26 <_vsnprintf+0x156>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3a40:	f445 7500 	orr.w	r5, r5, #512	; 0x200
        break;
    3a44:	e7cb      	b.n	39de <_vsnprintf+0x10e>
    switch (*format) {
    3a46:	f200 8086 	bhi.w	3b56 <_vsnprintf+0x286>
    3a4a:	2825      	cmp	r0, #37	; 0x25
    3a4c:	f43f af53 	beq.w	38f6 <_vsnprintf+0x26>
    3a50:	2846      	cmp	r0, #70	; 0x46
    3a52:	f47f af50 	bne.w	38f6 <_vsnprintf+0x26>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3a56:	f10b 0b07 	add.w	fp, fp, #7
    3a5a:	f02b 0b07 	bic.w	fp, fp, #7
    3a5e:	ecbb 7b02 	vldmia	fp!, {d7}
  if (value < 0) {
    3a62:	2200      	movs	r2, #0
    3a64:	2300      	movs	r3, #0
    3a66:	ec51 0b17 	vmov	r0, r1, d7
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3a6a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  if (value < 0) {
    3a6e:	f7fc ff9d 	bl	9ac <__aeabi_dcmplt>
    3a72:	2800      	cmp	r0, #0
    3a74:	f000 810b 	beq.w	3c8e <_vsnprintf+0x3be>
    value = 0 - value;
    3a78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3a7c:	2000      	movs	r0, #0
    3a7e:	2100      	movs	r1, #0
    3a80:	f7fc fb6a 	bl	158 <__aeabi_dsub>
    3a84:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    negative = true;
    3a88:	2301      	movs	r3, #1
    3a8a:	9311      	str	r3, [sp, #68]	; 0x44
  if (!(flags & FLAGS_PRECISION)) {
    3a8c:	056a      	lsls	r2, r5, #21
    3a8e:	f140 8100 	bpl.w	3c92 <_vsnprintf+0x3c2>
  if (prec > 9U) {
    3a92:	2e09      	cmp	r6, #9
    3a94:	bf28      	it	cs
    3a96:	2609      	movcs	r6, #9
    3a98:	9610      	str	r6, [sp, #64]	; 0x40
  int whole = (int)value;
    3a9a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3a9e:	f7fc ffad 	bl	9fc <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
    3aa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3aa4:	4b45      	ldr	r3, [pc, #276]	; (3bbc <_vsnprintf+0x2ec>)
    3aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3aaa:	ed93 7b00 	vldr	d7, [r3]
  int whole = (int)value;
    3aae:	4606      	mov	r6, r0
  double tmp = (value - whole) * pow10[prec];
    3ab0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
    3ab4:	f7fc fc9e 	bl	3f4 <__aeabi_i2d>
    3ab8:	4602      	mov	r2, r0
    3aba:	460b      	mov	r3, r1
    3abc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3ac0:	f7fc fb4a 	bl	158 <__aeabi_dsub>
    3ac4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    3ac8:	f7fc fcfe 	bl	4c8 <__aeabi_dmul>
    3acc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  unsigned long frac = (unsigned long)tmp;
    3ad0:	f7fc ffbc 	bl	a4c <__aeabi_d2uiz>
    3ad4:	4607      	mov	r7, r0
  diff = tmp - frac;
    3ad6:	f7fc fc7d 	bl	3d4 <__aeabi_ui2d>
    3ada:	4602      	mov	r2, r0
    3adc:	460b      	mov	r3, r1
    3ade:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3ae2:	f7fc fb39 	bl	158 <__aeabi_dsub>
  if (diff > 0.5) {
    3ae6:	2200      	movs	r2, #0
    3ae8:	4b35      	ldr	r3, [pc, #212]	; (3bc0 <_vsnprintf+0x2f0>)
  diff = tmp - frac;
    3aea:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  if (diff > 0.5) {
    3aee:	f7fc ff7b 	bl	9e8 <__aeabi_dcmpgt>
    3af2:	2800      	cmp	r0, #0
    3af4:	f000 80d0 	beq.w	3c98 <_vsnprintf+0x3c8>
    ++frac;
    3af8:	3701      	adds	r7, #1
    if (frac >= pow10[prec]) {
    3afa:	4638      	mov	r0, r7
    3afc:	f7fc fc6a 	bl	3d4 <__aeabi_ui2d>
    3b00:	4602      	mov	r2, r0
    3b02:	460b      	mov	r3, r1
    3b04:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3b08:	f7fc ff5a 	bl	9c0 <__aeabi_dcmple>
    3b0c:	b108      	cbz	r0, 3b12 <_vsnprintf+0x242>
      ++whole;
    3b0e:	3601      	adds	r6, #1
      frac = 0;
    3b10:	2700      	movs	r7, #0
  if (value > thres_max) {
    3b12:	a327      	add	r3, pc, #156	; (adr r3, 3bb0 <_vsnprintf+0x2e0>)
    3b14:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3b1c:	f7fc ff64 	bl	9e8 <__aeabi_dcmpgt>
    3b20:	2800      	cmp	r0, #0
    3b22:	f47f aee2 	bne.w	38ea <_vsnprintf+0x1a>
  if (prec == 0U) {
    3b26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b28:	2b00      	cmp	r3, #0
    3b2a:	f040 80d4 	bne.w	3cd6 <_vsnprintf+0x406>
    diff = value - (double)whole;
    3b2e:	4630      	mov	r0, r6
    3b30:	f7fc fc60 	bl	3f4 <__aeabi_i2d>
    3b34:	4602      	mov	r2, r0
    3b36:	460b      	mov	r3, r1
    3b38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3b3c:	f7fc fb0c 	bl	158 <__aeabi_dsub>
    if (diff > 0.5) {
    3b40:	2200      	movs	r2, #0
    3b42:	4b1f      	ldr	r3, [pc, #124]	; (3bc0 <_vsnprintf+0x2f0>)
    diff = value - (double)whole;
    3b44:	4607      	mov	r7, r0
    3b46:	4688      	mov	r8, r1
    if (diff > 0.5) {
    3b48:	f7fc ff4e 	bl	9e8 <__aeabi_dcmpgt>
    3b4c:	2800      	cmp	r0, #0
    3b4e:	f000 80b2 	beq.w	3cb6 <_vsnprintf+0x3e6>
      ++whole;
    3b52:	3601      	adds	r6, #1
    3b54:	e0b9      	b.n	3cca <_vsnprintf+0x3fa>
    switch (*format) {
    3b56:	2863      	cmp	r0, #99	; 0x63
    3b58:	f000 8160 	beq.w	3e1c <_vsnprintf+0x54c>
    3b5c:	2864      	cmp	r0, #100	; 0x64
    3b5e:	d002      	beq.n	3b66 <_vsnprintf+0x296>
    3b60:	2862      	cmp	r0, #98	; 0x62
    3b62:	f47f aec8 	bne.w	38f6 <_vsnprintf+0x26>
        else if (*format == 'b') {
    3b66:	2862      	cmp	r0, #98	; 0x62
    3b68:	f025 0510 	bic.w	r5, r5, #16
    3b6c:	f040 81da 	bne.w	3f24 <_vsnprintf+0x654>
          base =  2U;
    3b70:	2302      	movs	r3, #2
        if ((*format != 'i') && (*format != 'd')) {
    3b72:	e009      	b.n	3b88 <_vsnprintf+0x2b8>
    switch (*format) {
    3b74:	2870      	cmp	r0, #112	; 0x70
    3b76:	f000 81b2 	beq.w	3ede <_vsnprintf+0x60e>
    3b7a:	d823      	bhi.n	3bc4 <_vsnprintf+0x2f4>
    3b7c:	2869      	cmp	r0, #105	; 0x69
    3b7e:	d0f2      	beq.n	3b66 <_vsnprintf+0x296>
    3b80:	286f      	cmp	r0, #111	; 0x6f
    3b82:	f47f aeb8 	bne.w	38f6 <_vsnprintf+0x26>
          base =  8U;
    3b86:	2308      	movs	r3, #8
          if (flags & FLAGS_LONG_LONG) {
    3b88:	f415 7200 	ands.w	r2, r5, #512	; 0x200
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3b8c:	f025 010c 	bic.w	r1, r5, #12
          if (flags & FLAGS_LONG_LONG) {
    3b90:	d05d      	beq.n	3c4e <_vsnprintf+0x37e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3b92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3b94:	9108      	str	r1, [sp, #32]
    3b96:	e9cd 6206 	strd	r6, r2, [sp, #24]
    3b9a:	2200      	movs	r2, #0
    3b9c:	e9cd 3204 	strd	r3, r2, [sp, #16]
    3ba0:	f10b 0b07 	add.w	fp, fp, #7
    3ba4:	f02b 0707 	bic.w	r7, fp, #7
    3ba8:	9202      	str	r2, [sp, #8]
    3baa:	e8f7 2302 	ldrd	r2, r3, [r7], #8
    3bae:	e1df      	b.n	3f70 <_vsnprintf+0x6a0>
    3bb0:	ffc00000 	.word	0xffc00000
    3bb4:	41dfffff 	.word	0x41dfffff
    3bb8:	0000365d 	.word	0x0000365d
    3bbc:	00005260 	.word	0x00005260
    3bc0:	3fe00000 	.word	0x3fe00000
    switch (*format) {
    3bc4:	2875      	cmp	r0, #117	; 0x75
    3bc6:	d0ce      	beq.n	3b66 <_vsnprintf+0x296>
    3bc8:	2878      	cmp	r0, #120	; 0x78
    3bca:	f43f af13 	beq.w	39f4 <_vsnprintf+0x124>
    3bce:	2873      	cmp	r0, #115	; 0x73
    3bd0:	f47f ae91 	bne.w	38f6 <_vsnprintf+0x26>
        char* p = va_arg(va, char*);
    3bd4:	f85b 7b04 	ldr.w	r7, [fp], #4
    3bd8:	463b      	mov	r3, r7
    3bda:	4698      	mov	r8, r3
    3bdc:	3301      	adds	r3, #1
  for (s = str; *s; ++s);
    3bde:	f898 2000 	ldrb.w	r2, [r8]
    3be2:	2a00      	cmp	r2, #0
    3be4:	d1f9      	bne.n	3bda <_vsnprintf+0x30a>
        if (flags & FLAGS_PRECISION) {
    3be6:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
  return (unsigned int)(s - str);
    3bea:	eba8 0807 	sub.w	r8, r8, r7
        if (flags & FLAGS_PRECISION) {
    3bee:	9310      	str	r3, [sp, #64]	; 0x40
    3bf0:	d002      	beq.n	3bf8 <_vsnprintf+0x328>
          l = (l < precision ? l : precision);
    3bf2:	45b0      	cmp	r8, r6
    3bf4:	bf28      	it	cs
    3bf6:	46b0      	movcs	r8, r6
        if (!(flags & FLAGS_LEFT)) {
    3bf8:	f015 0302 	ands.w	r3, r5, #2
    3bfc:	930e      	str	r3, [sp, #56]	; 0x38
    3bfe:	f000 8147 	beq.w	3e90 <_vsnprintf+0x5c0>
    3c02:	4622      	mov	r2, r4
    3c04:	1bd4      	subs	r4, r2, r7
    3c06:	e14b      	b.n	3ea0 <_vsnprintf+0x5d0>
          else if (flags & FLAGS_LONG) {
    3c08:	05e8      	lsls	r0, r5, #23
    3c0a:	f10b 0704 	add.w	r7, fp, #4
    3c0e:	d513      	bpl.n	3c38 <_vsnprintf+0x368>
            const long value = va_arg(va, long);
    3c10:	f8db 3000 	ldr.w	r3, [fp]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3c14:	990d      	ldr	r1, [sp, #52]	; 0x34
    3c16:	9202      	str	r2, [sp, #8]
    3c18:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3c1c:	0fda      	lsrs	r2, r3, #31
    3c1e:	2b00      	cmp	r3, #0
    3c20:	9505      	str	r5, [sp, #20]
    3c22:	9201      	str	r2, [sp, #4]
    3c24:	bfb8      	it	lt
    3c26:	425b      	neglt	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3c28:	9300      	str	r3, [sp, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3c2a:	464b      	mov	r3, r9
    3c2c:	4622      	mov	r2, r4
    3c2e:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    3c32:	f7ff fdb9 	bl	37a8 <_ntoa_long>
    3c36:	e1a3      	b.n	3f80 <_vsnprintf+0x6b0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3c38:	f015 0f40 	tst.w	r5, #64	; 0x40
    3c3c:	f8db 3000 	ldr.w	r3, [fp]
    3c40:	d001      	beq.n	3c46 <_vsnprintf+0x376>
    3c42:	b2db      	uxtb	r3, r3
    3c44:	e7e6      	b.n	3c14 <_vsnprintf+0x344>
    3c46:	0629      	lsls	r1, r5, #24
    3c48:	bf48      	it	mi
    3c4a:	b21b      	sxthmi	r3, r3
    3c4c:	e7e2      	b.n	3c14 <_vsnprintf+0x344>
          else if (flags & FLAGS_LONG) {
    3c4e:	05e8      	lsls	r0, r5, #23
    3c50:	f10b 0704 	add.w	r7, fp, #4
    3c54:	d508      	bpl.n	3c68 <_vsnprintf+0x398>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3c56:	9105      	str	r1, [sp, #20]
    3c58:	990d      	ldr	r1, [sp, #52]	; 0x34
    3c5a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    3c5e:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3c62:	f8db 3000 	ldr.w	r3, [fp]
    3c66:	e7df      	b.n	3c28 <_vsnprintf+0x358>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3c68:	f015 0f40 	tst.w	r5, #64	; 0x40
    3c6c:	f8db 2000 	ldr.w	r2, [fp]
    3c70:	d009      	beq.n	3c86 <_vsnprintf+0x3b6>
    3c72:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3c74:	9105      	str	r1, [sp, #20]
    3c76:	990d      	ldr	r1, [sp, #52]	; 0x34
    3c78:	9302      	str	r3, [sp, #8]
    3c7a:	2300      	movs	r3, #0
    3c7c:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3c80:	e9cd 2300 	strd	r2, r3, [sp]
    3c84:	e7d1      	b.n	3c2a <_vsnprintf+0x35a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3c86:	0628      	lsls	r0, r5, #24
    3c88:	bf48      	it	mi
    3c8a:	b292      	uxthmi	r2, r2
    3c8c:	e7f2      	b.n	3c74 <_vsnprintf+0x3a4>
  bool negative = false;
    3c8e:	9011      	str	r0, [sp, #68]	; 0x44
    3c90:	e6fc      	b.n	3a8c <_vsnprintf+0x1bc>
    prec = 6U;  // by default, precesion is 6
    3c92:	2306      	movs	r3, #6
    3c94:	9310      	str	r3, [sp, #64]	; 0x40
    3c96:	e700      	b.n	3a9a <_vsnprintf+0x1ca>
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    3c98:	2200      	movs	r2, #0
    3c9a:	4ba1      	ldr	r3, [pc, #644]	; (3f20 <_vsnprintf+0x650>)
    3c9c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3ca0:	f7fc fe7a 	bl	998 <__aeabi_dcmpeq>
    3ca4:	2800      	cmp	r0, #0
    3ca6:	f43f af34 	beq.w	3b12 <_vsnprintf+0x242>
    3caa:	b117      	cbz	r7, 3cb2 <_vsnprintf+0x3e2>
    3cac:	07fb      	lsls	r3, r7, #31
    3cae:	f57f af30 	bpl.w	3b12 <_vsnprintf+0x242>
    ++frac;
    3cb2:	3701      	adds	r7, #1
    3cb4:	e72d      	b.n	3b12 <_vsnprintf+0x242>
    else if ((diff == 0.5) && (whole & 1)) {
    3cb6:	2200      	movs	r2, #0
    3cb8:	4b99      	ldr	r3, [pc, #612]	; (3f20 <_vsnprintf+0x650>)
    3cba:	4638      	mov	r0, r7
    3cbc:	4641      	mov	r1, r8
    3cbe:	f7fc fe6b 	bl	998 <__aeabi_dcmpeq>
    3cc2:	b110      	cbz	r0, 3cca <_vsnprintf+0x3fa>
    3cc4:	07f7      	lsls	r7, r6, #31
    3cc6:	f53f af44 	bmi.w	3b52 <_vsnprintf+0x282>
    3cca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3ccc:	ab16      	add	r3, sp, #88	; 0x58
    3cce:	4413      	add	r3, r2
      buf[len++] = '.';
    3cd0:	4690      	mov	r8, r2
    buf[len++] = (char)(48 + (whole % 10));
    3cd2:	220a      	movs	r2, #10
    3cd4:	e05c      	b.n	3d90 <_vsnprintf+0x4c0>
    3cd6:	aa16      	add	r2, sp, #88	; 0x58
  if (prec == 0U) {
    3cd8:	f04f 0801 	mov.w	r8, #1
      buf[len++] = (char)(48U + (frac % 10U));
    3cdc:	200a      	movs	r0, #10
    3cde:	fbb7 f1f0 	udiv	r1, r7, r0
    3ce2:	fb00 7311 	mls	r3, r0, r1, r7
    3ce6:	3330      	adds	r3, #48	; 0x30
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3ce8:	f1b8 0f20 	cmp.w	r8, #32
      buf[len++] = (char)(48U + (frac % 10U));
    3cec:	f802 3b01 	strb.w	r3, [r2], #1
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3cf0:	d01d      	beq.n	3d2e <_vsnprintf+0x45e>
    3cf2:	2f09      	cmp	r7, #9
    3cf4:	f108 0301 	add.w	r3, r8, #1
    3cf8:	d811      	bhi.n	3d1e <_vsnprintf+0x44e>
    3cfa:	4643      	mov	r3, r8
      buf[len++] = '0';
    3cfc:	aa16      	add	r2, sp, #88	; 0x58
    3cfe:	2130      	movs	r1, #48	; 0x30
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3d00:	9810      	ldr	r0, [sp, #64]	; 0x40
    3d02:	4283      	cmp	r3, r0
    3d04:	f108 0801 	add.w	r8, r8, #1
    3d08:	d10c      	bne.n	3d24 <_vsnprintf+0x454>
      buf[len++] = '.';
    3d0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3d0c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    3d10:	aa1e      	add	r2, sp, #120	; 0x78
    3d12:	4413      	add	r3, r2
    3d14:	461a      	mov	r2, r3
    3d16:	232e      	movs	r3, #46	; 0x2e
    3d18:	f802 3c20 	strb.w	r3, [r2, #-32]
    3d1c:	e7d5      	b.n	3cca <_vsnprintf+0x3fa>
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3d1e:	4698      	mov	r8, r3
    3d20:	460f      	mov	r7, r1
    3d22:	e7dc      	b.n	3cde <_vsnprintf+0x40e>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3d24:	f1b8 0f1f 	cmp.w	r8, #31
      buf[len++] = '0';
    3d28:	5499      	strb	r1, [r3, r2]
    3d2a:	4643      	mov	r3, r8
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3d2c:	d9e8      	bls.n	3d00 <_vsnprintf+0x430>
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3d2e:	f005 0303 	and.w	r3, r5, #3
    3d32:	2b01      	cmp	r3, #1
    buf[len++] = '0';
    3d34:	aa16      	add	r2, sp, #88	; 0x58
    3d36:	f04f 0130 	mov.w	r1, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3d3a:	d031      	beq.n	3da0 <_vsnprintf+0x4d0>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3d3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3d3e:	4590      	cmp	r8, r2
    3d40:	d107      	bne.n	3d52 <_vsnprintf+0x482>
    3d42:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3d44:	b91a      	cbnz	r2, 3d4e <_vsnprintf+0x47e>
    3d46:	f015 0f0c 	tst.w	r5, #12
    3d4a:	f000 80dd 	beq.w	3f08 <_vsnprintf+0x638>
    len--;
    3d4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3d52:	f1b8 0f1f 	cmp.w	r8, #31
    3d56:	d80a      	bhi.n	3d6e <_vsnprintf+0x49e>
    if (negative) {
    3d58:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3d5a:	2a00      	cmp	r2, #0
    3d5c:	f000 80d8 	beq.w	3f10 <_vsnprintf+0x640>
      buf[len++] = '-';
    3d60:	aa1e      	add	r2, sp, #120	; 0x78
    3d62:	4442      	add	r2, r8
    3d64:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
    3d66:	f802 1c20 	strb.w	r1, [r2, #-32]
    3d6a:	f108 0801 	add.w	r8, r8, #1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    3d6e:	b9eb      	cbnz	r3, 3dac <_vsnprintf+0x4dc>
    3d70:	4622      	mov	r2, r4
    for (size_t i = len; i < width; i++) {
    3d72:	eba8 0604 	sub.w	r6, r8, r4
    3d76:	e02b      	b.n	3dd0 <_vsnprintf+0x500>
    buf[len++] = (char)(48 + (whole % 10));
    3d78:	fb96 f1f2 	sdiv	r1, r6, r2
    3d7c:	fb02 6611 	mls	r6, r2, r1, r6
    3d80:	3630      	adds	r6, #48	; 0x30
    3d82:	f803 6b01 	strb.w	r6, [r3], #1
    3d86:	f108 0801 	add.w	r8, r8, #1
    if (!(whole /= 10)) {
    3d8a:	460e      	mov	r6, r1
    3d8c:	2900      	cmp	r1, #0
    3d8e:	d0ce      	beq.n	3d2e <_vsnprintf+0x45e>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3d90:	f1b8 0f20 	cmp.w	r8, #32
    3d94:	d1f0      	bne.n	3d78 <_vsnprintf+0x4a8>
    3d96:	e7ca      	b.n	3d2e <_vsnprintf+0x45e>
    buf[len++] = '0';
    3d98:	f808 1002 	strb.w	r1, [r8, r2]
    3d9c:	f108 0801 	add.w	r8, r8, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3da0:	980d      	ldr	r0, [sp, #52]	; 0x34
    3da2:	4580      	cmp	r8, r0
    3da4:	d2ca      	bcs.n	3d3c <_vsnprintf+0x46c>
    3da6:	f1b8 0f1f 	cmp.w	r8, #31
    3daa:	d9f5      	bls.n	3d98 <_vsnprintf+0x4c8>
    3dac:	ab16      	add	r3, sp, #88	; 0x58
    3dae:	4443      	add	r3, r8
    3db0:	9310      	str	r3, [sp, #64]	; 0x40
    for (size_t i = len; i < width; i++) {
    3db2:	2700      	movs	r7, #0
    3db4:	e019      	b.n	3dea <_vsnprintf+0x51a>
    else if (flags & FLAGS_SPACE) {
    3db6:	0728      	lsls	r0, r5, #28
    3db8:	d5d9      	bpl.n	3d6e <_vsnprintf+0x49e>
      buf[len++] = ' ';
    3dba:	aa1e      	add	r2, sp, #120	; 0x78
    3dbc:	4442      	add	r2, r8
    3dbe:	2120      	movs	r1, #32
    3dc0:	e7d1      	b.n	3d66 <_vsnprintf+0x496>
      out(' ', buffer, idx++, maxlen);
    3dc2:	1c57      	adds	r7, r2, #1
    3dc4:	464b      	mov	r3, r9
    3dc6:	990c      	ldr	r1, [sp, #48]	; 0x30
    3dc8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3dca:	2020      	movs	r0, #32
    3dcc:	47a0      	blx	r4
    3dce:	463a      	mov	r2, r7
    for (size_t i = len; i < width; i++) {
    3dd0:	990d      	ldr	r1, [sp, #52]	; 0x34
    3dd2:	18b3      	adds	r3, r6, r2
    3dd4:	4299      	cmp	r1, r3
    3dd6:	d8f4      	bhi.n	3dc2 <_vsnprintf+0x4f2>
    3dd8:	4614      	mov	r4, r2
    3dda:	e7e7      	b.n	3dac <_vsnprintf+0x4dc>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3ddc:	9810      	ldr	r0, [sp, #64]	; 0x40
    3dde:	990c      	ldr	r1, [sp, #48]	; 0x30
    3de0:	7800      	ldrb	r0, [r0, #0]
    3de2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3de4:	464b      	mov	r3, r9
    3de6:	47b0      	blx	r6
  for (size_t i = 0U; i < len; i++) {
    3de8:	3701      	adds	r7, #1
    3dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3dec:	4547      	cmp	r7, r8
    3dee:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    3df2:	eb07 0204 	add.w	r2, r7, r4
    3df6:	9310      	str	r3, [sp, #64]	; 0x40
    3df8:	d1f0      	bne.n	3ddc <_vsnprintf+0x50c>
  if (flags & FLAGS_LEFT) {
    3dfa:	07a9      	lsls	r1, r5, #30
    3dfc:	4614      	mov	r4, r2
    3dfe:	f140 80c1 	bpl.w	3f84 <_vsnprintf+0x6b4>
    while (idx < width) {
    3e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e04:	42a3      	cmp	r3, r4
    3e06:	f240 80bd 	bls.w	3f84 <_vsnprintf+0x6b4>
      out(' ', buffer, idx++, maxlen);
    3e0a:	1c65      	adds	r5, r4, #1
    3e0c:	4622      	mov	r2, r4
    3e0e:	464b      	mov	r3, r9
    3e10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3e12:	990c      	ldr	r1, [sp, #48]	; 0x30
    3e14:	2020      	movs	r0, #32
    3e16:	47a0      	blx	r4
    3e18:	462c      	mov	r4, r5
    3e1a:	e7f2      	b.n	3e02 <_vsnprintf+0x532>
        if (!(flags & FLAGS_LEFT)) {
    3e1c:	f015 0502 	ands.w	r5, r5, #2
    3e20:	d026      	beq.n	3e70 <_vsnprintf+0x5a0>
    3e22:	4622      	mov	r2, r4
        unsigned int l = 1U;
    3e24:	2701      	movs	r7, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3e26:	f85b 0b04 	ldr.w	r0, [fp], #4
    3e2a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3e2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3e2e:	464b      	mov	r3, r9
    3e30:	b2c0      	uxtb	r0, r0
    3e32:	1c54      	adds	r4, r2, #1
    3e34:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
    3e36:	2d00      	cmp	r5, #0
    3e38:	f000 80a4 	beq.w	3f84 <_vsnprintf+0x6b4>
          while (l++ < width) {
    3e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e3e:	42bb      	cmp	r3, r7
    3e40:	f240 80a0 	bls.w	3f84 <_vsnprintf+0x6b4>
            out(' ', buffer, idx++, maxlen);
    3e44:	1c65      	adds	r5, r4, #1
    3e46:	4622      	mov	r2, r4
    3e48:	464b      	mov	r3, r9
    3e4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3e4c:	990c      	ldr	r1, [sp, #48]	; 0x30
    3e4e:	2020      	movs	r0, #32
    3e50:	47a0      	blx	r4
    3e52:	3701      	adds	r7, #1
    3e54:	462c      	mov	r4, r5
    3e56:	e7f1      	b.n	3e3c <_vsnprintf+0x56c>
            out(' ', buffer, idx++, maxlen);
    3e58:	464b      	mov	r3, r9
    3e5a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3e5c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3e5e:	2020      	movs	r0, #32
    3e60:	47b8      	blx	r7
          while (l++ < width) {
    3e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3e64:	1932      	adds	r2, r6, r4
    3e66:	1cb7      	adds	r7, r6, #2
    3e68:	3601      	adds	r6, #1
    3e6a:	42b3      	cmp	r3, r6
    3e6c:	d8f4      	bhi.n	3e58 <_vsnprintf+0x588>
    3e6e:	e7da      	b.n	3e26 <_vsnprintf+0x556>
    3e70:	462e      	mov	r6, r5
    3e72:	e7f6      	b.n	3e62 <_vsnprintf+0x592>
            out(' ', buffer, idx++, maxlen);
    3e74:	464b      	mov	r3, r9
    3e76:	990c      	ldr	r1, [sp, #48]	; 0x30
    3e78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3e7a:	2020      	movs	r0, #32
    3e7c:	47a8      	blx	r5
          while (l++ < width) {
    3e7e:	4643      	mov	r3, r8
    3e80:	990d      	ldr	r1, [sp, #52]	; 0x34
    3e82:	4299      	cmp	r1, r3
    3e84:	eb04 0203 	add.w	r2, r4, r3
    3e88:	f103 0801 	add.w	r8, r3, #1
    3e8c:	d8f2      	bhi.n	3e74 <_vsnprintf+0x5a4>
    3e8e:	e6b9      	b.n	3c04 <_vsnprintf+0x334>
    3e90:	4643      	mov	r3, r8
    3e92:	1ae4      	subs	r4, r4, r3
    3e94:	e7f4      	b.n	3e80 <_vsnprintf+0x5b0>
    3e96:	461e      	mov	r6, r3
          out(*(p++), buffer, idx++, maxlen);
    3e98:	464b      	mov	r3, r9
    3e9a:	e9dd 510b 	ldrd	r5, r1, [sp, #44]	; 0x2c
    3e9e:	47a8      	blx	r5
    3ea0:	19e2      	adds	r2, r4, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3ea2:	f817 0b01 	ldrb.w	r0, [r7], #1
    3ea6:	b128      	cbz	r0, 3eb4 <_vsnprintf+0x5e4>
    3ea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d0f4      	beq.n	3e98 <_vsnprintf+0x5c8>
    3eae:	1e73      	subs	r3, r6, #1
    3eb0:	2e00      	cmp	r6, #0
    3eb2:	d1f0      	bne.n	3e96 <_vsnprintf+0x5c6>
        if (flags & FLAGS_LEFT) {
    3eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3eb6:	4614      	mov	r4, r2
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d063      	beq.n	3f84 <_vsnprintf+0x6b4>
    3ebc:	eba8 0802 	sub.w	r8, r8, r2
    3ec0:	e007      	b.n	3ed2 <_vsnprintf+0x602>
            out(' ', buffer, idx++, maxlen);
    3ec2:	1c65      	adds	r5, r4, #1
    3ec4:	4622      	mov	r2, r4
    3ec6:	464b      	mov	r3, r9
    3ec8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3eca:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ecc:	2020      	movs	r0, #32
    3ece:	47a0      	blx	r4
    3ed0:	462c      	mov	r4, r5
          while (l++ < width) {
    3ed2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3ed4:	eb08 0304 	add.w	r3, r8, r4
    3ed8:	4293      	cmp	r3, r2
    3eda:	d3f2      	bcc.n	3ec2 <_vsnprintf+0x5f2>
    3edc:	e052      	b.n	3f84 <_vsnprintf+0x6b4>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3ede:	2308      	movs	r3, #8
    3ee0:	e9cd 6303 	strd	r6, r3, [sp, #12]
    3ee4:	2210      	movs	r2, #16
    3ee6:	2300      	movs	r3, #0
    3ee8:	e9cd 3201 	strd	r3, r2, [sp, #4]
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    3eec:	f045 0521 	orr.w	r5, r5, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3ef0:	9505      	str	r5, [sp, #20]
    3ef2:	f85b 3b04 	ldr.w	r3, [fp], #4
    3ef6:	9300      	str	r3, [sp, #0]
    3ef8:	4622      	mov	r2, r4
    3efa:	464b      	mov	r3, r9
    3efc:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    3f00:	f7ff fc52 	bl	37a8 <_ntoa_long>
    3f04:	4604      	mov	r4, r0
        break;
    3f06:	e03d      	b.n	3f84 <_vsnprintf+0x6b4>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3f08:	f1b8 0f1f 	cmp.w	r8, #31
    3f0c:	f63f af2f 	bhi.w	3d6e <_vsnprintf+0x49e>
    else if (flags & FLAGS_PLUS) {
    3f10:	076e      	lsls	r6, r5, #29
    3f12:	f57f af50 	bpl.w	3db6 <_vsnprintf+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3f16:	aa1e      	add	r2, sp, #120	; 0x78
    3f18:	4442      	add	r2, r8
    3f1a:	212b      	movs	r1, #43	; 0x2b
    3f1c:	e723      	b.n	3d66 <_vsnprintf+0x496>
    3f1e:	bf00      	nop
    3f20:	3fe00000 	.word	0x3fe00000
        if ((*format != 'i') && (*format != 'd')) {
    3f24:	2869      	cmp	r0, #105	; 0x69
    3f26:	f04f 020a 	mov.w	r2, #10
    3f2a:	d003      	beq.n	3f34 <_vsnprintf+0x664>
    3f2c:	2864      	cmp	r0, #100	; 0x64
          base = 10U;
    3f2e:	4613      	mov	r3, r2
        if ((*format != 'i') && (*format != 'd')) {
    3f30:	f47f ae2a 	bne.w	3b88 <_vsnprintf+0x2b8>
          if (flags & FLAGS_LONG_LONG) {
    3f34:	05af      	lsls	r7, r5, #22
    3f36:	f57f ae67 	bpl.w	3c08 <_vsnprintf+0x338>
            const long long value = va_arg(va, long long);
    3f3a:	f10b 0b07 	add.w	fp, fp, #7
    3f3e:	f02b 0b07 	bic.w	fp, fp, #7
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            const long long value = va_arg(va, long long);
    3f44:	f8db 1004 	ldr.w	r1, [fp, #4]
    3f48:	465f      	mov	r7, fp
    3f4a:	f857 0b08 	ldr.w	r0, [r7], #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3f4e:	9204      	str	r2, [sp, #16]
    3f50:	e9cd 6306 	strd	r6, r3, [sp, #24]
    3f54:	2300      	movs	r3, #0
    3f56:	9305      	str	r3, [sp, #20]
    3f58:	0fcb      	lsrs	r3, r1, #31
    3f5a:	9302      	str	r3, [sp, #8]
    3f5c:	2800      	cmp	r0, #0
    3f5e:	460b      	mov	r3, r1
    3f60:	f173 0100 	sbcs.w	r1, r3, #0
    3f64:	9508      	str	r5, [sp, #32]
    3f66:	4602      	mov	r2, r0
    3f68:	da02      	bge.n	3f70 <_vsnprintf+0x6a0>
    3f6a:	4242      	negs	r2, r0
    3f6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3f70:	e9cd 2300 	strd	r2, r3, [sp]
    3f74:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    3f78:	464b      	mov	r3, r9
    3f7a:	4622      	mov	r2, r4
    3f7c:	f7ff fc56 	bl	382c <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3f80:	4604      	mov	r4, r0
        break;
    3f82:	46bb      	mov	fp, r7
  while (*format)
    3f84:	f89a 0000 	ldrb.w	r0, [sl]
    3f88:	2800      	cmp	r0, #0
    3f8a:	f47f acb0 	bne.w	38ee <_vsnprintf+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    3f8e:	454c      	cmp	r4, r9
    3f90:	bf2c      	ite	cs
    3f92:	f109 32ff 	addcs.w	r2, r9, #4294967295	; 0xffffffff
    3f96:	4622      	movcc	r2, r4
    3f98:	464b      	mov	r3, r9
    3f9a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3f9e:	2000      	movs	r0, #0
    3fa0:	47a8      	blx	r5

  // return written chars without terminating \0
  return (int)idx;
}
    3fa2:	4620      	mov	r0, r4
    3fa4:	b01f      	add	sp, #124	; 0x7c
    3fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3faa:	bf00      	nop

00003fac <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    3fac:	b40f      	push	{r0, r1, r2, r3}
    3fae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3fb0:	aa06      	add	r2, sp, #24
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3fb2:	a902      	add	r1, sp, #8
{
    3fb4:	f852 3b04 	ldr.w	r3, [r2], #4
  va_start(va, format);
    3fb8:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3fba:	9200      	str	r2, [sp, #0]
    3fbc:	4804      	ldr	r0, [pc, #16]	; (3fd0 <printf+0x24>)
    3fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3fc2:	f7ff fc85 	bl	38d0 <_vsnprintf>
  va_end(va);
  return ret;
}
    3fc6:	b005      	add	sp, #20
    3fc8:	f85d eb04 	ldr.w	lr, [sp], #4
    3fcc:	b004      	add	sp, #16
    3fce:	4770      	bx	lr
    3fd0:	000038c5 	.word	0x000038c5

00003fd4 <snprintf>:
  return ret;
}


int snprintf(char* buffer, size_t count, const char* format, ...)
{
    3fd4:	b40c      	push	{r2, r3}
    3fd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3fd8:	aa06      	add	r2, sp, #24
    3fda:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
    3fde:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    3fe0:	9200      	str	r2, [sp, #0]
    3fe2:	460a      	mov	r2, r1
    3fe4:	4601      	mov	r1, r0
    3fe6:	4804      	ldr	r0, [pc, #16]	; (3ff8 <snprintf+0x24>)
    3fe8:	f7ff fc72 	bl	38d0 <_vsnprintf>
  va_end(va);
  return ret;
}
    3fec:	b005      	add	sp, #20
    3fee:	f85d eb04 	ldr.w	lr, [sp], #4
    3ff2:	b002      	add	sp, #8
    3ff4:	4770      	bx	lr
    3ff6:	bf00      	nop
    3ff8:	00003655 	.word	0x00003655

00003ffc <roundf>:
    3ffc:	b082      	sub	sp, #8
    3ffe:	ed8d 0a01 	vstr	s0, [sp, #4]
    4002:	9901      	ldr	r1, [sp, #4]
    4004:	f3c1 53c7 	ubfx	r3, r1, #23, #8
    4008:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
    400c:	2a16      	cmp	r2, #22
    400e:	dc16      	bgt.n	403e <roundf+0x42>
    4010:	2a00      	cmp	r2, #0
    4012:	db0d      	blt.n	4030 <roundf+0x34>
    4014:	4810      	ldr	r0, [pc, #64]	; (4058 <roundf+0x5c>)
    4016:	4110      	asrs	r0, r2
    4018:	4208      	tst	r0, r1
    401a:	d012      	beq.n	4042 <roundf+0x46>
    401c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    4020:	4113      	asrs	r3, r2
    4022:	440b      	add	r3, r1
    4024:	ea23 0300 	bic.w	r3, r3, r0
    4028:	ee00 3a10 	vmov	s0, r3
    402c:	b002      	add	sp, #8
    402e:	4770      	bx	lr
    4030:	3201      	adds	r2, #1
    4032:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    4036:	d1f7      	bne.n	4028 <roundf+0x2c>
    4038:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
    403c:	e7f4      	b.n	4028 <roundf+0x2c>
    403e:	2a80      	cmp	r2, #128	; 0x80
    4040:	d003      	beq.n	404a <roundf+0x4e>
    4042:	ed9d 0a01 	vldr	s0, [sp, #4]
    4046:	b002      	add	sp, #8
    4048:	4770      	bx	lr
    404a:	eddd 7a01 	vldr	s15, [sp, #4]
    404e:	ee37 0aa7 	vadd.f32	s0, s15, s15
    4052:	b002      	add	sp, #8
    4054:	4770      	bx	lr
    4056:	bf00      	nop
    4058:	007fffff 	.word	0x007fffff

0000405c <malloc>:
    405c:	4b02      	ldr	r3, [pc, #8]	; (4068 <malloc+0xc>)
    405e:	4601      	mov	r1, r0
    4060:	6818      	ldr	r0, [r3, #0]
    4062:	f000 b859 	b.w	4118 <_malloc_r>
    4066:	bf00      	nop
    4068:	20000018 	.word	0x20000018

0000406c <free>:
    406c:	4b02      	ldr	r3, [pc, #8]	; (4078 <free+0xc>)
    406e:	4601      	mov	r1, r0
    4070:	6818      	ldr	r0, [r3, #0]
    4072:	f000 b803 	b.w	407c <_free_r>
    4076:	bf00      	nop
    4078:	20000018 	.word	0x20000018

0000407c <_free_r>:
    407c:	b538      	push	{r3, r4, r5, lr}
    407e:	4605      	mov	r5, r0
    4080:	2900      	cmp	r1, #0
    4082:	d045      	beq.n	4110 <_free_r+0x94>
    4084:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4088:	1f0c      	subs	r4, r1, #4
    408a:	2b00      	cmp	r3, #0
    408c:	bfb8      	it	lt
    408e:	18e4      	addlt	r4, r4, r3
    4090:	f000 f8ac 	bl	41ec <__malloc_lock>
    4094:	4a1f      	ldr	r2, [pc, #124]	; (4114 <_free_r+0x98>)
    4096:	6813      	ldr	r3, [r2, #0]
    4098:	4610      	mov	r0, r2
    409a:	b933      	cbnz	r3, 40aa <_free_r+0x2e>
    409c:	6063      	str	r3, [r4, #4]
    409e:	6014      	str	r4, [r2, #0]
    40a0:	4628      	mov	r0, r5
    40a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    40a6:	f000 b8a7 	b.w	41f8 <__malloc_unlock>
    40aa:	42a3      	cmp	r3, r4
    40ac:	d90c      	bls.n	40c8 <_free_r+0x4c>
    40ae:	6821      	ldr	r1, [r4, #0]
    40b0:	1862      	adds	r2, r4, r1
    40b2:	4293      	cmp	r3, r2
    40b4:	bf04      	itt	eq
    40b6:	681a      	ldreq	r2, [r3, #0]
    40b8:	685b      	ldreq	r3, [r3, #4]
    40ba:	6063      	str	r3, [r4, #4]
    40bc:	bf04      	itt	eq
    40be:	1852      	addeq	r2, r2, r1
    40c0:	6022      	streq	r2, [r4, #0]
    40c2:	6004      	str	r4, [r0, #0]
    40c4:	e7ec      	b.n	40a0 <_free_r+0x24>
    40c6:	4613      	mov	r3, r2
    40c8:	685a      	ldr	r2, [r3, #4]
    40ca:	b10a      	cbz	r2, 40d0 <_free_r+0x54>
    40cc:	42a2      	cmp	r2, r4
    40ce:	d9fa      	bls.n	40c6 <_free_r+0x4a>
    40d0:	6819      	ldr	r1, [r3, #0]
    40d2:	1858      	adds	r0, r3, r1
    40d4:	42a0      	cmp	r0, r4
    40d6:	d10b      	bne.n	40f0 <_free_r+0x74>
    40d8:	6820      	ldr	r0, [r4, #0]
    40da:	4401      	add	r1, r0
    40dc:	1858      	adds	r0, r3, r1
    40de:	4282      	cmp	r2, r0
    40e0:	6019      	str	r1, [r3, #0]
    40e2:	d1dd      	bne.n	40a0 <_free_r+0x24>
    40e4:	6810      	ldr	r0, [r2, #0]
    40e6:	6852      	ldr	r2, [r2, #4]
    40e8:	605a      	str	r2, [r3, #4]
    40ea:	4401      	add	r1, r0
    40ec:	6019      	str	r1, [r3, #0]
    40ee:	e7d7      	b.n	40a0 <_free_r+0x24>
    40f0:	d902      	bls.n	40f8 <_free_r+0x7c>
    40f2:	230c      	movs	r3, #12
    40f4:	602b      	str	r3, [r5, #0]
    40f6:	e7d3      	b.n	40a0 <_free_r+0x24>
    40f8:	6820      	ldr	r0, [r4, #0]
    40fa:	1821      	adds	r1, r4, r0
    40fc:	428a      	cmp	r2, r1
    40fe:	bf04      	itt	eq
    4100:	6811      	ldreq	r1, [r2, #0]
    4102:	6852      	ldreq	r2, [r2, #4]
    4104:	6062      	str	r2, [r4, #4]
    4106:	bf04      	itt	eq
    4108:	1809      	addeq	r1, r1, r0
    410a:	6021      	streq	r1, [r4, #0]
    410c:	605c      	str	r4, [r3, #4]
    410e:	e7c7      	b.n	40a0 <_free_r+0x24>
    4110:	bd38      	pop	{r3, r4, r5, pc}
    4112:	bf00      	nop
    4114:	200000f8 	.word	0x200000f8

00004118 <_malloc_r>:
    4118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    411a:	1ccd      	adds	r5, r1, #3
    411c:	f025 0503 	bic.w	r5, r5, #3
    4120:	3508      	adds	r5, #8
    4122:	2d0c      	cmp	r5, #12
    4124:	bf38      	it	cc
    4126:	250c      	movcc	r5, #12
    4128:	2d00      	cmp	r5, #0
    412a:	4606      	mov	r6, r0
    412c:	db01      	blt.n	4132 <_malloc_r+0x1a>
    412e:	42a9      	cmp	r1, r5
    4130:	d903      	bls.n	413a <_malloc_r+0x22>
    4132:	230c      	movs	r3, #12
    4134:	6033      	str	r3, [r6, #0]
    4136:	2000      	movs	r0, #0
    4138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    413a:	f000 f857 	bl	41ec <__malloc_lock>
    413e:	4921      	ldr	r1, [pc, #132]	; (41c4 <_malloc_r+0xac>)
    4140:	680a      	ldr	r2, [r1, #0]
    4142:	4614      	mov	r4, r2
    4144:	b99c      	cbnz	r4, 416e <_malloc_r+0x56>
    4146:	4f20      	ldr	r7, [pc, #128]	; (41c8 <_malloc_r+0xb0>)
    4148:	683b      	ldr	r3, [r7, #0]
    414a:	b923      	cbnz	r3, 4156 <_malloc_r+0x3e>
    414c:	4621      	mov	r1, r4
    414e:	4630      	mov	r0, r6
    4150:	f000 f83c 	bl	41cc <_sbrk_r>
    4154:	6038      	str	r0, [r7, #0]
    4156:	4629      	mov	r1, r5
    4158:	4630      	mov	r0, r6
    415a:	f000 f837 	bl	41cc <_sbrk_r>
    415e:	1c43      	adds	r3, r0, #1
    4160:	d123      	bne.n	41aa <_malloc_r+0x92>
    4162:	230c      	movs	r3, #12
    4164:	6033      	str	r3, [r6, #0]
    4166:	4630      	mov	r0, r6
    4168:	f000 f846 	bl	41f8 <__malloc_unlock>
    416c:	e7e3      	b.n	4136 <_malloc_r+0x1e>
    416e:	6823      	ldr	r3, [r4, #0]
    4170:	1b5b      	subs	r3, r3, r5
    4172:	d417      	bmi.n	41a4 <_malloc_r+0x8c>
    4174:	2b0b      	cmp	r3, #11
    4176:	d903      	bls.n	4180 <_malloc_r+0x68>
    4178:	6023      	str	r3, [r4, #0]
    417a:	441c      	add	r4, r3
    417c:	6025      	str	r5, [r4, #0]
    417e:	e004      	b.n	418a <_malloc_r+0x72>
    4180:	6863      	ldr	r3, [r4, #4]
    4182:	42a2      	cmp	r2, r4
    4184:	bf0c      	ite	eq
    4186:	600b      	streq	r3, [r1, #0]
    4188:	6053      	strne	r3, [r2, #4]
    418a:	4630      	mov	r0, r6
    418c:	f000 f834 	bl	41f8 <__malloc_unlock>
    4190:	f104 000b 	add.w	r0, r4, #11
    4194:	1d23      	adds	r3, r4, #4
    4196:	f020 0007 	bic.w	r0, r0, #7
    419a:	1ac2      	subs	r2, r0, r3
    419c:	d0cc      	beq.n	4138 <_malloc_r+0x20>
    419e:	1a1b      	subs	r3, r3, r0
    41a0:	50a3      	str	r3, [r4, r2]
    41a2:	e7c9      	b.n	4138 <_malloc_r+0x20>
    41a4:	4622      	mov	r2, r4
    41a6:	6864      	ldr	r4, [r4, #4]
    41a8:	e7cc      	b.n	4144 <_malloc_r+0x2c>
    41aa:	1cc4      	adds	r4, r0, #3
    41ac:	f024 0403 	bic.w	r4, r4, #3
    41b0:	42a0      	cmp	r0, r4
    41b2:	d0e3      	beq.n	417c <_malloc_r+0x64>
    41b4:	1a21      	subs	r1, r4, r0
    41b6:	4630      	mov	r0, r6
    41b8:	f000 f808 	bl	41cc <_sbrk_r>
    41bc:	3001      	adds	r0, #1
    41be:	d1dd      	bne.n	417c <_malloc_r+0x64>
    41c0:	e7cf      	b.n	4162 <_malloc_r+0x4a>
    41c2:	bf00      	nop
    41c4:	200000f8 	.word	0x200000f8
    41c8:	200000fc 	.word	0x200000fc

000041cc <_sbrk_r>:
    41cc:	b538      	push	{r3, r4, r5, lr}
    41ce:	4c06      	ldr	r4, [pc, #24]	; (41e8 <_sbrk_r+0x1c>)
    41d0:	2300      	movs	r3, #0
    41d2:	4605      	mov	r5, r0
    41d4:	4608      	mov	r0, r1
    41d6:	6023      	str	r3, [r4, #0]
    41d8:	f000 f816 	bl	4208 <_sbrk>
    41dc:	1c43      	adds	r3, r0, #1
    41de:	d102      	bne.n	41e6 <_sbrk_r+0x1a>
    41e0:	6823      	ldr	r3, [r4, #0]
    41e2:	b103      	cbz	r3, 41e6 <_sbrk_r+0x1a>
    41e4:	602b      	str	r3, [r5, #0]
    41e6:	bd38      	pop	{r3, r4, r5, pc}
    41e8:	2000017c 	.word	0x2000017c

000041ec <__malloc_lock>:
    41ec:	4801      	ldr	r0, [pc, #4]	; (41f4 <__malloc_lock+0x8>)
    41ee:	f000 b809 	b.w	4204 <__retarget_lock_acquire_recursive>
    41f2:	bf00      	nop
    41f4:	20000184 	.word	0x20000184

000041f8 <__malloc_unlock>:
    41f8:	4801      	ldr	r0, [pc, #4]	; (4200 <__malloc_unlock+0x8>)
    41fa:	f000 b804 	b.w	4206 <__retarget_lock_release_recursive>
    41fe:	bf00      	nop
    4200:	20000184 	.word	0x20000184

00004204 <__retarget_lock_acquire_recursive>:
    4204:	4770      	bx	lr

00004206 <__retarget_lock_release_recursive>:
    4206:	4770      	bx	lr

00004208 <_sbrk>:
    4208:	4a04      	ldr	r2, [pc, #16]	; (421c <_sbrk+0x14>)
    420a:	4905      	ldr	r1, [pc, #20]	; (4220 <_sbrk+0x18>)
    420c:	6813      	ldr	r3, [r2, #0]
    420e:	2b00      	cmp	r3, #0
    4210:	bf08      	it	eq
    4212:	460b      	moveq	r3, r1
    4214:	4418      	add	r0, r3
    4216:	6010      	str	r0, [r2, #0]
    4218:	4618      	mov	r0, r3
    421a:	4770      	bx	lr
    421c:	20000100 	.word	0x20000100
    4220:	2000018c 	.word	0x2000018c

00004224 <__FUNCTION__.7588>:
    4224:	64726168 6c756166 72745f74 5f656361     hardfault_trace_
    4234:	63617473                                 stack.

0000423a <__FUNCTION__.7601>:
    423a:	6d6d656d 67616e61 72745f65 5f656361     memmanage_trace_
    424a:	63617473                                 stack.

00004250 <__FUNCTION__.7614>:
    4250:	66737562 746c7561 6172745f 735f6563     busfault_trace_s
    4260:	6b636174                                 tack.

00004265 <__FUNCTION__.7627>:
    4265:	67617375 75616665 745f746c 65636172     usagefault_trace
    4275:	6174735f 5b006b63 205d7325 7542202d     _stack.[%s] - Bu
    4285:	61662073 21746c75 61745320 74206b63     s fault! Stack t
    4295:	65636172 000a0d3a 5d73255b 42202d20     race:...[%s] - B
    42a5:	20525346 2578305b 5d583230 5b000a0d     FSR [0x%02X]...[
    42b5:	205d7325 4642202d 5b205241 30257830     %s] - BFAR [0x%0
    42c5:	0d5d5838 255b000a 2d205d73 72614820     8X]...[%s] - Har
    42d5:	61662064 21746c75 61745320 74206b63     d fault! Stack t
    42e5:	65636172 000a0d3a 5d73255b 52202d20     race:...[%s] - R
    42f5:	305b2030 38302578 0a0d5d58 73255b00     0 [0x%08X]...[%s
    4305:	202d205d 5b203152 30257830 0d5d5838     ] - R1 [0x%08X].
    4315:	255b000a 2d205d73 20325220 2578305b     ..[%s] - R2 [0x%
    4325:	5d583830 5b000a0d 205d7325 3352202d     08X]...[%s] - R3
    4335:	78305b20 58383025 000a0d5d 5d73255b      [0x%08X]...[%s]
    4345:	52202d20 5b203231 30257830 0d5d5838      - R12 [0x%08X].
    4355:	255b000a 2d205d73 20524c20 3431525b     ..[%s] - LR [R14
    4365:	305b205d 38302578 63205d58 206c6c61     ] [0x%08X] call 
    4375:	75746572 0a0d6e72 73255b00 202d205d     return...[%s] - 
    4385:	5b204350 5d353152 78305b20 58383025     PC [R15] [0x%08X
    4395:	7270205d 6172676f 6f63206d 65746e75     ] program counte
    43a5:	000a0d72 5d73255b 50202d20 5b205253     r...[%s] - PSR [
    43b5:	30257830 205d5838 676f7270 206d6172     0x%08X] program 
    43c5:	74617473 72207375 73696765 0d726574     status register.
    43d5:	255b000a 2d205d73 2d2d2d20 2d2d2d2d     ..[%s] - -------
    43e5:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
    43f5:	2d2d2d2d 0d2d2d2d 255b000a 2d205d73     -------...[%s] -
    4405:	53464820 305b2052 38302578 0a0d5d58      HFSR [0x%08X]..
    4415:	73255b00 202d205d 52534349 78305b20     .[%s] - ICSR [0x
    4425:	58383025 000a0d5d 5d73255b 4d202d20     %08X]...[%s] - M
    4435:	5b205053 30257830 0d5d5838 255b000a     SP [0x%08X]...[%
    4445:	2d205d73 6d654d20 2079726f 616e616d     s] - Memory mana
    4455:	656d6567 6620746e 746c7561 74532021     gement fault! St
    4465:	206b6361 63617274 0a0d3a65 73255b00     ack trace:...[%s
    4475:	202d205d 53464d4d 305b2052 32302578     ] - MMFSR [0x%02
    4485:	0a0d5d58 73255b00 202d205d 41464d4d     X]...[%s] - MMFA
    4495:	305b2052 38302578 0a0d5d58 73255b00     R [0x%08X]...[%s
    44a5:	202d205d 67617355 61662065 21746c75     ] - Usage fault!
    44b5:	61745320 74206b63 65636172 000a0d3a      Stack trace:...
    44c5:	5d73255b 55202d20 20525346 2578305b     [%s] - UFSR [0x%
    44d5:	5d583430                                 04X]...

000044dc <CSWTCH.53>:
    44dc:	00005026 00005030 0000503a 00005044     &P..0P..:P..DP..
    44ec:	0000504e 00005058 00004692 00004692     NP..XP...F...F..
    44fc:	00004692 00005062 0000506c 00005076     .F..bP..lP..vP..
    450c:	00005080 0000508b 00005096 000050a1     .P...P...P...P..
    451c:	000050ac 000050b7 00004692 00004692     .P...P...F...F..
    452c:	00004692 000050c2 000050cd 000050d8     .F...P...P...P..
    453c:	000050e3 000050ee 000050f9 00005104     .P...P...P...Q..
    454c:	0000510f 0000511a 00005125 00004692     .Q...Q..%Q...F..
    455c:	00004692 00005130 0000513b 00005146     .F..0Q..;Q..FQ..
    456c:	00005151 0000515c 00005167 00005172     QQ..\Q..gQ..rQ..
    457c:	0000517d 00005188 00005193 00004692     }Q...Q...Q...F..
    458c:	00004692 0000519e 000051a9 000051b4     .F...Q...Q...Q..
    459c:	00004692 00004692 00004692 00004692     .F...F...F...F..
    45ac:	00004692 00004692 00004692 000051bf     .F...F...F...Q..
    45bc:	000051c6 000051ce 000051d6 000051de     .Q...Q...Q...Q..
    45cc:	000051e6 000051ee 00004692 00004692     .Q...Q...F...F..
    45dc:	00004692 000051f6 00004692 00005200     .F...Q...F...R..
    45ec:	00004692 0000520a 00004692 00005215     .F...R...F...R..
    45fc:	00004692 00004692 00004692 00004692     .F...F...F...F..
    460c:	00004692 00004692 00004692 00004692     .F...F...F...F..
    461c:	00004692 00004692 00004692 00004692     .F...F...F...F..
    462c:	00005220 00004692 00004692 0000522b      R...F...F..+R..
    463c:	00004692 00004692 00005236 00004692     .F...F..6R...F..
    464c:	00004692 00004692 00004692 00004692     .F...F...F...F..
    465c:	00004692 00004692 00004692 00004692     .F...F...F...F..
    466c:	00004692 00004692 00004692 00004692     .F...F...F...F..
    467c:	00005241 00005249 00005251              AR..IR..QR..

00004688 <__FUNCTION__.9376>:
    4688:	74696e69                                 init.

0000468d <__FUNCTION__.9387>:
    468d:	6e69616d 25003f00 75682573 75682546     main.?.%s%huF%hu
    469d:	63256325 75686825 574f4c00 004b4f00     %c%c%hhu.LOW.OK.
    46ad:	5d73255b 44202d20 63697665 25203a65     [%s] - Device: %
    46bd:	000a0d73 5d73255b 44202d20 63697665     s...[%s] - Devic
    46cd:	65522065 69736976 203a6e6f 30257830     e Revision: 0x%0
    46dd:	0a0d5834 73255b00 202d205d 696c6143     4X...[%s] - Cali
    46ed:	74617262 206e6f69 706d6574 74617265     bration temperat
    46fd:	3a657275 68682520 0d432075 255b000a     ure: %hhu C...[%
    470d:	2d205d73 616c4620 53206873 3a657a69     s] - Flash Size:
    471d:	75682520 0d426b20 255b000a 2d205d73      %hu kB...[%s] -
    472d:	4d415220 7a695320 25203a65 6b207568      RAM Size: %hu k
    473d:	000a0d42 5d73255b 46202d20 20656572     B...[%s] - Free 
    474d:	3a4d4152 756c2520 0a0d4220 73255b00     RAM: %lu B...[%s
    475d:	202d205d 71696e55 49206575 25203a44     ] - Unique ID: %
    476d:	2d583830 58383025 5b000a0d 205d7325     08X-%08X...[%s] 
    477d:	4d43202d 202d2055 4f584648 6f6c4320     - CMU - HFXO Clo
    478d:	203a6b63 66312e25 7a484d20 000a0d21     ck: %.1f MHz!...
    479d:	5d73255b 43202d20 2d20554d 52464820     [%s] - CMU - HFR
    47ad:	43204f43 6b636f6c 2e25203a 4d206631     CO Clock: %.1f M
    47bd:	0d217a48 255b000a 2d205d73 554d4320     Hz!...[%s] - CMU
    47cd:	55202d20 52464853 43204f43 6b636f6c      - USHFRCO Clock
    47dd:	2e25203a 4d206631 0d217a48 255b000a     : %.1f MHz!...[%
    47ed:	2d205d73 554d4320 41202d20 46485855     s] - CMU - AUXHF
    47fd:	204f4352 636f6c43 25203a6b 2066312e     RCO Clock: %.1f 
    480d:	217a484d 5b000a0d 205d7325 4d43202d     MHz!...[%s] - CM
    481d:	202d2055 4f58464c 6f6c4320 203a6b63     U - LFXO Clock: 
    482d:	66332e25 7a486b20 000a0d21 5d73255b     %.3f kHz!...[%s]
    483d:	43202d20 2d20554d 52464c20 43204f43      - CMU - LFRCO C
    484d:	6b636f6c 2e25203a 6b206633 0d217a48     lock: %.3f kHz!.
    485d:	255b000a 2d205d73 554d4320 55202d20     ..[%s] - CMU - U
    486d:	4352464c 6c43204f 3a6b636f 332e2520     LFRCO Clock: %.3
    487d:	486b2066 0a0d217a 73255b00 202d205d     f kHz!...[%s] - 
    488d:	20554d43 4648202d 20435253 636f6c43     CMU - HFSRC Cloc
    489d:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    48ad:	205d7325 4d43202d 202d2055 43204648     %s] - CMU - HF C
    48bd:	6b636f6c 2e25203a 4d206631 0d217a48     lock: %.1f MHz!.
    48cd:	255b000a 2d205d73 554d4320 48202d20     ..[%s] - CMU - H
    48dd:	53554246 6f6c4320 203a6b63 66312e25     FBUS Clock: %.1f
    48ed:	7a484d20 000a0d21 5d73255b 43202d20      MHz!...[%s] - C
    48fd:	2d20554d 43464820 2045524f 636f6c43     MU - HFCORE Cloc
    490d:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    491d:	205d7325 4d43202d 202d2055 58454648     %s] - CMU - HFEX
    492d:	6c432050 3a6b636f 312e2520 484d2066     P Clock: %.1f MH
    493d:	0a0d217a 73255b00 202d205d 20554d43     z!...[%s] - CMU 
    494d:	4648202d 20524550 636f6c43 25203a6b     - HFPER Clock: %
    495d:	2066312e 217a484d 5b000a0d 205d7325     .1f MHz!...[%s] 
    496d:	4d43202d 202d2055 45504648 43204252     - CMU - HFPERB C
    497d:	6b636f6c 2e25203a 4d206631 0d217a48     lock: %.1f MHz!.
    498d:	255b000a 2d205d73 554d4320 48202d20     ..[%s] - CMU - H
    499d:	52455046 6c432043 3a6b636f 312e2520     FPERC Clock: %.1
    49ad:	484d2066 0a0d217a 73255b00 202d205d     f MHz!...[%s] - 
    49bd:	20554d43 4648202d 4320454c 6b636f6c     CMU - HFLE Clock
    49cd:	2e25203a 4d206631 0d217a48 255b000a     : %.1f MHz!...[%
    49dd:	2d205d73 554d4320 51202d20 20495053     s] - CMU - QSPI 
    49ed:	636f6c43 25203a6b 2066312e 217a484d     Clock: %.1f MHz!
    49fd:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4a0d:	4f494453 6f6c4320 203a6b63 66312e25     SDIO Clock: %.1f
    4a1d:	7a484d20 000a0d21 5d73255b 43202d20      MHz!...[%s] - C
    4a2d:	2d20554d 42535520 6f6c4320 203a6b63     MU - USB Clock: 
    4a3d:	66312e25 7a484d20 000a0d21 5d73255b     %.1f MHz!...[%s]
    4a4d:	43202d20 2d20554d 43444120 6c432030      - CMU - ADC0 Cl
    4a5d:	3a6b636f 312e2520 484d2066 0a0d217a     ock: %.1f MHz!..
    4a6d:	73255b00 202d205d 20554d43 4441202d     .[%s] - CMU - AD
    4a7d:	43203143 6b636f6c 2e25203a 4d206631     C1 Clock: %.1f M
    4a8d:	0d217a48 255b000a 2d205d73 554d4320     Hz!...[%s] - CMU
    4a9d:	44202d20 43204742 6b636f6c 2e25203a      - DBG Clock: %.
    4aad:	4d206631 0d217a48 255b000a 2d205d73     1f MHz!...[%s] -
    4abd:	554d4320 41202d20 43205855 6b636f6c      CMU - AUX Clock
    4acd:	2e25203a 4d206631 0d217a48 255b000a     : %.1f MHz!...[%
    4add:	2d205d73 554d4320 4c202d20 43204146     s] - CMU - LFA C
    4aed:	6b636f6c 2e25203a 6b206633 0d217a48     lock: %.3f kHz!.
    4afd:	255b000a 2d205d73 554d4320 4c202d20     ..[%s] - CMU - L
    4b0d:	4e455345 43204553 6b636f6c 2e25203a     ESENSE Clock: %.
    4b1d:	6b206633 0d217a48 255b000a 2d205d73     3f kHz!...[%s] -
    4b2d:	554d4320 52202d20 43204354 6b636f6c      CMU - RTC Clock
    4b3d:	2e25203a 6b206633 0d217a48 255b000a     : %.3f kHz!...[%
    4b4d:	2d205d73 554d4320 4c202d20 43204443     s] - CMU - LCD C
    4b5d:	6b636f6c 2e25203a 6b206633 0d217a48     lock: %.3f kHz!.
    4b6d:	255b000a 2d205d73 554d4320 4c202d20     ..[%s] - CMU - L
    4b7d:	4d495445 20305245 636f6c43 25203a6b     ETIMER0 Clock: %
    4b8d:	2066332e 217a486b 5b000a0d 205d7325     .3f kHz!...[%s] 
    4b9d:	4d43202d 202d2055 4954454c 3152454d     - CMU - LETIMER1
    4bad:	6f6c4320 203a6b63 66332e25 7a486b20      Clock: %.3f kHz
    4bbd:	000a0d21 5d73255b 43202d20 2d20554d     !...[%s] - CMU -
    4bcd:	42464c20 6f6c4320 203a6b63 66332e25      LFB Clock: %.3f
    4bdd:	7a486b20 000a0d21 5d73255b 43202d20      kHz!...[%s] - C
    4bed:	2d20554d 55454c20 30545241 6f6c4320     MU - LEUART0 Clo
    4bfd:	203a6b63 66332e25 7a486b20 000a0d21     ck: %.3f kHz!...
    4c0d:	5d73255b 43202d20 2d20554d 55454c20     [%s] - CMU - LEU
    4c1d:	31545241 6f6c4320 203a6b63 66332e25     ART1 Clock: %.3f
    4c2d:	7a486b20 000a0d21 5d73255b 43202d20      kHz!...[%s] - C
    4c3d:	2d20554d 53595320 4b434954 6f6c4320     MU - SYSTICK Clo
    4c4d:	203a6b63 66332e25 7a486b20 000a0d21     ck: %.3f kHz!...
    4c5d:	5d73255b 43202d20 2d20554d 45534320     [%s] - CMU - CSE
    4c6d:	6c43204e 3a6b636f 332e2520 486b2066     N Clock: %.3f kH
    4c7d:	0a0d217a 73255b00 202d205d 20554d43     z!...[%s] - CMU 
    4c8d:	464c202d 6c432043 3a6b636f 332e2520     - LFC Clock: %.3
    4c9d:	486b2066 0a0d217a 73255b00 202d205d     f kHz!...[%s] - 
    4cad:	20554d43 464c202d 6c432045 3a6b636f     CMU - LFE Clock:
    4cbd:	332e2520 486b2066 0a0d217a 73255b00      %.3f kHz!...[%s
    4ccd:	202d205d 20554d43 5452202d 43204343     ] - CMU - RTCC C
    4cdd:	6b636f6c 2e25203a 6b206633 0d217a48     lock: %.3f kHz!.
    4ced:	255b000a 2d205d73 554d4520 41202d20     ..[%s] - EMU - A
    4cfd:	20444456 6c6c6146 72685420 6f687365     VDD Fall Thresho
    4d0d:	203a646c 66322e25 21566d20 5b000a0d     ld: %.2f mV!...[
    4d1d:	205d7325 4d45202d 202d2055 44445641     %s] - EMU - AVDD
    4d2d:	73695220 68542065 68736572 3a646c6f      Rise Threshold:
    4d3d:	322e2520 566d2066 000a0d21 5d73255b      %.2f mV!...[%s]
    4d4d:	45202d20 2d20554d 44564120 6f562044      - EMU - AVDD Vo
    4d5d:	6761746c 25203a65 2066322e 0a0d566d     ltage: %.2f mV..
    4d6d:	73255b00 202d205d 20554d45 5641202d     .[%s] - EMU - AV
    4d7d:	53204444 75746174 25203a73 000a0d73     DD Status: %s...
    4d8d:	5d73255b 45202d20 2d20554d 44564420     [%s] - EMU - DVD
    4d9d:	61462044 54206c6c 73657268 646c6f68     D Fall Threshold
    4dad:	2e25203a 6d206632 0a0d2156 73255b00     : %.2f mV!...[%s
    4dbd:	202d205d 20554d45 5644202d 52204444     ] - EMU - DVDD R
    4dcd:	20657369 65726854 6c6f6873 25203a64     ise Threshold: %
    4ddd:	2066322e 0d21566d 255b000a 2d205d73     .2f mV!...[%s] -
    4ded:	554d4520 44202d20 20444456 746c6f56      EMU - DVDD Volt
    4dfd:	3a656761 322e2520 566d2066 5b000a0d     age: %.2f mV...[
    4e0d:	205d7325 4d45202d 202d2055 44445644     %s] - EMU - DVDD
    4e1d:	61745320 3a737574 0d732520 255b000a      Status: %s...[%
    4e2d:	2d205d73 554d4520 49202d20 4444564f     s] - EMU - IOVDD
    4e3d:	6c614620 6854206c 68736572 3a646c6f      Fall Threshold:
    4e4d:	322e2520 566d2066 000a0d21 5d73255b      %.2f mV!...[%s]
    4e5d:	45202d20 2d20554d 564f4920 52204444      - EMU - IOVDD R
    4e6d:	20657369 65726854 6c6f6873 25203a64     ise Threshold: %
    4e7d:	2066322e 0d21566d 255b000a 2d205d73     .2f mV!...[%s] -
    4e8d:	554d4520 49202d20 4444564f 6c6f5620      EMU - IOVDD Vol
    4e9d:	65676174 2e25203a 6d206632 000a0d56     tage: %.2f mV...
    4ead:	5d73255b 45202d20 2d20554d 564f4920     [%s] - EMU - IOV
    4ebd:	53204444 75746174 25203a73 000a0d73     DD Status: %s...
    4ecd:	5d73255b 45202d20 2d20554d 726f4320     [%s] - EMU - Cor
    4edd:	6f562065 6761746c 25203a65 2066322e     e Voltage: %.2f 
    4eed:	0a0d566d 73255b00 202d205d 6e616353     mV...[%s] - Scan
    4efd:	676e696e 43324920 73756220 2e2e3020     ning I2C bus 0..
    4f0d:	000a0d2e 5d73255b 20202d20 64644120     ....[%s] -   Add
    4f1d:	73736572 25783020 20583230 654b4341     ress 0x%02X ACKe
    4f2d:	0a0d2164 73255b00 202d205d 6e616353     d!...[%s] - Scan
    4f3d:	676e696e 43324920 73756220 2e2e3220     ning I2C bus 2..
    4f4d:	000a0d2e 5d73255b 49202d20 6974696e     ....[%s] - Initi
    4f5d:	63206c61 62696c61 69746172 64206e6f     al calibration d
    4f6d:	3a706d75 5b000a0d 205d7325 2020202d     ump:...[%s] -   
    4f7d:	30257830 2d205838 7830203e 58383025     0x%08X -> 0x%08X
    4f8d:	5b000a0d 205d7325 6c46202d 20687361     ...[%s] - Flash 
    4f9d:	74726150 3a444920 36302520 000a0d58     Part ID: %06X...
    4fad:	5d73255b 46202d20 6873616c 3a444920     [%s] - Flash ID:
    4fbd:	32302520 32302558 32302558 32302558      %02X%02X%02X%02
    4fcd:	32302558 32302558 32302558 32302558     X%02X%02X%02X%02
    4fdd:	000a0d58 5d73255b 51202d20 20495053     X...[%s] - QSPI 
    4fed:	203a4452 58323025 5b000a0d 205d7325     RD: %02X...[%s] 
    4ffd:	6f42202d 5220746f 25203a44 0d583230     - Boot RD: %02X.
    500d:	255b000a 2d205d73 74614420 44522061     ..[%s] - Data RD
    501d:	3025203a 0a0d5832 52464500 474d3233     : %02X...EFR32MG
    502d:	45005031 32335246 4231474d 52464500     1P.EFR32MG1B.EFR
    503d:	474d3233 45005631 32335246 50314742     32MG1V.EFR32BG1P
    504d:	52464500 47423233 45004231 32335246     .EFR32BG1B.EFR32
    505d:	56314742 52464500 47463233 45005031     BG1V.EFR32FG1P.E
    506d:	32335246 42314746 52464500 47463233     FR32FG1B.EFR32FG
    507d:	45005631 32335246 3231474d 46450050     1V.EFR32MG12P.EF
    508d:	4d323352 42323147 52464500 474d3233     R32MG12B.EFR32MG
    509d:	00563231 33524645 31474232 45005032     12V.EFR32BG12P.E
    50ad:	32335246 32314742 46450042 42323352     FR32BG12B.EFR32B
    50bd:	56323147 52464500 47463233 00503231     G12V.EFR32FG12P.
    50cd:	33524645 31474632 45004232 32335246     EFR32FG12B.EFR32
    50dd:	32314746 46450056 4d323352 50333147     FG12V.EFR32MG13P
    50ed:	52464500 474d3233 00423331 33524645     .EFR32MG13B.EFR3
    50fd:	31474d32 45005633 32335246 33314742     2MG13V.EFR32BG13
    510d:	46450050 42323352 42333147 52464500     P.EFR32BG13B.EFR
    511d:	47423233 00563331 33524645 31475a32     32BG13V.EFR32ZG1
    512d:	45005033 32335246 33314746 46450050     3P.EFR32FG13P.EF
    513d:	46323352 42333147 52464500 47463233     R32FG13B.EFR32FG
    514d:	00563331 33524645 31474d32 45005034     13V.EFR32MG14P.E
    515d:	32335246 3431474d 46450042 4d323352     FR32MG14B.EFR32M
    516d:	56343147 52464500 47423233 00503431     G14V.EFR32BG14P.
    517d:	33524645 31474232 45004234 32335246     EFR32BG14B.EFR32
    518d:	34314742 46450056 5a323352 50343147     BG14V.EFR32ZG14P
    519d:	52464500 47463233 00503431 33524645     .EFR32FG14P.EFR3
    51ad:	31474632 45004234 32335246 34314746     2FG14B.EFR32FG14
    51bd:	46450056 4732334d 4d464500 47473233     V.EFM32G.EFM32GG
    51cd:	4d464500 47543233 4d464500 474c3233     .EFM32TG.EFM32LG
    51dd:	4d464500 47573233 4d464500 475a3233     .EFM32WG.EFM32ZG
    51ed:	4d464500 47483233 4d464500 47503233     .EFM32HG.EFM32PG
    51fd:	45004231 32334d46 4231474a 4d464500     1B.EFM32JG1B.EFM
    520d:	47503233 00423231 334d4645 31474a32     32PG12B.EFM32JG1
    521d:	45004232 32334d46 31314747 46450042     2B.EFM32GG11B.EF
    522d:	5432334d 42313147 4d464500 47473233     M32TG11B.EFM32GG
    523d:	00423231 33525a45 00474c32 33525a45     12B.EZR32LG.EZR3
    524d:	00475732 33525a45 00474832 00000000     2WG.EZR32HG.....
    525d:	                                         ...

00005260 <pow10.5152>:
    5260:	00000000 3ff00000 00000000 40240000     .......?......$@
    5270:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    5280:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    5290:	00000000 412e8480 00000000 416312d0     .......A......cA
    52a0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
